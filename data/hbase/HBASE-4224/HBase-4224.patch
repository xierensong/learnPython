Index: src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java	(revision 1187933)
+++ src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java	(working copy)
@@ -25,8 +25,10 @@
 import java.lang.reflect.UndeclaredThrowableException;
 import java.net.SocketTimeoutException;
 import java.util.Arrays;
+import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.regex.Pattern;
 
@@ -64,6 +66,9 @@
 import org.apache.hadoop.ipc.RemoteException;
 import org.apache.hadoop.util.StringUtils;
 
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+
 /**
  * Provides an interface to manage HBase database table metadata + general
  * administrative functions.  Use HBaseAdmin to create, drop, list, enable and
@@ -1133,54 +1138,193 @@
   }
 
   /**
-   * Flush a table or an individual region.
+   * Flush an entire region server or a particular region or 
+   * an entire table 
    * Asynchronous operation.
    *
-   * @param tableNameOrRegionName table or region to flush
+   * @param name - This could represent one of the following
+   *               1. Address of the region server to flush
+   *                  Format: "hostname, port, startcode"
+   *               2. Name of a specific region to be flushed
+   *               3. Name of a specific table to be flushed
+   *               
    * @throws IOException if a remote or network exception occurs
    * @throws InterruptedException
    */
-  public void flush(final byte [] tableNameOrRegionName)
-  throws IOException, InterruptedException {
-    boolean isRegionName = isRegionName(tableNameOrRegionName);
-    CatalogTracker ct = getCatalogTracker();
+  public void flush(final byte [] name)
+      throws IOException, InterruptedException {
+   
+      List<Pair<HRegionInfo, ServerName>> flushList = Lists.newArrayList();
+      ServerName serverName = getServerNameIfValid(name);
+      boolean rollWAL = true;
+      
+      if( serverName != null) {
+        // Flush all regions of a Region Server
+        flushList.add(new Pair<HRegionInfo, ServerName>(null, serverName));
+      } else if (isRegionName(name)) {
+        // Flush a particular region
+        rollWAL = false;
+        Pair<HRegionInfo, ServerName> regionToFlush = getRegionServerPair(name);
+        if(regionToFlush != null)
+          flushList.add(regionToFlush);
+      } else {
+        // Flush all regions of a Table
+        flushList =  getRegionServerPairs(name);
+      }
+      
+      /*
+       * Flushes the regions in the list and returns the list of servers whose
+       * WAL ( Write Ahead Log ) has to be rolled
+       */
+      Set<ServerName> serverList = flushRegions(flushList);
+      if(rollWAL) {
+        for(ServerName server: serverList) 
+          rollHLogWriter(server.getServerName());
+      }
+  }
+  
+  /**
+   * Returns the ServerName object if the string represents a valid 
+   * Region Server. 
+   * A valid string is of the format: "Hostname,Port,RegionStartCode" 
+   * 
+   * @param name - a valid region server name identified by
+   *               "Hostname,Port,RegionStartCode"
+   * @return ServerName object representation of the string
+   */
+  private ServerName getServerNameIfValid(byte [] name) {
+    ServerName serverName = new ServerName(name);
+    if(!serverName.isValid())
+      return null;
+    return serverName;
+  }
+
+  /**
+   * Fetches the HRegionInfo and ServerName reference representing the 
+   * region name from the CatalogTracker.
+
+   * @return A {@link Pair} of HRegion, ServerName 
+   * @throws ZooKeeperConnectionException
+   * @throws IOException
+   */
+  private Pair<HRegionInfo, ServerName> getRegionServerPair(
+      byte[] regionName) throws ZooKeeperConnectionException, 
+      IOException {
+    CatalogTracker catalogTracker = getCatalogTracker();
     try {
-      if (isRegionName) {
-        Pair<HRegionInfo, ServerName> pair =
-          MetaReader.getRegion(ct, tableNameOrRegionName);
-        if (pair == null || pair.getSecond() == null) {
-          LOG.info("No server in .META. for " +
-            Bytes.toStringBinary(tableNameOrRegionName) + "; pair=" + pair);
-        } else {
-          flush(pair.getSecond(), pair.getFirst());
+      Pair<HRegionInfo, ServerName> pair = 
+          MetaReader.getRegion(catalogTracker, regionName);
+      if (!isValidRegionServerPair(pair)) return null;
+      return pair;
+    } finally {
+      cleanupCatalogTracker(catalogTracker);
+    }
+  }
+  
+  /**
+   * Check if the pair representing the region server is a valid one
+   * 
+   * The pair is considered valid when
+   * 1. Pair reference is not null
+   * 2. Region represented by HregionInfo in the pair is online
+   * 3. ServerName reference in the pair is not null
+   *   
+   * @param pair - A pair of HRegionInfo and ServerName which represents
+   *               a region and the region server address where this 
+   *               region is hosted respectively
+   * @return true if the pair is valid
+   */
+  private boolean isValidRegionServerPair(Pair<HRegionInfo, ServerName> pair) {
+    boolean isValid = true;
+    if (pair == null) {
+      isValid = false;
+    } else if (pair.getFirst().isOffline() || pair.getSecond() == null) { 
+      byte[] regionName = pair.getFirst().getRegionName();
+      LOG.info("No server in .META. for " + Bytes.toStringBinary(regionName) + 
+          "; pair=" + pair);
+      isValid = false;
+    }
+    return isValid;
+  }
+  
+  /**
+   * Fetches the region info pairs for all the regions belonging to a 
+   * particular table
+   * 
+   * @return The list of HRegionInfo, ServerName pairs of all regions
+   *         belonging to the table
+   * @throws ZooKeeperConnectionException
+   * @throws IOException
+   * @throws InterruptedException
+   */
+  private List<Pair<HRegionInfo, ServerName>> getRegionServerPairs(
+      byte[] tableName) throws ZooKeeperConnectionException, 
+      IOException, InterruptedException {
+    CatalogTracker catalogTracker = getCatalogTracker();
+    try {
+      List<Pair<HRegionInfo, ServerName>> regionsToFlush = Lists.newArrayList();
+      List<Pair<HRegionInfo, ServerName>> pairs =
+          MetaReader.getTableRegionsAndLocations(catalogTracker,
+              Bytes.toString(tableName));
+      
+      for (Pair<HRegionInfo, ServerName> pair: pairs) {
+        if(isValidRegionServerPair(pair)) {
+          regionsToFlush.add(pair);
+        }  
+      }
+      return regionsToFlush;
+    } finally {
+      cleanupCatalogTracker(catalogTracker);
+    }
+  }
+  
+  /**
+   * Flushes the all the regions present in the flush list and returns the list
+   * of ServerNames whose WAL is to be rolled
+   * 
+   * @param flushList - List of pair of HRegionInfo, ServerName each
+   *                    representing a region
+   * @return list of ServerNames whose WAL is to be rolled
+   * @throws IOException
+   */
+  private Set<ServerName> flushRegions(List<Pair<HRegionInfo, 
+      ServerName>> flushList) throws IOException {
+    HashSet<ServerName> rollWALServers = Sets.newHashSet();
+    for(Pair<HRegionInfo, ServerName> pair : flushList) {
+      try {
+        ServerName serverName = pair.getSecond();
+        if(flush(serverName, pair.getFirst())) {
+          rollWALServers.add(serverName);
         }
-      } else {
-        List<Pair<HRegionInfo, ServerName>> pairs =
-          MetaReader.getTableRegionsAndLocations(ct,
-              Bytes.toString(tableNameOrRegionName));
-        for (Pair<HRegionInfo, ServerName> pair: pairs) {
-          if (pair.getFirst().isOffline()) continue;
-          if (pair.getSecond() == null) continue;
-          try {
-            flush(pair.getSecond(), pair.getFirst());
-          } catch (NotServingRegionException e) {
-            if (LOG.isDebugEnabled()) {
-              LOG.debug("Trying to flush " + pair.getFirst() + ": " +
+      } catch (NotServingRegionException e) {
+          if (LOG.isDebugEnabled()) {
+            LOG.debug("Trying to flush " + pair.getFirst() + ": " +
                 StringUtils.stringifyException(e));
-            }
           }
-        }
       }
-    } finally {
-      cleanupCatalogTracker(ct);
     }
+    return rollWALServers;
   }
-
-  private void flush(final ServerName sn, final HRegionInfo hri)
-  throws IOException {
-    HRegionInterface rs =
-      this.connection.getHRegionConnection(sn.getHostname(), sn.getPort());
-    rs.flushRegion(hri);
+  
+  /**
+   * Makes the actual RPC call to flush the a particular region.
+   *   
+   * @param serverName - Server address where the region is hosted 
+   * @param region - region to be flushed.
+   * @return true if the flush was successful
+   * @throws IOException
+   */
+  private boolean flush(final ServerName serverName, final HRegionInfo region)
+      throws IOException {
+    boolean isRollWAL;
+    HRegionInterface regionServer =
+      this.connection.getHRegionConnection(serverName.getHostname(), serverName.getPort());
+    if (region != null) {
+      isRollWAL = regionServer.flushRegion(region);
+    } else {
+      isRollWAL = regionServer.flushAllRegions();
+    }    
+    return isRollWAL;
   }
 
   /**
Index: src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java	(revision 1187933)
+++ src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java	(working copy)
@@ -2612,13 +2612,23 @@
 
   @Override
   @QosPriority(priority=HIGH_QOS)
-  public void flushRegion(HRegionInfo regionInfo)
+  public boolean flushRegion(HRegionInfo regionInfo)
       throws NotServingRegionException, IOException {
     checkOpen();
     LOG.info("Flushing " + regionInfo.getRegionNameAsString());
     HRegion region = getRegion(regionInfo.getRegionName());
-    region.flushcache();
+    boolean isFlushed = region.flushcache();
+    return isFlushed;
   }
+  
+  public boolean flushAllRegions()
+    throws NotServingRegionException, IOException {
+    List<HRegionInfo> onlineRegions = getOnlineRegions();
+    boolean atleastOneSuccessfulFlush = false;
+    for(HRegionInfo region : onlineRegions) 
+      atleastOneSuccessfulFlush |= flushRegion(region);
+    return atleastOneSuccessfulFlush;
+  }
 
   @Override
   @QosPriority(priority=HIGH_QOS)
Index: src/main/java/org/apache/hadoop/hbase/ServerName.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/ServerName.java	(revision 1187933)
+++ src/main/java/org/apache/hadoop/hbase/ServerName.java	(working copy)
@@ -21,6 +21,7 @@
 
 import java.util.Collection;
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.hbase.util.Addressing;
 import org.apache.hadoop.hbase.util.Bytes;
 
@@ -230,4 +231,20 @@
     return left.getHostname().equals(right.getHostname()) &&
       left.getPort() == right.getPort();
   }
+
+  /**
+   * Checks if the server name represented by this instance is valid
+   * A ServerName is considered valid if 
+   * 1. hostname is not null and,
+   * 2. post > 0
+   * 3. startcode > 0
+   * 
+   * @return true if the server name is valid
+   */
+  public boolean isValid() {
+    if(StringUtils.isNotBlank(hostname) && port > 0 && startcode > 0) 
+      return true;
+    return false;
+  }
+  
 }
Index: src/main/java/org/apache/hadoop/hbase/ipc/HRegionInterface.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/ipc/HRegionInterface.java	(revision 1187933)
+++ src/main/java/org/apache/hadoop/hbase/ipc/HRegionInterface.java	(working copy)
@@ -423,10 +423,21 @@
    * @throws NotServingRegionException
    * @throws IOException
    */
-  void flushRegion(HRegionInfo regionInfo)
-  throws NotServingRegionException, IOException;
-
+  boolean flushRegion(HRegionInfo regionInfo)
+    throws NotServingRegionException, IOException;
+  
   /**
+   * Flushes the Memstore of all the regions which are online on the 
+   * region server
+   * 
+   * @return true if atleast one of the region flushes were successful
+   * @throws NotServingRegionException
+   * @throws IOException
+   */
+  boolean flushAllRegions() 
+    throws NotServingRegionException, IOException;
+  
+  /**
    * Splits the specified region.
    * <p>
    * This method currently flushes the region and then forces a compaction which
