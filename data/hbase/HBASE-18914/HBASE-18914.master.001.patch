From 25df63956023487201f14bdead4426e1e48b42be Mon Sep 17 00:00:00 2001
From: Guanghao Zhang <zghao@apache.org>
Date: Sat, 7 Oct 2017 09:25:56 +0800
Subject: [PATCH] HBASE-18914 Remove AsyncAdmin's methods which were already
 deprecated in Admin interface

---
 .../org/apache/hadoop/hbase/client/AsyncAdmin.java | 23 --------
 .../hadoop/hbase/client/AsyncHBaseAdmin.java       | 10 ----
 .../hadoop/hbase/client/RawAsyncHBaseAdmin.java    | 25 --------
 .../hbase/client/TestAsyncRegionAdminApi.java      | 68 ----------------------
 4 files changed, 126 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncAdmin.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncAdmin.java
index e539c6a..ec39f68 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncAdmin.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncAdmin.java
@@ -226,16 +226,6 @@ public interface AsyncAdmin {
   CompletableFuture<Boolean> isTableAvailable(TableName tableName, byte[][] splitKeys);
 
   /**
-   * Get the status of alter command - indicates how many regions have received the updated schema
-   * Asynchronous operation.
-   * @param tableName TableName instance
-   * @return Pair indicating the number of regions updated Pair.getFirst() is the regions that are
-   *         yet to be updated Pair.getSecond() is the total number of regions of the table. The
-   *         return value will be wrapped by a {@link CompletableFuture}.
-   */
-  CompletableFuture<Pair<Integer, Integer>> getAlterStatus(TableName tableName);
-
-  /**
    * Add a column family to an existing table.
    * @param tableName name of the table to add column family to
    * @param columnFamily column family descriptor of column family to be added
@@ -290,19 +280,6 @@ public interface AsyncAdmin {
   CompletableFuture<List<NamespaceDescriptor>> listNamespaceDescriptors();
 
   /**
-   * Close a region. For expert-admins Runs close on the regionserver. The master will not be
-   * informed of the close.
-   * @param regionName region name to close
-   * @param serverName Deprecated. Not used anymore after deprecation.
-   * @return Deprecated. Always returns true now.
-   * @deprecated As of release 2.0.0, this will be removed in HBase 3.0.0
-   *             (<a href="https://issues.apache.org/jira/browse/HBASE-18231">HBASE-18231</a>).
-   *             Use {@link #unassign(byte[], boolean)}.
-   */
-  @Deprecated
-  CompletableFuture<Boolean> closeRegion(byte[] regionName, Optional<ServerName> serverName);
-
-  /**
    * Get all the online regions on a region server.
    */
   CompletableFuture<List<RegionInfo>> getOnlineRegions(ServerName serverName);
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncHBaseAdmin.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncHBaseAdmin.java
index 3cb8360..fc17e94 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncHBaseAdmin.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncHBaseAdmin.java
@@ -162,11 +162,6 @@ public class AsyncHBaseAdmin implements AsyncAdmin {
   }
 
   @Override
-  public CompletableFuture<Pair<Integer, Integer>> getAlterStatus(TableName tableName) {
-    return wrap(rawAdmin.getAlterStatus(tableName));
-  }
-
-  @Override
   public CompletableFuture<Void> addColumnFamily(TableName tableName,
       ColumnFamilyDescriptor columnFamily) {
     return wrap(rawAdmin.addColumnFamily(tableName, columnFamily));
@@ -209,11 +204,6 @@ public class AsyncHBaseAdmin implements AsyncAdmin {
   }
 
   @Override
-  public CompletableFuture<Boolean> closeRegion(byte[] regionName, Optional<ServerName> unused) {
-    return wrap(rawAdmin.closeRegion(regionName, unused));
-  }
-
-  @Override
   public CompletableFuture<List<RegionInfo>> getOnlineRegions(ServerName serverName) {
     return wrap(rawAdmin.getOnlineRegions(serverName));
   }
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncHBaseAdmin.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncHBaseAdmin.java
index 589796a..485c332 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncHBaseAdmin.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncHBaseAdmin.java
@@ -641,18 +641,6 @@ public class RawAsyncHBaseAdmin implements AsyncAdmin {
   }
 
   @Override
-  public CompletableFuture<Pair<Integer, Integer>> getAlterStatus(TableName tableName) {
-    return this
-        .<Pair<Integer, Integer>>newMasterCaller()
-        .action(
-          (controller, stub) -> this
-              .<GetSchemaAlterStatusRequest, GetSchemaAlterStatusResponse, Pair<Integer, Integer>> call(
-                controller, stub, RequestConverter.buildGetSchemaAlterStatusRequest(tableName), (s,
-                    c, req, done) -> s.getSchemaAlterStatus(c, req, done), (resp) -> new Pair<>(
-                    resp.getYetToUpdateRegions(), resp.getTotalRegions()))).call();
-  }
-
-  @Override
   public CompletableFuture<Void> addColumnFamily(TableName tableName, ColumnFamilyDescriptor columnFamily) {
     return this.<AddColumnRequest, AddColumnResponse> procedureCall(
       RequestConverter.buildAddColumnRequest(tableName, columnFamily, ng.getNonceGroup(),
@@ -726,19 +714,6 @@ public class RawAsyncHBaseAdmin implements AsyncAdmin {
   }
 
   @Override
-  public CompletableFuture<Boolean> closeRegion(byte[] regionName, Optional<ServerName> unused) {
-    CompletableFuture<Boolean> future = new CompletableFuture<>();
-    unassign(regionName, true).whenComplete((result, err) -> {
-      if (err != null) {
-        future.completeExceptionally(err);
-      } else {
-        future.complete(true);
-      }
-    });
-    return future;
-  }
-
-  @Override
   public CompletableFuture<List<RegionInfo>> getOnlineRegions(ServerName serverName) {
     return this.<List<RegionInfo>> newAdminCaller()
         .action((controller, stub) -> this
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncRegionAdminApi.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncRegionAdminApi.java
index 3966cf2..23e54ca 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncRegionAdminApi.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncRegionAdminApi.java
@@ -66,74 +66,6 @@ import org.apache.hadoop.hbase.shaded.protobuf.ProtobufUtil;
 public class TestAsyncRegionAdminApi extends TestAsyncAdminBase {
 
   @Test
-  public void testCloseRegion() throws Exception {
-    createTableWithDefaultConf(tableName);
-
-    RegionInfo info = null;
-    HRegionServer rs = TEST_UTIL.getRSForFirstRegionInTable(tableName);
-    List<RegionInfo> onlineRegions = ProtobufUtil.getOnlineRegions(rs.getRSRpcServices());
-    for (RegionInfo regionInfo : onlineRegions) {
-      if (!regionInfo.getTable().isSystemTable()) {
-        info = regionInfo;
-        boolean closed = admin.closeRegion(regionInfo.getRegionName(),
-          Optional.of(rs.getServerName())).get();
-        assertTrue(closed);
-      }
-    }
-    boolean isInList = ProtobufUtil.getOnlineRegions(rs.getRSRpcServices()).contains(info);
-    long timeout = System.currentTimeMillis() + 10000;
-    while ((System.currentTimeMillis() < timeout) && (isInList)) {
-      Thread.sleep(100);
-      isInList = ProtobufUtil.getOnlineRegions(rs.getRSRpcServices()).contains(info);
-    }
-
-    assertFalse("The region should not be present in online regions list.", isInList);
-  }
-
-  @Test
-  public void testCloseRegionIfInvalidRegionNameIsPassed() throws Exception {
-    createTableWithDefaultConf(tableName);
-
-    RegionInfo info = null;
-    HRegionServer rs = TEST_UTIL.getRSForFirstRegionInTable(tableName);
-    List<RegionInfo> onlineRegions = ProtobufUtil.getOnlineRegions(rs.getRSRpcServices());
-    for (RegionInfo regionInfo : onlineRegions) {
-      if (!regionInfo.isMetaTable()) {
-        if (regionInfo.getRegionNameAsString().contains(tableName.getNameAsString())) {
-          info = regionInfo;
-          boolean catchNotServingException = false;
-          try {
-            admin.closeRegion(Bytes.toBytes("sample"), Optional.of(rs.getServerName()))
-                .get();
-          } catch (Exception e) {
-            catchNotServingException = true;
-            // expected, ignore it
-          }
-          assertTrue(catchNotServingException);
-        }
-      }
-    }
-    onlineRegions = ProtobufUtil.getOnlineRegions(rs.getRSRpcServices());
-    assertTrue("The region should be present in online regions list.",
-      onlineRegions.contains(info));
-  }
-
-  @Test
-  public void testCloseRegionWhenServerNameIsEmpty() throws Exception {
-    createTableWithDefaultConf(tableName);
-
-    HRegionServer rs = TEST_UTIL.getRSForFirstRegionInTable(tableName);
-    List<RegionInfo> onlineRegions = ProtobufUtil.getOnlineRegions(rs.getRSRpcServices());
-    for (RegionInfo regionInfo : onlineRegions) {
-      if (!regionInfo.isMetaTable()) {
-        if (regionInfo.getRegionNameAsString().contains("TestHBACloseRegionWhenServerNameIsEmpty")) {
-          admin.closeRegion(regionInfo.getRegionName(), Optional.empty()).get();
-        }
-      }
-    }
-  }
-
-  @Test
   public void testGetRegionLocation() throws Exception {
     RawAsyncHBaseAdmin rawAdmin = (RawAsyncHBaseAdmin) ASYNC_CONN.getAdmin();
     TEST_UTIL.createMultiRegionTable(tableName, HConstants.CATALOG_FAMILY);
-- 
2.7.4

