From 63f92d720243b882bac319df16adf86305d6d52d Mon Sep 17 00:00:00 2001
From: Yi Liang <yliang@us.ibm.com>
Date: Sat, 3 Jun 2017 13:53:05 -0700
Subject: [PATCH] HBASE-18109: Assign system tables first (priority)

---
 .../hbase/master/assignment/AssignmentManager.java | 20 +++++++++++---
 .../master/procedure/ServerCrashProcedure.java     | 32 ++++++++++++++++++++--
 2 files changed, 45 insertions(+), 7 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/AssignmentManager.java
index 864b7f1..ee704dc 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/AssignmentManager.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/AssignmentManager.java
@@ -1134,7 +1134,9 @@ public class AssignmentManager implements ServerListener {
     boolean failover = !master.getServerManager().getDeadServers().isEmpty();
 
     final Set<ServerName> offlineServersWithOnlineRegions = new HashSet<ServerName>();
-    final ArrayList<HRegionInfo> regionsToAssign = new ArrayList<HRegionInfo>();
+    final ArrayList<HRegionInfo> systemRegionsToAssign = new ArrayList<HRegionInfo>();
+    final ArrayList<HRegionInfo> userRegionsToAssign = new ArrayList<HRegionInfo>();
+
     long st, et;
 
     st = System.currentTimeMillis();
@@ -1146,7 +1148,11 @@ public class AssignmentManager implements ServerListener {
         }
       } else if (regionNode.getState() == State.OFFLINE) {
         if (isTableEnabled(regionNode.getTable())) {
-          regionsToAssign.add(regionNode.getRegionInfo());
+          if (regionNode.isSystemTable()) {
+            systemRegionsToAssign.add(regionNode.getRegionInfo());
+          } else {
+            userRegionsToAssign.add(regionNode.getRegionInfo());
+          }
         }
       }
     }
@@ -1167,9 +1173,15 @@ public class AssignmentManager implements ServerListener {
 
     setFailoverCleanupDone(true);
 
-    // assign offline regions
+    // assign offline system regions first
+    // and then user regions
     st = System.currentTimeMillis();
-    for (HRegionInfo regionInfo: regionsToAssign) {
+    for (HRegionInfo regionInfo : systemRegionsToAssign) {
+      master.getMasterProcedureExecutor().submitProcedure(
+          createAssignProcedure(regionInfo, false));
+    }
+
+    for (HRegionInfo regionInfo: userRegionsToAssign) {
       master.getMasterProcedureExecutor().submitProcedure(
         createAssignProcedure(regionInfo, false));
     }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ServerCrashProcedure.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ServerCrashProcedure.java
index 71c6b89..53426ff0 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ServerCrashProcedure.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ServerCrashProcedure.java
@@ -22,6 +22,7 @@ import java.io.InputStream;
 import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 
@@ -185,8 +186,10 @@ implements ServerProcedureInterface {
               "; cycles=" + this.cycles);
           }
           handleRIT(env, regionsOnCrashedServer);
-          addChildProcedure(env.getAssignmentManager().
-              createAssignProcedures(regionsOnCrashedServer, true));
+          // Assign system regions first, and then user regions
+          List<HRegionInfo> sysFirst = getSystemAndUserRegionsOnCrashedServer(regionsOnCrashedServer);
+          addChildProcedure(env.getAssignmentManager().createAssignProcedures(sysFirst, true));
+
         }
         setNextState(ServerCrashState.SERVER_CRASH_FINISH);
         break;
@@ -400,7 +403,7 @@ implements ServerProcedureInterface {
    * Notify them of crash. Remove assign entries from the passed in <code>regions</code>
    * otherwise we have two assigns going on and they will fight over who has lock.
    * Notify Unassigns also.
-   * @param crashedServer Server that crashed.
+   * @param env Server that crashed.
    * @param regions Regions that were on crashed server
    * @return Subset of <code>regions</code> that were RIT against <code>crashedServer</code>
    */
@@ -436,4 +439,27 @@ implements ServerProcedureInterface {
       }
     }
   }
+
+  /**
+   * Make sure system regions are in front of user regions in the list
+   * See #addChildProcedure(Procedure<TEnvironment>...)
+   * Maybe used after #filterDefaultMetaRegions(List)
+   * @return Pair(SystemRegions, UserRegions)
+   */
+  private List<HRegionInfo> getSystemAndUserRegionsOnCrashedServer(final List<HRegionInfo> regions) {
+    if(regions == null)
+      return Collections.emptyList();
+
+    List<HRegionInfo> systemList = new ArrayList<>();
+    List<HRegionInfo> userList = new ArrayList<>();
+    for (HRegionInfo hri : regions) {
+      if(hri.isSystemTable())
+        systemList.add(hri);
+      else
+        userList.add(hri);
+    }
+    // Append userList to systemList
+    systemList.addAll(userList);
+    return systemList;
+  }
 }
\ No newline at end of file
-- 
2.10.1

