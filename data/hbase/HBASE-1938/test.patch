Index: src/test/org/apache/hadoop/hbase/regionserver/MemStoreScanPerformance.java
===================================================================
--- src/test/org/apache/hadoop/hbase/regionserver/MemStoreScanPerformance.java	(revision 0)
+++ src/test/org/apache/hadoop/hbase/regionserver/MemStoreScanPerformance.java	(revision 0)
@@ -0,0 +1,60 @@
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.KeyValue;
+import org.junit.After;
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+public class MemStoreScanPerformance {
+  private MemStore m = new MemStore();
+
+  @BeforeClass
+  public static void setUpBeforeClass() throws Exception {
+  }
+
+  @AfterClass
+  public static void tearDownAfterClass() throws Exception {
+  }
+
+  @Before
+  public void setUp() throws Exception {
+  }
+
+  @After
+  public void tearDown() throws Exception {
+  }
+
+  @Test
+  public void testTenColumns() {
+    for (int i = 0; i < 1000; i++) {
+      byte [] row = format(i);
+      for (int j = 0; j < 10; j++) {
+        byte [] column = format(j);
+        this.m.add(new KeyValue(row, column, column));
+      }
+    }
+    KeyValueScanner scanner = this.m.getScanners()[0];
+    scanner.seek(new KeyValue());
+    while(true) {
+      KeyValue kv = scanner.next();
+      if (kv == null) break;
+      System.out.println(kv.toString());
+    }
+  }
+
+  private static byte [] format(final int number) {
+    byte [] b = new byte[10];
+    int d = Math.abs(number);
+    for (int i = b.length - 1; i >= 0; i--) {
+      b[i] = (byte)((d % 10) + '0');
+      d /= 10;
+    }
+    return b;
+  }
+  
+  public static void main(String[] args) {
+    org.junit.runner.JUnitCore.main(MemStoreScanPerformance.class.getName());
+  }
+}
\ No newline at end of file
