From 74b2fd1d0215cbe0b60707c5fa094cdc61d08f7b Mon Sep 17 00:00:00 2001
From: Apekshit Sharma <appy@apache.org>
Date: Tue, 28 Feb 2017 11:49:26 -0800
Subject: [PATCH] HBASE-17732 Add CpType template to CoprocessorEnvironment.

TODO: detailed commit message.

Change-Id: I1ce1f5c50faad51a16769e2c992d0e891a6facf7
---
 .../java/org/apache/hadoop/hbase/Coprocessor.java  |   1 -
 .../hadoop/hbase/CoprocessorEnvironment.java       |   4 +-
 .../hadoop/hbase/coprocessor/CoprocessorHost.java  | 193 ++++++++++++--
 .../hadoop/hbase/coprocessor/EndpointObserver.java |  32 ---
 .../coprocessor/MasterCoprocessorEnvironment.java  |   2 +-
 .../hadoop/hbase/coprocessor/ObserverContext.java  |  10 +-
 .../coprocessor/RegionCoprocessorEnvironment.java  |   4 +-
 .../hadoop/hbase/coprocessor/RegionObserver.java   |  36 +++
 .../RegionServerCoprocessorEnvironment.java        |   3 +-
 .../coprocessor/WALCoprocessorEnvironment.java     |   2 +-
 .../hadoop/hbase/master/MasterCoprocessorHost.java | 188 +------------
 .../hbase/regionserver/RegionCoprocessorHost.java  | 296 ++++++---------------
 .../regionserver/RegionServerCoprocessorHost.java  | 153 +----------
 .../hbase/regionserver/wal/WALCoprocessorHost.java | 128 +++------
 .../hbase/security/access/AccessController.java    |  33 +--
 .../hbase/coprocessor/TestCoprocessorHost.java     |   4 +-
 .../security/token/TestTokenAuthentication.java    |   5 +-
 17 files changed, 365 insertions(+), 729 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/Coprocessor.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/Coprocessor.java
index 79517606e5..8d949ce870 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/Coprocessor.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/Coprocessor.java
@@ -57,5 +57,4 @@ public interface Coprocessor {
   default void start(CoprocessorEnvironment env) throws IOException {}
 
   default void stop(CoprocessorEnvironment env) throws IOException {}
-
 }
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/CoprocessorEnvironment.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/CoprocessorEnvironment.java
index 2168ca8aba..2e49591da1 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/CoprocessorEnvironment.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/CoprocessorEnvironment.java
@@ -30,7 +30,7 @@ import org.apache.hadoop.hbase.client.Table;
  * Coprocessor environment state.
  */
 @InterfaceAudience.Private
-public interface CoprocessorEnvironment {
+public interface CoprocessorEnvironment<CpType extends Coprocessor> {
 
   /** @return the Coprocessor interface version */
   int getVersion();
@@ -39,7 +39,7 @@ public interface CoprocessorEnvironment {
   String getHBaseVersion();
 
   /** @return the loaded coprocessor instance */
-  Coprocessor getInstance();
+  CpType getInstance();
 
   /** @return the priority assigned to the loaded coprocessor */
   int getPriority();
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java
index 1d58bf9a94..b31726efaf 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java
@@ -47,6 +47,8 @@ import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.HTableWrapper;
 import org.apache.hadoop.hbase.client.Table;
+import org.apache.hadoop.hbase.ipc.RpcServer;
+import org.apache.hadoop.hbase.security.User;
 import org.apache.hadoop.hbase.util.CoprocessorClassLoader;
 import org.apache.hadoop.hbase.util.SortedList;
 import org.apache.hadoop.hbase.util.VersionInfo;
@@ -54,12 +56,14 @@ import org.apache.hadoop.hbase.util.VersionInfo;
 /**
  * Provides the common setup framework and runtime services for coprocessor
  * invocation from HBase services.
- * @param <E> the specific environment extension that a concrete implementation
+ * @param <CpType> type of specific coprocessor this host will handle
+ * @param <CpEnvType> type of specific coprocessor environment this host requires.
  * provides
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
+public abstract class CoprocessorHost<CpType extends Coprocessor,
+    CpEnvType extends CoprocessorEnvironment<CpType>> {
   public static final String REGION_COPROCESSOR_CONF_KEY =
       "hbase.coprocessor.region.classes";
   public static final String REGIONSERVER_COPROCESSOR_CONF_KEY =
@@ -81,8 +85,8 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
   private static final Log LOG = LogFactory.getLog(CoprocessorHost.class);
   protected Abortable abortable;
   /** Ordered set of loaded coprocessors with lock */
-  protected SortedList<E> coprocessors =
-      new SortedList<E>(new EnvironmentPriorityComparator());
+  protected final SortedList<CpEnvType> coprocessors =
+      new SortedList<CpEnvType>(new EnvironmentPriorityComparator());
   protected Configuration conf;
   // unique file prefix to use for local copies of jars when classloading
   protected String pathPrefix;
@@ -176,7 +180,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    * @param conf configuration for coprocessor
    * @throws java.io.IOException Exception
    */
-  public E load(Path path, String className, int priority,
+  public CpEnvType load(Path path, String className, int priority,
       Configuration conf) throws IOException {
     String[] includedClassPrefixes = null;
     if (conf.get(HConstants.CP_HTD_ATTR_INCLUSION_KEY) != null){
@@ -195,7 +199,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    * @param includedClassPrefixes class name prefixes to include
    * @throws java.io.IOException Exception
    */
-  public E load(Path path, String className, int priority,
+  public CpEnvType load(Path path, String className, int priority,
       Configuration conf, String[] includedClassPrefixes) throws IOException {
     Class<?> implClass = null;
     LOG.debug("Loading coprocessor class " + className + " with path " +
@@ -224,7 +228,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
     try{
       // switch temporarily to the thread classloader for custom CP
       currentThread.setContextClassLoader(cl);
-      E cpInstance = loadInstance(implClass, priority, conf);
+      CpEnvType cpInstance = loadInstance(implClass, priority, conf);
       return cpInstance;
     } finally {
       // restore the fresh (host) classloader
@@ -240,7 +244,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    */
   public void load(Class<?> implClass, int priority, Configuration conf)
       throws IOException {
-    E env = loadInstance(implClass, priority, conf);
+    CpEnvType env = loadInstance(implClass, priority, conf);
     coprocessors.add(env);
   }
 
@@ -250,7 +254,8 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    * @param conf configuration
    * @throws java.io.IOException Exception
    */
-  public E loadInstance(Class<?> implClass, int priority, Configuration conf)
+  // TODO: filter out coprocessors not of this particular type.
+  public CpEnvType loadInstance(Class<?> implClass, int priority, Configuration conf)
       throws IOException {
     if (!Coprocessor.class.isAssignableFrom(implClass)) {
       throw new IOException("Configured class " + implClass.getName() + " must implement "
@@ -258,18 +263,17 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
     }
 
     // create the instance
-    Coprocessor impl;
-    Object o = null;
+    CpType impl;
     try {
-      o = implClass.newInstance();
-      impl = (Coprocessor)o;
+      impl = (CpType) implClass.newInstance();  // TODO: handle cast exception.
     } catch (InstantiationException e) {
       throw new IOException(e);
     } catch (IllegalAccessException e) {
       throw new IOException(e);
     }
     // create the environment
-    E env = createEnvironment(implClass, impl, priority, loadSequence.incrementAndGet(), conf);
+    CpEnvType
+        env = createEnvironment(implClass, impl, priority, loadSequence.incrementAndGet(), conf);
     if (env instanceof Environment) {
       ((Environment)env).startup();
     }
@@ -282,7 +286,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
   /**
    * Called when a new Coprocessor class is loaded
    */
-  public abstract E createEnvironment(Class<?> implClass, Coprocessor instance,
+  public abstract CpEnvType createEnvironment(Class<?> implClass, CpType instance,
       int priority, int sequence, Configuration conf);
 
   public void shutdown(CoprocessorEnvironment e) {
@@ -303,7 +307,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    * @return the coprocessor, or null if not found
    */
   public Coprocessor findCoprocessor(String className) {
-    for (E env: coprocessors) {
+    for (CpEnvType env: coprocessors) {
       if (env.getInstance().getClass().getName().equals(className) ||
           env.getInstance().getClass().getSimpleName().equals(className)) {
         return env.getInstance();
@@ -320,7 +324,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
   public <T extends Coprocessor> List<T> findCoprocessors(Class<T> cls) {
     ArrayList<T> ret = new ArrayList<T>();
 
-    for (E env: coprocessors) {
+    for (CpEnvType env: coprocessors) {
       Coprocessor cp = env.getInstance();
 
       if(cp != null) {
@@ -340,7 +344,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
   public List<CoprocessorEnvironment> findCoprocessorEnvironment(Class<?> cls) {
     ArrayList<CoprocessorEnvironment> ret = new ArrayList<CoprocessorEnvironment>();
 
-    for (E env: coprocessors) {
+    for (CpEnvType env: coprocessors) {
       Coprocessor cp = env.getInstance();
 
       if(cp != null) {
@@ -358,7 +362,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    * @return the coprocessor, or null if not found
    */
   public CoprocessorEnvironment findCoprocessorEnvironment(String className) {
-    for (E env: coprocessors) {
+    for (CpEnvType env: coprocessors) {
       if (env.getInstance().getClass().getName().equals(className) ||
           env.getInstance().getClass().getSimpleName().equals(className)) {
         return env;
@@ -375,7 +379,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
   Set<ClassLoader> getExternalClassLoaders() {
     Set<ClassLoader> externalClassLoaders = new HashSet<ClassLoader>();
     final ClassLoader systemClassLoader = this.getClass().getClassLoader();
-    for (E env : coprocessors) {
+    for (CpEnvType env : coprocessors) {
       ClassLoader cl = env.getInstance().getClass().getClassLoader();
       if (cl != systemClassLoader){
         //do not include system classloader
@@ -411,10 +415,11 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
   /**
    * Encapsulation of the environment of each coprocessor
    */
-  public static class Environment implements CoprocessorEnvironment {
+  public static class Environment<CpType extends Coprocessor> implements
+      CoprocessorEnvironment<CpType> {
 
     /** The coprocessor */
-    public Coprocessor impl;
+    public CpType impl;
     /** Chaining priority */
     protected int priority = Coprocessor.PRIORITY_USER;
     /** Current coprocessor state */
@@ -431,7 +436,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
      * @param impl the coprocessor instance
      * @param priority chaining priority
      */
-    public Environment(final Coprocessor impl, final int priority,
+    public Environment(final CpType impl, final int priority,
         final int seq, final Configuration conf) {
       this.impl = impl;
       this.classLoader = impl.getClass().getClassLoader();
@@ -495,7 +500,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
     }
 
     @Override
-    public Coprocessor getInstance() {
+    public CpType getInstance() {
       return impl;
     }
 
@@ -537,7 +542,6 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
      * @return an interface for manipulating the table
      * @exception java.io.IOException Exception
      */
-    @Override
     public Table getTable(TableName tableName) throws IOException {
       return this.getTable(tableName, null);
     }
@@ -548,7 +552,6 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
      * @return an interface for manipulating the table
      * @exception java.io.IOException Exception
      */
-    @Override
     public Table getTable(TableName tableName, ExecutorService pool) throws IOException {
       return HTableWrapper.createWrapper(openTables, tableName, this, pool);
     }
@@ -689,4 +692,142 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
           "'. Details of the problem: " + message);
     }
   }
+
+  // TODO: comment these functions.
+
+  protected abstract class CoprocessorOperation extends ObserverContext<CpEnvType> {
+    protected CoprocessorOperation() {
+      this(RpcServer.getRequestUser());
+    }
+
+    protected CoprocessorOperation(User user) {
+      super(user);
+    }
+
+    public abstract void call(CpType oserver, ObserverContext<CpEnvType> ctx) throws IOException;
+
+    public void postEnvCall(CpEnvType env) {}
+  }
+
+  protected abstract class CoprocessorOperationWithResult<ResultType> extends CoprocessorOperation {
+    protected CoprocessorOperationWithResult() {
+      super();
+    }
+
+    protected CoprocessorOperationWithResult(User user) {
+      super(user);
+    }
+
+    private ResultType result = null;
+
+    public void setResult(final ResultType result) {
+      this.result = result;
+    }
+
+    public ResultType getResult() {
+      return this.result;
+    }
+  }
+
+  protected <ResultType> ResultType execOperationWithResult(final ResultType defaultValue,
+      final CoprocessorOperationWithResult<ResultType> ctx) throws IOException {
+    if (ctx == null) return defaultValue;
+    ctx.setResult(defaultValue);
+    execOperation(ctx);
+    return ctx.getResult();
+  }
+
+  protected <T> T execOperationWithResult(final boolean ifBypass, final T defaultValue,
+      final CoprocessorOperationWithResult<T> ctx) throws IOException {
+    boolean bypass = false;
+    T result = defaultValue;
+    if (ctx != null) {
+      ctx.setResult(defaultValue);
+      bypass = execOperation(true, ctx);
+      result = ctx.getResult();
+    }
+    return bypass == ifBypass ? result : null;
+  }
+
+  protected boolean execOperation(final CoprocessorOperation ctx)
+      throws IOException {
+    return execOperation(true, ctx);
+  }
+
+  protected boolean execOperation(final boolean earlyExit, final CoprocessorOperation ctx)
+      throws IOException {
+    if (ctx == null) return false;
+    boolean bypass = false;
+    List<CpEnvType> envs = coprocessors.get();
+    for (int i = 0; i < envs.size(); i++) {
+      CpEnvType env = envs.get(i);
+      ctx.prepare(env);
+      Thread currentThread = Thread.currentThread();
+      ClassLoader cl = currentThread.getContextClassLoader();
+      try {
+        currentThread.setContextClassLoader(env.getClassLoader());
+        ctx.call(env.getInstance(), ctx);
+      } catch (Throwable e) {
+        handleCoprocessorThrowable(env, e);
+      } finally {
+        currentThread.setContextClassLoader(cl);
+      }
+      bypass |= ctx.shouldBypass();
+      if (earlyExit && ctx.shouldComplete()) {
+        break;
+      }
+      ctx.postEnvCall(env);
+    }
+    return bypass;
+  }
+
+
+  /**
+   * Coprocessor classes can be configured in any order, based on that priority is set and
+   * chained in a sorted order. Should be used preStop*() hooks i.e. when master/regionserver is
+   * going down. This function first calls coprocessor methods (using CoprocessorOperation.call())
+   * and then shutdowns the environment in postEnvCall(). <br>
+   * Need to execute all coprocessor methods first then postEnvCall(), otherwise some coprocessors
+   * may remain shutdown if any exception occurs during next coprocessor execution which prevent
+   * master/regionserver stop or cluster shutdown. (Refer:
+   * <a href="https://issues.apache.org/jira/browse/HBASE-16663">HBASE-16663</a>
+   * @param ctx CoprocessorOperation
+   * @return true if bypaas coprocessor execution, false if not.
+   * @throws IOException
+   */
+  protected boolean execShutdown(final CoprocessorOperation ctx) throws IOException {
+    if (ctx == null) return false;
+    boolean bypass = false;
+    List<CpEnvType> envs = coprocessors.get();
+    int envsSize = envs.size();
+    // Iterate the coprocessors and execute CoprocessorOperation's call()
+    for (int i = 0; i < envsSize; i++) {
+      CpEnvType env = envs.get(i);
+      if (env.getInstance() instanceof MasterObserver) {
+        ctx.prepare(env);
+        Thread currentThread = Thread.currentThread();
+        ClassLoader cl = currentThread.getContextClassLoader();
+        try {
+          currentThread.setContextClassLoader(env.getClassLoader());
+          ctx.call(env.getInstance(), ctx);
+        } catch (Throwable e) {
+          handleCoprocessorThrowable(env, e);
+        } finally {
+          currentThread.setContextClassLoader(cl);
+        }
+        bypass |= ctx.shouldBypass();
+        if (ctx.shouldComplete()) {
+          break;
+        }
+      }
+    }
+
+    // Iterate the coprocessors and execute CoprocessorOperation's postEnvCall()
+    for (int i = 0; i < envsSize; i++) {
+      CpEnvType env = envs.get(i);
+      ctx.postEnvCall(env);
+    }
+    return bypass;
+  }
+
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/EndpointObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/EndpointObserver.java
index 0646e13c70..9e8276792d 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/EndpointObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/EndpointObserver.java
@@ -52,36 +52,4 @@ import com.google.protobuf.Service;
 @InterfaceStability.Evolving
 public interface EndpointObserver extends Coprocessor {
 
-  /**
-   * Called before an Endpoint service method is invoked.
-   * The request message can be altered by returning a new instance. Throwing an
-   * exception will abort the invocation.
-   * Calling {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} has no
-   * effect in this hook.
-   * @param ctx the environment provided by the region server
-   * @param service the endpoint service
-   * @param request  Request message expected by given {@code Service}'s method (by the name
-   *   {@code methodName}).
-   * @param methodName the invoked service method
-   * @return the possibly modified message
-   */
-  default Message preEndpointInvocation(ObserverContext<RegionCoprocessorEnvironment> ctx,
-      Service service, String methodName, Message request) throws IOException {
-    return request;
-  }
-
-  /**
-   * Called after an Endpoint service method is invoked. The response message can be
-   * altered using the builder.
-   * @param ctx the environment provided by the region server
-   * @param service the endpoint service
-   * @param methodName the invoked service method
-   * @param request  Request message expected by given {@code Service}'s method (by the name
-   *   {@code methodName}).
-   * @param responseBuilder Builder for final response to the client, with original response from
-   *   Service's method merged into it.
-   */
-  default void postEndpointInvocation(ObserverContext<RegionCoprocessorEnvironment> ctx,
-      Service service, String methodName, Message request, Message.Builder responseBuilder)
-      throws IOException {}
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessorEnvironment.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessorEnvironment.java
index a6e54e0c40..fed04be281 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessorEnvironment.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessorEnvironment.java
@@ -28,7 +28,7 @@ import org.apache.hadoop.hbase.metrics.MetricRegistry;
 
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public interface MasterCoprocessorEnvironment extends CoprocessorEnvironment {
+public interface MasterCoprocessorEnvironment extends CoprocessorEnvironment<MasterObserver> {
   /** @return reference to the HMaster services */
   MasterServices getMasterServices();
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/ObserverContext.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/ObserverContext.java
index 52f2b95a11..54fc8516b8 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/ObserverContext.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/ObserverContext.java
@@ -34,13 +34,13 @@ import org.apache.hadoop.hbase.security.User;
  * coprocessors for a given Observer method trigger, with the
  * <code>CoprocessorEnvironment</code> reference swapped out for each
  * coprocessor.
- * @param <E> The {@link CoprocessorEnvironment} subclass applicable to the
+ * @param <CpEnvType> The {@link CoprocessorEnvironment} subclass applicable to the
  *     revelant Observer interface.
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public class ObserverContext<E extends CoprocessorEnvironment> {
-  private E env;
+public class ObserverContext<CpEnvType extends CoprocessorEnvironment> {
+  private CpEnvType env;
   private boolean bypass;
   private boolean complete;
   private User caller;
@@ -49,11 +49,11 @@ public class ObserverContext<E extends CoprocessorEnvironment> {
     this.caller = caller;
   }
 
-  public E getEnvironment() {
+  public CpEnvType getEnvironment() {
     return env;
   }
 
-  public void prepare(E env) {
+  public void prepare(CpEnvType env) {
     this.env = env;
   }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessorEnvironment.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessorEnvironment.java
index 3566f069b9..9cd009abde 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessorEnvironment.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessorEnvironment.java
@@ -32,7 +32,7 @@ import org.apache.hadoop.hbase.regionserver.RegionServerServices;
 
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public interface RegionCoprocessorEnvironment extends CoprocessorEnvironment {
+public interface RegionCoprocessorEnvironment extends CoprocessorEnvironment<RegionObserver> {
   /** @return the region associated with this coprocessor */
   Region getRegion();
 
@@ -61,6 +61,4 @@ public interface RegionCoprocessorEnvironment extends CoprocessorEnvironment {
   // so we do not want to allow coprocessors to export metrics at the region level. We can allow
   // getMetricRegistryForTable() to allow coprocessors to track metrics per-table, per-regionserver.
   MetricRegistry getMetricRegistryForRegionServer();
-
-
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java
index a3db3b1422..cd02e6b440 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java
@@ -26,6 +26,8 @@ import java.util.List;
 import java.util.Map;
 import java.util.NavigableSet;
 
+import com.google.protobuf.Message;
+import com.google.protobuf.Service;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.Cell;
@@ -1489,4 +1491,38 @@ public interface RegionObserver extends Coprocessor {
       throws IOException {
         return delTracker;
   }
+
+
+  /**
+   * Called before an Endpoint service method is invoked.
+   * The request message can be altered by returning a new instance. Throwing an
+   * exception will abort the invocation.
+   * Calling {@link org.apache.hadoop.hbase.coprocessor.ObserverContext#bypass()} has no
+   * effect in this hook.
+   * @param ctx the environment provided by the region server
+   * @param service the endpoint service
+   * @param request  Request message expected by given {@code Service}'s method (by the name
+   *   {@code methodName}).
+   * @param methodName the invoked service method
+   * @return the possibly modified message
+   */
+  default Message preEndpointInvocation(ObserverContext<RegionCoprocessorEnvironment> ctx,
+      Service service, String methodName, Message request) throws IOException {
+    return request;
+  }
+
+  /**
+   * Called after an Endpoint service method is invoked. The response message can be
+   * altered using the builder.
+   * @param ctx the environment provided by the region server
+   * @param service the endpoint service
+   * @param methodName the invoked service method
+   * @param request  Request message expected by given {@code Service}'s method (by the name
+   *   {@code methodName}).
+   * @param responseBuilder Builder for final response to the client, with original response from
+   *   Service's method merged into it.
+   */
+  default void postEndpointInvocation(ObserverContext<RegionCoprocessorEnvironment> ctx,
+      Service service, String methodName, Message request, Message.Builder responseBuilder)
+      throws IOException {}
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessorEnvironment.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessorEnvironment.java
index f42556a47a..dd54f178e6 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessorEnvironment.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessorEnvironment.java
@@ -22,7 +22,8 @@ import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.metrics.MetricRegistry;
 import org.apache.hadoop.hbase.regionserver.RegionServerServices;
 
-public interface RegionServerCoprocessorEnvironment extends CoprocessorEnvironment {
+public interface RegionServerCoprocessorEnvironment
+    extends CoprocessorEnvironment<RegionServerObserver> {
   /**
    * Gets the region server services.
    *
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALCoprocessorEnvironment.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALCoprocessorEnvironment.java
index 0865d96296..753228cca6 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALCoprocessorEnvironment.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALCoprocessorEnvironment.java
@@ -28,7 +28,7 @@ import org.apache.hadoop.hbase.wal.WAL;
 
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public interface WALCoprocessorEnvironment extends CoprocessorEnvironment {
+public interface WALCoprocessorEnvironment extends CoprocessorEnvironment<WALObserver> {
   /** @return reference to the region server's WAL */
   WAL getWAL();
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java
index 7f296f4411..0c225e34cd 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java
@@ -27,7 +27,6 @@ import org.apache.commons.lang.ClassUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.hbase.Coprocessor;
 import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
@@ -45,7 +44,6 @@ import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.MetricsCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
-import org.apache.hadoop.hbase.ipc.RpcServer;
 import org.apache.hadoop.hbase.master.locking.LockProcedure;
 import org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv;
 import org.apache.hadoop.hbase.metrics.MetricRegistry;
@@ -63,7 +61,7 @@ import org.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.Quotas;
  */
 @InterfaceAudience.Private
 public class MasterCoprocessorHost
-    extends CoprocessorHost<MasterCoprocessorHost.MasterEnvironment> {
+    extends CoprocessorHost<MasterObserver, MasterCoprocessorEnvironment> {
 
   private static final Log LOG = LogFactory.getLog(MasterCoprocessorHost.class);
 
@@ -71,13 +69,13 @@ public class MasterCoprocessorHost
    * Coprocessor environment extension providing access to master related
    * services.
    */
-  static class MasterEnvironment extends CoprocessorHost.Environment
+  static class MasterEnvironment extends CoprocessorHost.Environment<MasterObserver>
       implements MasterCoprocessorEnvironment {
     private final MasterServices masterServices;
     private final boolean supportGroupCPs;
     private final MetricRegistry metricRegistry;
 
-    public MasterEnvironment(final Class<?> implClass, final Coprocessor impl,
+    public MasterEnvironment(final Class<?> implClass, final MasterObserver impl,
         final int priority, final int seq, final Configuration conf,
         final MasterServices services) {
       super(impl, priority, seq, conf);
@@ -122,7 +120,7 @@ public class MasterCoprocessorHost
 
   @Override
   public MasterEnvironment createEnvironment(final Class<?> implClass,
-      final Coprocessor instance, final int priority, final int seq,
+      final MasterObserver instance, final int priority, final int seq,
       final Configuration conf) {
     for (Object itf : ClassUtils.getAllInterfaces(implClass)) {
       Class<?> c = (Class<?>) itf;
@@ -833,11 +831,12 @@ public class MasterCoprocessorHost
 
   public boolean preSetSplitOrMergeEnabled(final boolean newValue,
       final MasterSwitchType switchType) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperationWithResult(null,
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
       @Override
       public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
           throws IOException {
-        oserver.preSetSplitOrMergeEnabled(ctx, newValue, switchType);
+        setResult(oserver.preSetSplitOrMergeEnabled(ctx, newValue, switchType));
       }
     });
   }
@@ -871,13 +870,6 @@ public class MasterCoprocessorHost
     });
   }
 
-  /**
-   * Invoked just before a split
-   * @param tableName the table where the region belongs to
-   * @param splitRow the split point
-   * @param user the user
-   * @throws IOException
-   */
   public void preSplitRegionAction(
       final TableName tableName,
       final byte[] splitRow,
@@ -891,13 +883,6 @@ public class MasterCoprocessorHost
     });
   }
 
-  /**
-   * Invoked just after a split
-   * @param regionInfoA the new left-hand daughter region
-   * @param regionInfoB the new right-hand daughter region
-   * @param user the user
-   * @throws IOException
-   */
   public void postCompletedSplitRegionAction(
       final HRegionInfo regionInfoA,
       final HRegionInfo regionInfoB,
@@ -911,13 +896,6 @@ public class MasterCoprocessorHost
     });
   }
 
-  /**
-   * This will be called before PONR step as part of split table region procedure.
-   * @param splitKey
-   * @param metaEntries
-   * @param user the user
-   * @throws IOException
-   */
   public boolean preSplitBeforePONRAction(
       final byte[] splitKey,
       final List<Mutation> metaEntries,
@@ -931,11 +909,6 @@ public class MasterCoprocessorHost
     });
   }
 
-  /**
-   * This will be called after PONR step as part of split table region procedure.
-   * @param user the user
-   * @throws IOException
-   */
   public void preSplitAfterPONRAction(final User user) throws IOException {
     execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
       @Override
@@ -946,11 +919,6 @@ public class MasterCoprocessorHost
     });
   }
 
-  /**
-   * Invoked just after the rollback of a failed split
-   * @param user the user
-   * @throws IOException
-   */
   public void postRollBackSplitRegionAction(final User user) throws IOException {
     execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
       @Override
@@ -961,12 +929,6 @@ public class MasterCoprocessorHost
     });
   }
 
-  /**
-   * Invoked just before a merge
-   * @param regionsToMerge the regions to merge
-   * @param user the user
-   * @throws IOException
-   */
   public boolean preMergeRegionsAction(
       final HRegionInfo[] regionsToMerge, final User user) throws IOException {
     return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
@@ -978,13 +940,6 @@ public class MasterCoprocessorHost
     });
   }
 
-  /**
-   * Invoked after completing merge regions operation
-   * @param regionsToMerge the regions to merge
-   * @param mergedRegion the new merged region
-   * @param user the user
-   * @throws IOException
-   */
   public void postCompletedMergeRegionsAction(
       final HRegionInfo[] regionsToMerge,
       final HRegionInfo mergedRegion,
@@ -998,13 +953,6 @@ public class MasterCoprocessorHost
     });
   }
 
-  /**
-   * Invoked before merge regions operation writes the new region to hbase:meta
-   * @param regionsToMerge the regions to merge
-   * @param metaEntries the meta entry
-   * @param user the user
-   * @throws IOException
-   */
   public boolean preMergeRegionsCommit(
       final HRegionInfo[] regionsToMerge,
       final @MetaMutationAnnotation List<Mutation> metaEntries,
@@ -1018,13 +966,6 @@ public class MasterCoprocessorHost
     });
   }
 
-  /**
-   * Invoked after merge regions operation writes the new region to hbase:meta
-   * @param regionsToMerge the regions to merge
-   * @param mergedRegion the new merged region
-   * @param user the user
-   * @throws IOException
-   */
   public void postMergeRegionsCommit(
       final HRegionInfo[] regionsToMerge,
       final HRegionInfo mergedRegion,
@@ -1038,12 +979,6 @@ public class MasterCoprocessorHost
     });
   }
 
-  /**
-   * Invoked after rollback merge regions operation
-   * @param regionsToMerge the regions to merge
-   * @param user the user
-   * @throws IOException
-   */
   public void postRollBackMergeRegionsAction(
       final HRegionInfo[] regionsToMerge, final User user) throws IOException {
     execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
@@ -1087,7 +1022,7 @@ public class MasterCoprocessorHost
         oserver.preShutdown(ctx);
       }
       @Override
-      public void postEnvCall(MasterEnvironment env) {
+      public void postEnvCall(MasterCoprocessorEnvironment env) {
         // invoke coprocessor stop method
         shutdown(env);
       }
@@ -1104,7 +1039,7 @@ public class MasterCoprocessorHost
         oserver.preStopMaster(ctx);
       }
       @Override
-      public void postEnvCall(MasterEnvironment env) {
+      public void postEnvCall(MasterCoprocessorEnvironment env) {
         // invoke coprocessor stop method
         shutdown(env);
       }
@@ -1405,111 +1340,6 @@ public class MasterCoprocessorHost
     });
   }
 
-  private static abstract class CoprocessorOperation
-      extends ObserverContext<MasterCoprocessorEnvironment> {
-    public CoprocessorOperation() {
-      this(RpcServer.getRequestUser());
-    }
-
-    public CoprocessorOperation(User user) {
-      super(user);
-    }
-
-    public abstract void call(MasterObserver oserver,
-        ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException;
-
-    public void postEnvCall(MasterEnvironment env) {
-    }
-  }
-
-  private static abstract class CoprocessorOperationWithResult<T> extends CoprocessorOperation {
-    private T result = null;
-    public void setResult(final T result) { this.result = result; }
-    public T getResult() { return this.result; }
-  }
-
-  private <T> T execOperationWithResult(final T defaultValue,
-      final CoprocessorOperationWithResult<T> ctx) throws IOException {
-    if (ctx == null) return defaultValue;
-    ctx.setResult(defaultValue);
-    execOperation(ctx);
-    return ctx.getResult();
-  }
-
-  private boolean execOperation(final CoprocessorOperation ctx) throws IOException {
-    if (ctx == null) return false;
-    boolean bypass = false;
-    List<MasterEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      MasterEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof MasterObserver) {
-        ctx.prepare(env);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          ctx.call((MasterObserver)env.getInstance(), ctx);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        bypass |= ctx.shouldBypass();
-        if (ctx.shouldComplete()) {
-          break;
-        }
-      }
-      ctx.postEnvCall(env);
-    }
-    return bypass;
-  }
-
-  /**
-   * Master coprocessor classes can be configured in any order, based on that priority is set and
-   * chained in a sorted order. For preStopMaster()/preShutdown(), coprocessor methods are invoked
-   * in call() and environment is shutdown in postEnvCall(). <br>
-   * Need to execute all coprocessor methods first then postEnvCall(), otherwise some coprocessors
-   * may remain shutdown if any exception occurs during next coprocessor execution which prevent
-   * Master stop or cluster shutdown. (Refer:
-   * <a href="https://issues.apache.org/jira/browse/HBASE-16663">HBASE-16663</a>
-   * @param ctx CoprocessorOperation
-   * @return true if bypaas coprocessor execution, false if not.
-   * @throws IOException
-   */
-  private boolean execShutdown(final CoprocessorOperation ctx) throws IOException {
-    if (ctx == null) return false;
-    boolean bypass = false;
-    List<MasterEnvironment> envs = coprocessors.get();
-    int envsSize = envs.size();
-    // Iterate the coprocessors and execute CoprocessorOperation's call()
-    for (int i = 0; i < envsSize; i++) {
-      MasterEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof MasterObserver) {
-        ctx.prepare(env);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          ctx.call((MasterObserver) env.getInstance(), ctx);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        bypass |= ctx.shouldBypass();
-        if (ctx.shouldComplete()) {
-          break;
-        }
-      }
-    }
-
-    // Iterate the coprocessors and execute CoprocessorOperation's postEnvCall()
-    for (int i = 0; i < envsSize; i++) {
-      MasterEnvironment env = envs.get(i);
-      ctx.postEnvCall(env);
-    }
-    return bypass;
-  }
 
   public void preMoveServers(final Set<Address> servers, final String targetGroup)
       throws IOException {
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java
index 649273d97a..5efcae49d2 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java
@@ -92,7 +92,7 @@ import com.google.protobuf.Service;
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
 public class RegionCoprocessorHost
-    extends CoprocessorHost<RegionCoprocessorHost.RegionEnvironment> {
+    extends CoprocessorHost<RegionObserver, RegionCoprocessorEnvironment> {
 
   private static final Log LOG = LogFactory.getLog(RegionCoprocessorHost.class);
   // The shared data map
@@ -106,7 +106,7 @@ public class RegionCoprocessorHost
    * 
    * Encapsulation of the environment of each coprocessor
    */
-  static class RegionEnvironment extends CoprocessorHost.Environment
+  static class RegionEnvironment extends CoprocessorHost.Environment<RegionObserver>
       implements RegionCoprocessorEnvironment {
 
     private Region region;
@@ -119,7 +119,7 @@ public class RegionCoprocessorHost
      * @param impl the coprocessor instance
      * @param priority chaining priority
      */
-    public RegionEnvironment(final Coprocessor impl, final int priority,
+    public RegionEnvironment(final RegionObserver impl, final int priority,
         final int seq, final Configuration conf, final Region region,
         final RegionServerServices services, final ConcurrentMap<String, Object> sharedData) {
       super(impl, priority, seq, conf);
@@ -142,6 +142,7 @@ public class RegionCoprocessorHost
       return rsServices;
     }
 
+    @Override
     public void shutdown() {
       super.shutdown();
       MetricsCoprocessor.removeRegistry(this.metricRegistry);
@@ -226,7 +227,7 @@ public class RegionCoprocessorHost
 
     // now check whether any coprocessor implements postScannerFilterRow
     boolean hasCustomPostScannerFilterRow = false;
-    out: for (RegionEnvironment env: coprocessors) {
+    out: for (RegionCoprocessorEnvironment env: coprocessors) {
       if (env.getInstance() instanceof RegionObserver) {
         Class<?> clazz = env.getInstance().getClass();
         for(;;) {
@@ -361,13 +362,13 @@ public class RegionCoprocessorHost
 
     // scan the table attributes for coprocessor load specifications
     // initialize the coprocessors
-    List<RegionEnvironment> configured = new ArrayList<RegionEnvironment>();
+    List<RegionCoprocessorEnvironment> configured = new ArrayList<>();
     for (TableCoprocessorAttribute attr: getTableCoprocessorAttrsFromSchema(conf, 
         region.getTableDesc())) {
       // Load encompasses classloading and coprocessor initialization
       try {
-        RegionEnvironment env = load(attr.getPath(), attr.getClassName(), attr.getPriority(),
-          attr.getConf());
+        RegionCoprocessorEnvironment env = load(attr.getPath(), attr.getClassName(),
+            attr.getPriority(), attr.getConf());
         configured.add(env);
         LOG.info("Loaded coprocessor " + attr.getClassName() + " from HTD of " +
             region.getTableDesc().getTableName().getNameAsString() + " successfully.");
@@ -386,7 +387,7 @@ public class RegionCoprocessorHost
 
   @Override
   public RegionEnvironment createEnvironment(Class<?> implClass,
-      Coprocessor instance, int priority, int seq, Configuration conf) {
+      RegionObserver instance, int priority, int seq, Configuration conf) {
     // Check if it's an Endpoint.
     // Due to current dynamic protocol design, Endpoint
     // uses a different way to be registered and executed.
@@ -419,7 +420,7 @@ public class RegionCoprocessorHost
    * @throws IOException Signals that an I/O exception has occurred.
    */
   public void preOpen() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -433,7 +434,7 @@ public class RegionCoprocessorHost
    */
   public void postOpen() {
     try {
-      execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+      execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
         @Override
         public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
             throws IOException {
@@ -450,7 +451,7 @@ public class RegionCoprocessorHost
    */
   public void postLogReplay() {
     try {
-      execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+      execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
         @Override
         public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
             throws IOException {
@@ -467,7 +468,7 @@ public class RegionCoprocessorHost
    * @param abortRequested true if the server is aborting
    */
   public void preClose(final boolean abortRequested) throws IOException {
-    execOperation(false, new RegionOperation() {
+    execOperation(false, new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -482,7 +483,7 @@ public class RegionCoprocessorHost
    */
   public void postClose(final boolean abortRequested) {
     try {
-      execOperation(false, new RegionOperation() {
+      execOperation(false, new CoprocessorOperation() {
         @Override
         public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
             throws IOException {
@@ -506,7 +507,7 @@ public class RegionCoprocessorHost
       final List<StoreFileScanner> scanners, final ScanType scanType, final long earliestPutTs,
       final CompactionRequest request, final User user, final long readPoint) throws IOException {
     return execOperationWithResult(null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<InternalScanner>(user) {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<InternalScanner>(user) {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -527,7 +528,7 @@ public class RegionCoprocessorHost
    */
   public boolean preCompactSelection(final Store store, final List<StoreFile> candidates,
       final CompactionRequest request, final User user) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -546,7 +547,7 @@ public class RegionCoprocessorHost
   public void postCompactSelection(final Store store, final ImmutableList<StoreFile> selected,
       final CompactionRequest request, final User user) {
     try {
-      execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+      execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
         @Override
         public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
             throws IOException {
@@ -570,7 +571,7 @@ public class RegionCoprocessorHost
       final ScanType scanType, final CompactionRequest request, final User user)
       throws IOException {
     return execOperationWithResult(false, scanner,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<InternalScanner>(user) {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<InternalScanner>(user) {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -588,7 +589,7 @@ public class RegionCoprocessorHost
    */
   public void postCompact(final Store store, final StoreFile resultFile,
       final CompactionRequest request, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -604,7 +605,7 @@ public class RegionCoprocessorHost
   public InternalScanner preFlush(final Store store, final InternalScanner scanner)
       throws IOException {
     return execOperationWithResult(false, scanner,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<InternalScanner>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<InternalScanner>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -618,7 +619,7 @@ public class RegionCoprocessorHost
    * @throws IOException
    */
   public void preFlush() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -635,7 +636,7 @@ public class RegionCoprocessorHost
   public InternalScanner preFlushScannerOpen(final Store store,
       final KeyValueScanner memstoreScanner, final long readPoint) throws IOException {
     return execOperationWithResult(null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<InternalScanner>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<InternalScanner>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -649,7 +650,7 @@ public class RegionCoprocessorHost
    * @throws IOException
    */
   public void postFlush() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -663,7 +664,7 @@ public class RegionCoprocessorHost
    * @throws IOException
    */
   public void postFlush(final Store store, final StoreFile storeFile) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -678,7 +679,7 @@ public class RegionCoprocessorHost
    */
   @Deprecated
   public void preSplit(final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -695,7 +696,7 @@ public class RegionCoprocessorHost
    */
   @Deprecated
   public void preSplit(final byte[] splitRow, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -714,7 +715,7 @@ public class RegionCoprocessorHost
    */
   @Deprecated
   public void postSplit(final Region l, final Region r, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -729,7 +730,7 @@ public class RegionCoprocessorHost
  @Deprecated
   public boolean preSplitBeforePONR(final byte[] splitKey,
       final List<Mutation> metaEntries, final User user) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -743,7 +744,7 @@ public class RegionCoprocessorHost
   */
   @Deprecated
   public void preSplitAfterPONR(final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -760,7 +761,7 @@ public class RegionCoprocessorHost
   */
   @Deprecated
   public void preRollBackSplit(final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -777,7 +778,7 @@ public class RegionCoprocessorHost
   */
   @Deprecated
   public void postRollBackSplit(final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -791,7 +792,7 @@ public class RegionCoprocessorHost
    * @throws IOException
    */
   public void postCompleteSplit() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -809,7 +810,7 @@ public class RegionCoprocessorHost
    */
   public boolean preGet(final Get get, final List<Cell> results)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -825,7 +826,7 @@ public class RegionCoprocessorHost
    */
   public void postGet(final Get get, final List<Cell> results)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -842,7 +843,7 @@ public class RegionCoprocessorHost
    */
   public Boolean preExists(final Get get) throws IOException {
     return execOperationWithResult(true, false,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -860,7 +861,7 @@ public class RegionCoprocessorHost
   public boolean postExists(final Get get, boolean exists)
       throws IOException {
     return execOperationWithResult(exists,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -878,7 +879,7 @@ public class RegionCoprocessorHost
    */
   public boolean prePut(final Put put, final WALEdit edit, final Durability durability)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -899,7 +900,7 @@ public class RegionCoprocessorHost
    */
   public boolean prePrepareTimeStampForDeleteVersion(final Mutation mutation,
       final Cell kv, final byte[] byteNow, final Get get) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -916,7 +917,7 @@ public class RegionCoprocessorHost
    */
   public void postPut(final Put put, final WALEdit edit, final Durability durability)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -934,7 +935,7 @@ public class RegionCoprocessorHost
    */
   public boolean preDelete(final Delete delete, final WALEdit edit, final Durability durability)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -951,7 +952,7 @@ public class RegionCoprocessorHost
    */
   public void postDelete(final Delete delete, final WALEdit edit, final Durability durability)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -967,7 +968,7 @@ public class RegionCoprocessorHost
    */
   public boolean preBatchMutate(
       final MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -982,7 +983,7 @@ public class RegionCoprocessorHost
    */
   public void postBatchMutate(
       final MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -994,7 +995,7 @@ public class RegionCoprocessorHost
   public void postBatchMutateIndispensably(
       final MiniBatchOperationInProgress<Mutation> miniBatchOp, final boolean success)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1019,7 +1020,7 @@ public class RegionCoprocessorHost
       final ByteArrayComparable comparator, final Put put)
       throws IOException {
     return execOperationWithResult(true, false,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1044,7 +1045,7 @@ public class RegionCoprocessorHost
       final byte[] qualifier, final CompareOp compareOp, final ByteArrayComparable comparator,
       final Put put) throws IOException {
     return execOperationWithResult(true, false,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1068,7 +1069,7 @@ public class RegionCoprocessorHost
       final ByteArrayComparable comparator, final Put put,
       boolean result) throws IOException {
     return execOperationWithResult(result,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1094,7 +1095,7 @@ public class RegionCoprocessorHost
       final ByteArrayComparable comparator, final Delete delete)
       throws IOException {
     return execOperationWithResult(true, false,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1119,7 +1120,7 @@ public class RegionCoprocessorHost
       final byte[] qualifier, final CompareOp compareOp, final ByteArrayComparable comparator,
       final Delete delete) throws IOException {
     return execOperationWithResult(true, false,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1143,7 +1144,7 @@ public class RegionCoprocessorHost
       final ByteArrayComparable comparator, final Delete delete,
       boolean result) throws IOException {
     return execOperationWithResult(result,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1161,7 +1162,7 @@ public class RegionCoprocessorHost
    */
   public Result preAppend(final Append append) throws IOException {
     return execOperationWithResult(true, null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Result>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Result>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1178,7 +1179,7 @@ public class RegionCoprocessorHost
    */
   public Result preAppendAfterRowLock(final Append append) throws IOException {
     return execOperationWithResult(true, null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Result>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Result>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1195,7 +1196,7 @@ public class RegionCoprocessorHost
    */
   public Result preIncrement(final Increment increment) throws IOException {
     return execOperationWithResult(true, null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Result>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Result>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1212,7 +1213,7 @@ public class RegionCoprocessorHost
    */
   public Result preIncrementAfterRowLock(final Increment increment) throws IOException {
     return execOperationWithResult(true, null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Result>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Result>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1227,7 +1228,7 @@ public class RegionCoprocessorHost
    * @throws IOException if an error occurred on the coprocessor
    */
   public void postAppend(final Append append, final Result result) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1243,7 +1244,7 @@ public class RegionCoprocessorHost
    */
   public Result postIncrement(final Increment increment, Result result) throws IOException {
     return execOperationWithResult(result,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Result>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Result>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1260,7 +1261,7 @@ public class RegionCoprocessorHost
    */
   public RegionScanner preScannerOpen(final Scan scan) throws IOException {
     return execOperationWithResult(true, null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<RegionScanner>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<RegionScanner>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1277,7 +1278,7 @@ public class RegionCoprocessorHost
   public KeyValueScanner preStoreScannerOpen(final Store store, final Scan scan,
       final NavigableSet<byte[]> targetCols, final long readPt) throws IOException {
     return execOperationWithResult(null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<KeyValueScanner>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<KeyValueScanner>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1294,7 +1295,7 @@ public class RegionCoprocessorHost
    */
   public RegionScanner postScannerOpen(final Scan scan, RegionScanner s) throws IOException {
     return execOperationWithResult(s,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<RegionScanner>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<RegionScanner>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1314,7 +1315,7 @@ public class RegionCoprocessorHost
   public Boolean preScannerNext(final InternalScanner s,
       final List<Result> results, final int limit) throws IOException {
     return execOperationWithResult(true, false,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1335,7 +1336,7 @@ public class RegionCoprocessorHost
       final List<Result> results, final int limit, boolean hasMore)
       throws IOException {
     return execOperationWithResult(hasMore,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1357,7 +1358,7 @@ public class RegionCoprocessorHost
     // short circuit for performance
     if (!hasCustomPostScannerFilterRow) return true;
     return execOperationWithResult(true,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1372,7 +1373,7 @@ public class RegionCoprocessorHost
    * @exception IOException Exception
    */
   public boolean preScannerClose(final InternalScanner s) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1385,7 +1386,7 @@ public class RegionCoprocessorHost
    * @exception IOException Exception
    */
   public void postScannerClose(final InternalScanner s) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1400,7 +1401,7 @@ public class RegionCoprocessorHost
    * @throws IOException Exception
    */
   public void preReplayWALs(final HRegionInfo info, final Path edits) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
         throws IOException {
@@ -1415,7 +1416,7 @@ public class RegionCoprocessorHost
    * @throws IOException Exception
    */
   public void postReplayWALs(final HRegionInfo info, final Path edits) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
         throws IOException {
@@ -1433,7 +1434,7 @@ public class RegionCoprocessorHost
    */
   public boolean preWALRestore(final HRegionInfo info, final WALKey logKey,
       final WALEdit logEdit) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1450,7 +1451,7 @@ public class RegionCoprocessorHost
    */
   public void postWALRestore(final HRegionInfo info, final WALKey logKey, final WALEdit logEdit)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1465,7 +1466,7 @@ public class RegionCoprocessorHost
    * @throws IOException
    */
   public boolean preBulkLoadHFile(final List<Pair<byte[], String>> familyPaths) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1476,7 +1477,7 @@ public class RegionCoprocessorHost
 
   public boolean preCommitStoreFile(final byte[] family, final List<Pair<Path, Path>> pairs)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1485,7 +1486,7 @@ public class RegionCoprocessorHost
     });
   }
   public void postCommitStoreFile(final byte[] family, Path srcPath, Path dstPath) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1504,7 +1505,7 @@ public class RegionCoprocessorHost
   public boolean postBulkLoadHFile(final List<Pair<byte[], String>> familyPaths,
       Map<byte[], List<Path>> map, boolean hasLoaded) throws IOException {
     return execOperationWithResult(hasLoaded,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1514,7 +1515,7 @@ public class RegionCoprocessorHost
   }
 
   public void postStartRegionOperation(final Operation op) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1524,7 +1525,7 @@ public class RegionCoprocessorHost
   }
 
   public void postCloseRegionOperation(final Operation op) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1548,7 +1549,7 @@ public class RegionCoprocessorHost
       final FSDataInputStreamWrapper in, final long size, final CacheConfig cacheConf,
       final Reference r) throws IOException {
     return execOperationWithResult(null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<StoreFileReader>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<StoreFileReader>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1572,7 +1573,7 @@ public class RegionCoprocessorHost
       final FSDataInputStreamWrapper in, final long size, final CacheConfig cacheConf,
       final Reference r, final StoreFileReader reader) throws IOException {
     return execOperationWithResult(reader,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<StoreFileReader>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<StoreFileReader>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1584,7 +1585,7 @@ public class RegionCoprocessorHost
   public Cell postMutationBeforeWAL(final MutationType opType, final Mutation mutation,
       final Cell oldCell, Cell newCell) throws IOException {
     return execOperationWithResult(newCell,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Cell>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Cell>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1596,9 +1597,9 @@ public class RegionCoprocessorHost
   public Message preEndpointInvocation(final Service service, final String methodName,
       Message request) throws IOException {
     return execOperationWithResult(request,
-        coprocessors.isEmpty() ? null : new EndpointOperationWithResult<Message>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Message>() {
       @Override
-      public void call(EndpointObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
+      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
         setResult(oserver.preEndpointInvocation(ctx, service, methodName, getResult()));
       }
@@ -1607,9 +1608,9 @@ public class RegionCoprocessorHost
 
   public void postEndpointInvocation(final Service service, final String methodName,
       final Message request, final Message.Builder responseBuilder) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new EndpointOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
       @Override
-      public void call(EndpointObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
+      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
         oserver.postEndpointInvocation(ctx, service, methodName, request, responseBuilder);
       }
@@ -1618,7 +1619,7 @@ public class RegionCoprocessorHost
 
   public DeleteTracker postInstantiateDeleteTracker(DeleteTracker tracker) throws IOException {
     return execOperationWithResult(tracker,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<DeleteTracker>() {
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<DeleteTracker>() {
       @Override
       public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
           throws IOException {
@@ -1626,137 +1627,4 @@ public class RegionCoprocessorHost
       }
     });
   }
-
-  private static abstract class CoprocessorOperation
-      extends ObserverContext<RegionCoprocessorEnvironment> {
-    public CoprocessorOperation() {
-      this(RpcServer.getRequestUser());
-    }
-
-    public CoprocessorOperation(User user) {
-      super(user);
-    }
-
-    public abstract void call(Coprocessor observer,
-        ObserverContext<RegionCoprocessorEnvironment> ctx) throws IOException;
-    public abstract boolean hasCall(Coprocessor observer);
-    public void postEnvCall(RegionEnvironment env) { }
-  }
-
-  private static abstract class RegionOperation extends CoprocessorOperation {
-    public RegionOperation() {
-    }
-
-    public RegionOperation(User user) {
-      super(user);
-    }
-
-    public abstract void call(RegionObserver observer,
-        ObserverContext<RegionCoprocessorEnvironment> ctx) throws IOException;
-
-    public boolean hasCall(Coprocessor observer) {
-      return observer instanceof RegionObserver;
-    }
-
-    public void call(Coprocessor observer, ObserverContext<RegionCoprocessorEnvironment> ctx)
-        throws IOException {
-      call((RegionObserver)observer, ctx);
-    }
-  }
-
-  private static abstract class RegionOperationWithResult<T> extends RegionOperation {
-    public RegionOperationWithResult() {
-    }
-
-    public RegionOperationWithResult(User user) {
-      super (user);
-    }
-
-    private T result = null;
-    public void setResult(final T result) { this.result = result; }
-    public T getResult() { return this.result; }
-  }
-
-  private static abstract class EndpointOperation extends CoprocessorOperation {
-    public abstract void call(EndpointObserver observer,
-        ObserverContext<RegionCoprocessorEnvironment> ctx) throws IOException;
-
-    public boolean hasCall(Coprocessor observer) {
-      return observer instanceof EndpointObserver;
-    }
-
-    public void call(Coprocessor observer, ObserverContext<RegionCoprocessorEnvironment> ctx)
-        throws IOException {
-      call((EndpointObserver)observer, ctx);
-    }
-  }
-
-  private static abstract class EndpointOperationWithResult<T> extends EndpointOperation {
-    private T result = null;
-    public void setResult(final T result) { this.result = result; }
-    public T getResult() { return this.result; }
-  }
-
-  private boolean execOperation(final CoprocessorOperation ctx)
-      throws IOException {
-    return execOperation(true, ctx);
-  }
-
-  private <T> T execOperationWithResult(final T defaultValue,
-      final RegionOperationWithResult<T> ctx) throws IOException {
-    if (ctx == null) return defaultValue;
-    ctx.setResult(defaultValue);
-    execOperation(true, ctx);
-    return ctx.getResult();
-  }
-
-  private <T> T execOperationWithResult(final boolean ifBypass, final T defaultValue,
-      final RegionOperationWithResult<T> ctx) throws IOException {
-    boolean bypass = false;
-    T result = defaultValue;
-    if (ctx != null) {
-      ctx.setResult(defaultValue);
-      bypass = execOperation(true, ctx);
-      result = ctx.getResult();
-    }
-    return bypass == ifBypass ? result : null;
-  }
-
-  private <T> T execOperationWithResult(final T defaultValue,
-      final EndpointOperationWithResult<T> ctx) throws IOException {
-    if (ctx == null) return defaultValue;
-    ctx.setResult(defaultValue);
-    execOperation(true, ctx);
-    return ctx.getResult();
-  }
-
-  private boolean execOperation(final boolean earlyExit, final CoprocessorOperation ctx)
-      throws IOException {
-    boolean bypass = false;
-    List<RegionEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      RegionEnvironment env = envs.get(i);
-      Coprocessor observer = env.getInstance();
-      if (ctx.hasCall(observer)) {
-        ctx.prepare(env);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          ctx.call(observer, ctx);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        bypass |= ctx.shouldBypass();
-        if (earlyExit && ctx.shouldComplete()) {
-          break;
-        }
-      }
-
-      ctx.postEnvCall(env);
-    }
-    return bypass;
-  }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerCoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerCoprocessorHost.java
index 7732827929..5750b94bf8 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerCoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerCoprocessorHost.java
@@ -27,7 +27,6 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.CellScanner;
-import org.apache.hadoop.hbase.Coprocessor;
 import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.HBaseInterfaceAudience;
 import org.apache.hadoop.hbase.MetaMutationAnnotation;
@@ -40,7 +39,6 @@ import org.apache.hadoop.hbase.coprocessor.ObserverContext;
 import org.apache.hadoop.hbase.coprocessor.RegionServerCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionServerObserver;
 import org.apache.hadoop.hbase.coprocessor.SingletonCoprocessorService;
-import org.apache.hadoop.hbase.ipc.RpcServer;
 import org.apache.hadoop.hbase.metrics.MetricRegistry;
 import org.apache.hadoop.hbase.replication.ReplicationEndpoint;
 import org.apache.hadoop.hbase.security.User;
@@ -49,7 +47,7 @@ import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.WALEntry;
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
 public class RegionServerCoprocessorHost extends
-    CoprocessorHost<RegionServerCoprocessorHost.RegionServerEnvironment> {
+    CoprocessorHost<RegionServerObserver, RegionServerCoprocessorEnvironment> {
 
   private static final Log LOG = LogFactory.getLog(RegionServerCoprocessorHost.class);
 
@@ -75,7 +73,7 @@ public class RegionServerCoprocessorHost extends
 
   @Override
   public RegionServerEnvironment createEnvironment(Class<?> implClass,
-      Coprocessor instance, int priority, int sequence, Configuration conf) {
+      RegionServerObserver instance, int priority, int sequence, Configuration conf) {
     return new RegionServerEnvironment(implClass, instance, priority,
       sequence, conf, this.rsServices);
   }
@@ -90,14 +88,15 @@ public class RegionServerCoprocessorHost extends
         oserver.preStopRegionServer(ctx);
       }
       @Override
-      public void postEnvCall(RegionServerEnvironment env) {
+      public void postEnvCall(RegionServerCoprocessorEnvironment env) {
         // invoke coprocessor stop method
         shutdown(env);
       }
     });
   }
 
-  public boolean preMerge(final HRegion regionA, final HRegion regionB, final User user) throws IOException {
+  public boolean preMerge(final HRegion regionA, final HRegion regionB, final User user)
+      throws IOException {
     return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
       @Override
       public void call(RegionServerObserver oserver,
@@ -209,7 +208,7 @@ public class RegionServerCoprocessorHost extends
   public ReplicationEndpoint postCreateReplicationEndPoint(final ReplicationEndpoint endpoint)
       throws IOException {
     return execOperationWithResult(endpoint, coprocessors.isEmpty() ? null
-        : new CoprocessOperationWithResult<ReplicationEndpoint>() {
+        : new CoprocessorOperationWithResult<ReplicationEndpoint>() {
           @Override
           public void call(RegionServerObserver oserver,
               ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
@@ -218,124 +217,11 @@ public class RegionServerCoprocessorHost extends
         });
   }
 
-  private <T> T execOperationWithResult(final T defaultValue,
-      final CoprocessOperationWithResult<T> ctx) throws IOException {
-    if (ctx == null)
-      return defaultValue;
-    ctx.setResult(defaultValue);
-    execOperation(ctx);
-    return ctx.getResult();
-  }
-
-  private static abstract class CoprocessorOperation
-      extends ObserverContext<RegionServerCoprocessorEnvironment> {
-    public CoprocessorOperation() {
-      this(RpcServer.getRequestUser());
-    }
-
-    public CoprocessorOperation(User user) {
-      super(user);
-    }
-
-    public abstract void call(RegionServerObserver oserver,
-        ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException;
-
-    public void postEnvCall(RegionServerEnvironment env) {
-    }
-  }
-
-  private static abstract class CoprocessOperationWithResult<T> extends CoprocessorOperation {
-    private T result = null;
-
-    public void setResult(final T result) {
-      this.result = result;
-    }
-
-    public T getResult() {
-      return this.result;
-    }
-  }
-
-  private boolean execOperation(final CoprocessorOperation ctx) throws IOException {
-    if (ctx == null) return false;
-    boolean bypass = false;
-    List<RegionServerEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      RegionServerEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof RegionServerObserver) {
-        ctx.prepare(env);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          ctx.call((RegionServerObserver)env.getInstance(), ctx);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        bypass |= ctx.shouldBypass();
-        if (ctx.shouldComplete()) {
-          break;
-        }
-      }
-      ctx.postEnvCall(env);
-    }
-    return bypass;
-  }
-
-  /**
-   * RegionServer coprocessor classes can be configured in any order, based on that priority is set
-   * and chained in a sorted order. For preStop(), coprocessor methods are invoked in call() and
-   * environment is shutdown in postEnvCall(). <br>
-   * Need to execute all coprocessor methods first then postEnvCall(), otherwise some coprocessors
-   * may remain shutdown if any exception occurs during next coprocessor execution which prevent
-   * RegionServer stop. (Refer:
-   * <a href="https://issues.apache.org/jira/browse/HBASE-16663">HBASE-16663</a>
-   * @param ctx CoprocessorOperation
-   * @return true if bypaas coprocessor execution, false if not.
-   * @throws IOException
-   */
-  private boolean execShutdown(final CoprocessorOperation ctx) throws IOException {
-    if (ctx == null) return false;
-    boolean bypass = false;
-    List<RegionServerEnvironment> envs = coprocessors.get();
-    int envsSize = envs.size();
-    // Iterate the coprocessors and execute CoprocessorOperation's call()
-    for (int i = 0; i < envsSize; i++) {
-      RegionServerEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof RegionServerObserver) {
-        ctx.prepare(env);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          ctx.call((RegionServerObserver) env.getInstance(), ctx);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        bypass |= ctx.shouldBypass();
-        if (ctx.shouldComplete()) {
-          break;
-        }
-      }
-    }
-
-    // Iterate the coprocessors and execute CoprocessorOperation's postEnvCall()
-    for (int i = 0; i < envsSize; i++) {
-      RegionServerEnvironment env = envs.get(i);
-      ctx.postEnvCall(env);
-    }
-    return bypass;
-  }
-
   /**
    * Coprocessor environment extension providing access to region server
    * related services.
    */
-  static class RegionServerEnvironment extends CoprocessorHost.Environment
+  static class RegionServerEnvironment extends CoprocessorHost.Environment<RegionServerObserver>
       implements RegionServerCoprocessorEnvironment {
     private final RegionServerServices regionServerServices;
     private final MetricRegistry metricRegistry;
@@ -343,7 +229,7 @@ public class RegionServerCoprocessorHost extends
     @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="BC_UNCONFIRMED_CAST",
         justification="Intentional; FB has trouble detecting isAssignableFrom")
     public RegionServerEnvironment(final Class<?> implClass,
-        final Coprocessor impl, final int priority, final int seq,
+        final RegionServerObserver impl, final int priority, final int seq,
         final Configuration conf, final RegionServerServices services) {
       super(impl, priority, seq, conf);
       this.regionServerServices = services;
@@ -375,27 +261,4 @@ public class RegionServerCoprocessorHost extends
       MetricsCoprocessor.removeRegistry(metricRegistry);
     }
   }
-
-  /**
-   * Environment priority comparator. Coprocessors are chained in sorted
-   * order.
-   */
-  static class EnvironmentPriorityComparator implements
-      Comparator<CoprocessorEnvironment> {
-    @Override
-    public int compare(final CoprocessorEnvironment env1,
-        final CoprocessorEnvironment env2) {
-      if (env1.getPriority() < env2.getPriority()) {
-        return -1;
-      } else if (env1.getPriority() > env2.getPriority()) {
-        return 1;
-      }
-      if (env1.getLoadSequence() < env2.getLoadSequence()) {
-        return -1;
-      } else if (env1.getLoadSequence() > env2.getLoadSequence()) {
-        return 1;
-      }
-      return 0;
-    }
-  }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCoprocessorHost.java
index a531e83e2e..544e5ba172 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCoprocessorHost.java
@@ -29,8 +29,12 @@ import org.apache.hadoop.hbase.Coprocessor;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
+import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.MetricsCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.coprocessor.WALCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.WALObserver;
 import org.apache.hadoop.hbase.metrics.MetricRegistry;
@@ -43,12 +47,12 @@ import org.apache.hadoop.hbase.wal.WALKey;
  */
 @InterfaceAudience.Private
 public class WALCoprocessorHost
-    extends CoprocessorHost<WALCoprocessorHost.WALEnvironment> {
+    extends CoprocessorHost<WALObserver, WALCoprocessorEnvironment> {
 
   /**
    * Encapsulation of the environment of each coprocessor
    */
-  static class WALEnvironment extends CoprocessorHost.Environment
+  static class WALEnvironment extends CoprocessorHost.Environment<WALObserver>
     implements WALCoprocessorEnvironment {
 
     private final WAL wal;
@@ -69,7 +73,7 @@ public class WALCoprocessorHost
      * @param conf configuration
      * @param wal WAL
      */
-    public WALEnvironment(Class<?> implClass, final Coprocessor impl,
+    public WALEnvironment(Class<?> implClass, final WALObserver impl,
         final int priority, final int seq, final Configuration conf,
         final WAL wal) {
       super(impl, priority, seq, conf);
@@ -111,7 +115,7 @@ public class WALCoprocessorHost
 
   @Override
   public WALEnvironment createEnvironment(final Class<?> implClass,
-      final Coprocessor instance, final int priority, final int seq,
+      final WALObserver instance, final int priority, final int seq,
       final Configuration conf) {
     return new WALEnvironment(implClass, instance, priority, seq, conf,
         this.wal);
@@ -126,32 +130,14 @@ public class WALCoprocessorHost
    */
   public boolean preWALWrite(final HRegionInfo info, final WALKey logKey, final WALEdit logEdit)
       throws IOException {
-    boolean bypass = false;
-    if (this.coprocessors == null || this.coprocessors.isEmpty()) return bypass;
-    ObserverContext<WALCoprocessorEnvironment> ctx = null;
-    List<WALEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      WALEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof WALObserver) {
-        final WALObserver observer = (WALObserver)env.getInstance();
-        ctx = ObserverContext.createAndPrepare(env, ctx);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          observer.preWALWrite(ctx, info, logKey, logEdit);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        bypass |= ctx.shouldBypass();
-        if (ctx.shouldComplete()) {
-          break;
-        }
+    return execOperationWithResult(null,
+        coprocessors.isEmpty() ? null : new CoprocessorOperationWithResult<Boolean>() {
+      @Override
+      public void call(WALObserver oserver, ObserverContext<WALCoprocessorEnvironment> ctx)
+          throws IOException {
+        setResult(oserver.preWALWrite(ctx, info, logKey, logEdit));
       }
-    }
-    return bypass;
+    });
   }
 
   /**
@@ -162,29 +148,13 @@ public class WALCoprocessorHost
    */
   public void postWALWrite(final HRegionInfo info, final WALKey logKey, final WALEdit logEdit)
       throws IOException {
-    if (this.coprocessors == null || this.coprocessors.isEmpty()) return;
-    ObserverContext<WALCoprocessorEnvironment> ctx = null;
-    List<WALEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      WALEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof WALObserver) {
-        final WALObserver observer = (WALObserver)env.getInstance();
-        ctx = ObserverContext.createAndPrepare(env, ctx);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          observer.postWALWrite(ctx, info, logKey, logEdit);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        if (ctx.shouldComplete()) {
-          break;
-        }
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+      @Override
+      public void call(WALObserver oserver, ObserverContext<WALCoprocessorEnvironment> ctx)
+          throws IOException {
+        oserver.postWALWrite(ctx, info, logKey, logEdit);
       }
-    }
+    });
   }
 
   /**
@@ -193,29 +163,13 @@ public class WALCoprocessorHost
    * @param newPath the path of the wal we are going to create
    */
   public void preWALRoll(Path oldPath, Path newPath) throws IOException {
-    if (this.coprocessors == null || this.coprocessors.isEmpty()) return;
-    ObserverContext<WALCoprocessorEnvironment> ctx = null;
-    List<WALEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      WALEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof WALObserver) {
-        final WALObserver observer = (WALObserver)env.getInstance();
-        ctx = ObserverContext.createAndPrepare(env, ctx);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          observer.preWALRoll(ctx, oldPath, newPath);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        if (ctx.shouldComplete()) {
-          break;
-        }
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+      @Override
+      public void call(WALObserver oserver, ObserverContext<WALCoprocessorEnvironment> ctx)
+          throws IOException {
+        oserver.preWALRoll(ctx, oldPath, newPath);
       }
-    }
+    });
   }
 
   /**
@@ -224,28 +178,12 @@ public class WALCoprocessorHost
    * @param newPath the path of the wal we have created and now is the current
    */
   public void postWALRoll(Path oldPath, Path newPath) throws IOException {
-    if (this.coprocessors == null || this.coprocessors.isEmpty()) return;
-    ObserverContext<WALCoprocessorEnvironment> ctx = null;
-    List<WALEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      WALEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof WALObserver) {
-        final WALObserver observer = (WALObserver)env.getInstance();
-        ctx = ObserverContext.createAndPrepare(env, ctx);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          observer.postWALRoll(ctx, oldPath, newPath);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        if (ctx.shouldComplete()) {
-          break;
-        }
+    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+      @Override
+      public void call(WALObserver oserver, ObserverContext<WALCoprocessorEnvironment> ctx)
+          throws IOException {
+        oserver.postWALRoll(ctx, oldPath, newPath);
       }
-    }
+    });
   }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
index 814f2092c7..b11cd48faa 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
@@ -2129,6 +2129,19 @@ public class AccessController implements MasterObserver, RegionObserver, RegionS
     return hasMore;
   }
 
+  @Override
+  public Message preEndpointInvocation(ObserverContext<RegionCoprocessorEnvironment> ctx,
+      Service service, String methodName, Message request) throws IOException {
+    // Don't intercept calls to our own AccessControlService, we check for
+    // appropriate permissions in the service handlers
+    if (shouldCheckExecPermission && !(service instanceof AccessControlService)) {
+      requirePermission(getActiveUser(ctx),
+          "invoke(" + service.getDescriptorForType().getName() + "." + methodName + ")",
+          getTableName(ctx.getEnvironment()), null, null,
+          Action.EXEC);
+    }
+    return request;
+  }
   /**
    * Verify, when servicing an RPC, that the caller is the scanner owner.
    * If so, we assume that access control is correctly enforced based on
@@ -2191,26 +2204,6 @@ public class AccessController implements MasterObserver, RegionObserver, RegionS
         ctx.getEnvironment().getRegion().getTableDesc().getTableName(), Action.CREATE);
   }
 
-  /* ---- EndpointObserver implementation ---- */
-
-  @Override
-  public Message preEndpointInvocation(ObserverContext<RegionCoprocessorEnvironment> ctx,
-      Service service, String methodName, Message request) throws IOException {
-    // Don't intercept calls to our own AccessControlService, we check for
-    // appropriate permissions in the service handlers
-    if (shouldCheckExecPermission && !(service instanceof AccessControlService)) {
-      requirePermission(getActiveUser(ctx),
-          "invoke(" + service.getDescriptorForType().getName() + "." + methodName + ")",
-          getTableName(ctx.getEnvironment()), null, null,
-          Action.EXEC);
-    }
-    return request;
-  }
-
-  @Override
-  public void postEndpointInvocation(ObserverContext<RegionCoprocessorEnvironment> ctx,
-      Service service, String methodName, Message request, Message.Builder responseBuilder)
-      throws IOException { }
 
   /* ---- Protobuf AccessControlService implementation ---- */
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorHost.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorHost.java
index 66b5c60b3d..a0779d80d1 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorHost.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorHost.java
@@ -56,8 +56,8 @@ public class TestCoprocessorHost {
   @Test
   public void testDoubleLoadingAndPriorityValue() {
     final Configuration conf = HBaseConfiguration.create();
-    CoprocessorHost<CoprocessorEnvironment> host =
-        new CoprocessorHost<CoprocessorEnvironment>(new TestAbortable()) {
+    CoprocessorHost<Coprocessor, CoprocessorEnvironment<Coprocessor>> host =
+        new CoprocessorHost<Coprocessor, CoprocessorEnvironment<Coprocessor>>(new TestAbortable()) {
       final Configuration cpHostConf = conf;
 
       @Override
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/TestTokenAuthentication.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/TestTokenAuthentication.java
index 5b46af597c..8ca80d38bd 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/TestTokenAuthentication.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/TestTokenAuthentication.java
@@ -48,6 +48,7 @@ import org.apache.hadoop.hbase.client.Connection;
 import org.apache.hadoop.hbase.client.ConnectionFactory;
 import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.ipc.FifoRpcScheduler;
 import org.apache.hadoop.hbase.ipc.RpcServer;
 import org.apache.hadoop.hbase.ipc.RpcServer.BlockingServiceAndInterface;
@@ -248,7 +249,7 @@ public class TestTokenAuthentication {
       final RegionServerServices mockServices = TEST_UTIL.createMockRegionServerService(rpcServer);
 
       // mock up coprocessor environment
-      super.start(new RegionCoprocessorEnvironment() {
+      super.start( new RegionCoprocessorEnvironment()  {
         @Override
         public HRegion getRegion() { return null; }
 
@@ -272,7 +273,7 @@ public class TestTokenAuthentication {
         public String getHBaseVersion() { return null; }
 
         @Override
-        public Coprocessor getInstance() { return null; }
+        public RegionObserver getInstance() { return null; }
 
         @Override
         public int getPriority() { return 0; }
-- 
2.11.1
