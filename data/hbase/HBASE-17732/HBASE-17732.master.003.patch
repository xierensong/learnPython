From 4dc718ca9a4c880157c0a707c58f52ce7d82bbb9 Mon Sep 17 00:00:00 2001
From: Apekshit Sharma <appy@apache.org>
Date: Tue, 7 Mar 2017 14:03:06 -0600
Subject: [PATCH] HBASE-17732 Add template to CoprocessorEnvironment.

Change-Id: I4b05c74328564fc32d4563e937b8546f8cd39e55
TODO: detailed commit message.
---
 .../hadoop/hbase/CoprocessorEnvironment.java       |    4 +-
 .../hadoop/hbase/coprocessor/TestClassLoading.java |    6 +-
 .../example/ExampleMasterObserverWithMetrics.java  |   13 +-
 .../example/ExampleRegionObserverWithMetrics.java  |   54 +-
 .../example/ZooKeeperScanPolicyObserver.java       |   54 +-
 .../hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java |    9 +-
 .../apache/hadoop/hbase/rsgroup/TestRSGroups.java  |    4 +-
 .../hbase/constraint/ConstraintProcessor.java      |    9 +-
 .../hadoop/hbase/coprocessor/BulkLoadObserver.java |    2 +-
 .../hadoop/hbase/coprocessor/CoprocessorHost.java  |  294 ++++-
 .../hadoop/hbase/coprocessor/EndpointObserver.java |    2 +-
 .../hbase/coprocessor/MasterCoprocessor.java       |   30 +
 .../coprocessor/MasterCoprocessorEnvironment.java  |    2 +-
 .../hadoop/hbase/coprocessor/MasterObserver.java   |    2 +-
 .../hadoop/hbase/coprocessor/ObserverContext.java  |   12 +-
 .../hbase/coprocessor/RegionCoprocessor.java       |   38 +
 .../coprocessor/RegionCoprocessorEnvironment.java  |    4 +-
 .../hadoop/hbase/coprocessor/RegionObserver.java   |    2 +-
 .../hbase/coprocessor/RegionServerCoprocessor.java |   30 +
 .../RegionServerCoprocessorEnvironment.java        |    3 +-
 .../hbase/coprocessor/RegionServerObserver.java    |    2 +-
 .../hadoop/hbase/coprocessor/WALCoprocessor.java   |   30 +
 .../coprocessor/WALCoprocessorEnvironment.java     |    2 +-
 .../hadoop/hbase/coprocessor/WALObserver.java      |    2 +-
 .../hadoop/hbase/master/MasterCoprocessorHost.java | 1219 ++++++++------------
 .../hbase/quotas/MasterSpaceQuotaObserver.java     |    8 +-
 .../hbase/regionserver/RegionCoprocessorHost.java  |  949 +++++++--------
 .../regionserver/RegionServerCoprocessorHost.java  |  296 ++---
 .../hbase/regionserver/SecureBulkLoadManager.java  |   15 +-
 .../hbase/regionserver/wal/WALCoprocessorHost.java |  146 +--
 .../hbase/security/access/AccessController.java    |   37 +-
 .../security/visibility/VisibilityController.java  |   28 +-
 .../hbase/client/TestResultFromCoprocessor.java    |    7 +-
 .../hbase/coprocessor/SampleRegionWALObserver.java |   13 +-
 .../hbase/coprocessor/SimpleRegionObserver.java    |    7 +-
 .../hbase/coprocessor/TestCoprocessorHost.java     |   12 +-
 .../coprocessor/TestCoprocessorInterface.java      |   34 +-
 .../hbase/coprocessor/TestCoprocessorMetrics.java  |   28 +-
 .../hbase/coprocessor/TestHTableWrapper.java       |   10 +-
 .../TestMasterCoprocessorExceptionWithAbort.java   |    7 +-
 .../TestMasterCoprocessorExceptionWithRemove.java  |    7 +-
 .../hbase/coprocessor/TestMasterObserver.java      |    7 +-
 .../TestRegionObserverScannerOpenHook.java         |   26 +-
 .../coprocessor/TestRegionObserverStacking.java    |   23 +-
 .../hbase/namespace/TestNamespaceAuditor.java      |    8 +-
 .../TestSplitTransactionOnCluster.java             |   10 +-
 .../security/access/TestAccessController.java      |    3 +-
 .../security/token/TestTokenAuthentication.java    |    6 +-
 .../hadoop/hbase/util/BaseTestHBaseFsck.java       |   16 +-
 .../apache/hadoop/hbase/util/TestHBaseFsckMOB.java |    2 +-
 .../hadoop/hbase/util/TestHBaseFsckOneRS.java      |    2 +-
 .../hadoop/hbase/util/TestHBaseFsckReplicas.java   |    2 +-
 .../hadoop/hbase/util/TestHBaseFsckTwoRS.java      |    2 +-
 .../thrift2/TestThriftHBaseServiceHandler.java     |   10 +-
 54 files changed, 1780 insertions(+), 1770 deletions(-)
 create mode 100644 hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessor.java
 create mode 100644 hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessor.java
 create mode 100644 hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessor.java
 create mode 100644 hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALCoprocessor.java

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/CoprocessorEnvironment.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/CoprocessorEnvironment.java
index 2168ca8aba..b55593481b 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/CoprocessorEnvironment.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/CoprocessorEnvironment.java
@@ -30,7 +30,7 @@ import org.apache.hadoop.hbase.client.Table;
  * Coprocessor environment state.
  */
 @InterfaceAudience.Private
-public interface CoprocessorEnvironment {
+public interface CoprocessorEnvironment<C extends Coprocessor> {
 
   /** @return the Coprocessor interface version */
   int getVersion();
@@ -39,7 +39,7 @@ public interface CoprocessorEnvironment {
   String getHBaseVersion();
 
   /** @return the loaded coprocessor instance */
-  Coprocessor getInstance();
+  C getInstance();
 
   /** @return the priority assigned to the loaded coprocessor */
   int getPriority();
diff --git a/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java b/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java
index 56fdca6db4..b565273f8a 100644
--- a/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java
+++ b/hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java
@@ -23,6 +23,7 @@ import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.*;
 import org.apache.hadoop.hbase.client.Admin;
+import org.apache.hadoop.hbase.master.MasterCoprocessorHost;
 import org.apache.hadoop.hbase.regionserver.Region;
 import org.apache.hadoop.hbase.regionserver.TestServerCustomProtocol;
 import org.apache.hadoop.hbase.testclassification.CoprocessorTests;
@@ -542,10 +543,11 @@ public class TestClassLoading {
   @Test
   public void testFindCoprocessors() {
     // HBASE 12277: 
-    CoprocessorHost masterCpHost =
+    MasterCoprocessorHost masterCpHost =
                              TEST_UTIL.getHBaseCluster().getMaster().getMasterCoprocessorHost();
 
-    List<MasterObserver> masterObservers = masterCpHost.findCoprocessors(MasterObserver.class);
+    List<MasterObserver> masterObservers = masterCpHost.getObservers
+        (MasterCoprocessor::getMasterObserver);
 
     assertTrue(masterObservers != null && masterObservers.size() > 0);
     assertEquals(masterCoprocessor.getSimpleName(),
diff --git a/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleMasterObserverWithMetrics.java b/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleMasterObserverWithMetrics.java
index 8535d05fca..a373cdd2f7 100644
--- a/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleMasterObserverWithMetrics.java
+++ b/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleMasterObserverWithMetrics.java
@@ -26,6 +26,7 @@ import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.TableDescriptor;
+import org.apache.hadoop.hbase.coprocessor.MasterCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
@@ -45,7 +46,11 @@ import org.apache.hadoop.hbase.metrics.Timer;
  * </p>
  * @see ExampleRegionObserverWithMetrics
  */
-public class ExampleMasterObserverWithMetrics implements MasterObserver {
+public class ExampleMasterObserverWithMetrics implements MasterCoprocessor, MasterObserver {
+  @Override
+  public MasterObserver getMasterObserver() {
+    return this;
+  }
 
   private static final Log LOG = LogFactory.getLog(ExampleMasterObserverWithMetrics.class);
 
@@ -68,7 +73,7 @@ public class ExampleMasterObserverWithMetrics implements MasterObserver {
 
   @Override
   public void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                             TableDescriptor desc, HRegionInfo[] regions) throws IOException {
+      TableDescriptor desc, HRegionInfo[] regions) throws IOException {
     // we rely on the fact that there is only 1 instance of our MasterObserver. We keep track of
     // when the operation starts before the operation is executing.
     this.createTableStartTime = System.currentTimeMillis();
@@ -76,7 +81,7 @@ public class ExampleMasterObserverWithMetrics implements MasterObserver {
 
   @Override
   public void postCreateTable(ObserverContext<MasterCoprocessorEnvironment> ctx,
-                              TableDescriptor desc, HRegionInfo[] regions) throws IOException {
+      TableDescriptor desc, HRegionInfo[] regions) throws IOException {
     if (this.createTableStartTime > 0) {
       long time = System.currentTimeMillis() - this.createTableStartTime;
       LOG.info("Create table took: " + time);
@@ -133,4 +138,4 @@ public class ExampleMasterObserverWithMetrics implements MasterObserver {
       registry.register("maxMemory", this::getMaxMemory);
     }
   }
-}
+}
\ No newline at end of file
diff --git a/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleRegionObserverWithMetrics.java b/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleRegionObserverWithMetrics.java
index fd593a7edf..582d444205 100644
--- a/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleRegionObserverWithMetrics.java
+++ b/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ExampleRegionObserverWithMetrics.java
@@ -28,6 +28,7 @@ import org.apache.hadoop.hbase.Cell;
 import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.client.Get;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.metrics.Counter;
@@ -45,36 +46,44 @@ import org.apache.hadoop.hbase.metrics.Timer;
  *
  * @see ExampleMasterObserverWithMetrics
  */
-public class ExampleRegionObserverWithMetrics implements RegionObserver {
+public class ExampleRegionObserverWithMetrics implements RegionCoprocessor {
 
   private Counter preGetCounter;
   private Timer costlyOperationTimer;
+  private ExampleRegionObserver observer;
 
-  @Override
-  public void preGetOp(ObserverContext<RegionCoprocessorEnvironment> e, Get get, List<Cell> results)
-      throws IOException {
-    // Increment the Counter whenever the coprocessor is called
-    preGetCounter.increment();
-  }
+  class ExampleRegionObserver implements RegionObserver {
+    @Override
+    public void preGetOp(ObserverContext<RegionCoprocessorEnvironment> e, Get get,
+        List<Cell> results) throws IOException {
+      // Increment the Counter whenever the coprocessor is called
+      preGetCounter.increment();
+    }
 
-  @Override
-  public void postGetOp(ObserverContext<RegionCoprocessorEnvironment> e, Get get,
-                        List<Cell> results) throws IOException {
-    // do a costly (high latency) operation which we want to measure how long it takes by
-    // using a Timer (which is a Meter and a Histogram).
-    long start = System.nanoTime();
-    try {
-      performCostlyOperation();
-    } finally {
-      costlyOperationTimer.updateNanos(System.nanoTime() - start);
+    @Override
+    public void postGetOp(ObserverContext<RegionCoprocessorEnvironment> e, Get get,
+        List<Cell> results) throws IOException {
+      // do a costly (high latency) operation which we want to measure how long it takes by
+      // using a Timer (which is a Meter and a Histogram).
+      long start = System.nanoTime();
+      try {
+        performCostlyOperation();
+      } finally {
+        costlyOperationTimer.updateNanos(System.nanoTime() - start);
+      }
+    }
+
+    private void performCostlyOperation() {
+      try {
+        // simulate the operation by sleeping.
+        Thread.sleep(ThreadLocalRandom.current().nextLong(100));
+      } catch (InterruptedException ignore) {
+      }
     }
   }
 
-  private void performCostlyOperation() {
-    try {
-      // simulate the operation by sleeping.
-      Thread.sleep(ThreadLocalRandom.current().nextLong(100));
-    } catch (InterruptedException ignore) {}
+  @Override public RegionObserver getRegionObserver() {
+    return observer;
   }
 
   @Override
@@ -88,6 +97,7 @@ public class ExampleRegionObserverWithMetrics implements RegionObserver {
       // at the region server level per-regionserver.
       MetricRegistry registry =
           ((RegionCoprocessorEnvironment) env).getMetricRegistryForRegionServer();
+      observer = new ExampleRegionObserver();
 
       if (preGetCounter == null) {
         // Create a new Counter, or get the already registered counter.
diff --git a/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ZooKeeperScanPolicyObserver.java b/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ZooKeeperScanPolicyObserver.java
index b489fe4cf1..ad90cf7665 100644
--- a/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ZooKeeperScanPolicyObserver.java
+++ b/hbase-examples/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ZooKeeperScanPolicyObserver.java
@@ -30,6 +30,7 @@ import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.client.IsolationLevel;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.regionserver.HStore;
@@ -50,20 +51,25 @@ import org.apache.zookeeper.ZooKeeper;
  * This is an example showing how a RegionObserver could configured
  * via ZooKeeper in order to control a Region compaction, flush, and scan policy.
  *
- * This also demonstrated the use of shared 
+ * This also demonstrated the use of shared
  * {@link org.apache.hadoop.hbase.coprocessor.RegionObserver} state.
  * See {@link RegionCoprocessorEnvironment#getSharedData()}.
  *
  * This would be useful for an incremental backup tool, which would indicate the last
  * time of a successful backup via ZK and instruct HBase to not delete data that was
- * inserted since (based on wall clock time). 
+ * inserted since (based on wall clock time).
  *
  * This implements org.apache.zookeeper.Watcher directly instead of using
- * {@link org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher}, 
+ * {@link org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher},
  * because RegionObservers come and go and currently
  * listeners registered with ZooKeeperWatcher cannot be removed.
  */
-public class ZooKeeperScanPolicyObserver implements RegionObserver {
+public class ZooKeeperScanPolicyObserver implements RegionCoprocessor, RegionObserver {
+  @Override
+  public RegionObserver getRegionObserver() {
+    return this;
+  }
+
   public static final String node = "/backup/example/lastbackup";
   public static final String zkkey = "ZK";
   private static final Log LOG = LogFactory.getLog(ZooKeeperScanPolicyObserver.class);
@@ -131,26 +137,26 @@ public class ZooKeeperScanPolicyObserver implements RegionObserver {
       switch(event.getType()) {
       case NodeDataChanged:
       case NodeCreated:
-      try {
-        // get data and re-watch
-        data = zk.getData(node, this, null);
-        LOG.debug("Read asynchronously: "+(data == null ? "null" : Bytes.toLong(data)));
-      } catch (InterruptedException ix) {
-      } catch (KeeperException kx) {
-        needSetup = true;
-      }
-      break;
+        try {
+          // get data and re-watch
+          data = zk.getData(node, this, null);
+          LOG.debug("Read asynchronously: "+(data == null ? "null" : Bytes.toLong(data)));
+        } catch (InterruptedException ix) {
+        } catch (KeeperException kx) {
+          needSetup = true;
+        }
+        break;
 
       case NodeDeleted:
-      try {
-        // just re-watch
-        zk.exists(node, this);
-        data = null;
-      } catch (InterruptedException ix) {
-      } catch (KeeperException kx) {
-        needSetup = true;
-      }
-      break;
+        try {
+          // just re-watch
+          zk.exists(node, this);
+          data = null;
+        } catch (InterruptedException ix) {
+        } catch (KeeperException kx) {
+          needSetup = true;
+        }
+        break;
 
       default:
         // ignore
@@ -222,6 +228,6 @@ public class ZooKeeperScanPolicyObserver implements RegionObserver {
       return null;
     }
     return new StoreScanner(store, scanInfo, scan, targetCols,
-      ((HStore)store).getHRegion().getReadPoint(IsolationLevel.READ_COMMITTED));
+        ((HStore)store).getHRegion().getReadPoint(IsolationLevel.READ_COMMITTED));
   }
-}
+}
\ No newline at end of file
diff --git a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java
index 0bc5c76d93..92e952af8b 100644
--- a/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java
+++ b/hbase-rsgroup/src/main/java/org/apache/hadoop/hbase/rsgroup/RSGroupAdminEndpoint.java
@@ -38,6 +38,7 @@ import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.client.TableDescriptor;
 import org.apache.hadoop.hbase.constraint.ConstraintException;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
+import org.apache.hadoop.hbase.coprocessor.MasterCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
@@ -70,8 +71,9 @@ import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.RemoveRSGro
 import org.apache.hadoop.hbase.protobuf.generated.RSGroupAdminProtos.RemoveRSGroupResponse;
 import org.apache.hadoop.hbase.shaded.protobuf.generated.SnapshotProtos.SnapshotDescription;
 
+// TODO: Encapsulate MasterObserver functions into separate subclass.
 @InterfaceAudience.Private
-public class RSGroupAdminEndpoint implements MasterObserver, CoprocessorService {
+public class RSGroupAdminEndpoint implements MasterCoprocessor, CoprocessorService, MasterObserver {
   private static final Log LOG = LogFactory.getLog(RSGroupAdminEndpoint.class);
 
   private MasterServices master = null;
@@ -98,6 +100,11 @@ public class RSGroupAdminEndpoint implements MasterObserver, CoprocessorService
     return groupAdminService;
   }
 
+  @Override
+  public MasterObserver getMasterObserver() {
+    return this;
+  }
+
   RSGroupInfoManager getGroupInfoManager() {
     return groupInfoManager;
   }
diff --git a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroups.java b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroups.java
index c58dc9db24..a9493cad4b 100644
--- a/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroups.java
+++ b/hbase-rsgroup/src/test/java/org/apache/hadoop/hbase/rsgroup/TestRSGroups.java
@@ -97,8 +97,8 @@ public class TestRSGroups extends TestRSGroupsBase {
     admin.setBalancerRunning(false,true);
     rsGroupAdmin = new VerifyingRSGroupAdminClient(
         new RSGroupAdminClient(TEST_UTIL.getConnection()), TEST_UTIL.getConfiguration());
-    rsGroupAdminEndpoint =
-        master.getMasterCoprocessorHost().findCoprocessors(RSGroupAdminEndpoint.class).get(0);
+    rsGroupAdminEndpoint = (RSGroupAdminEndpoint)
+        master.getMasterCoprocessorHost().findCoprocessor(RSGroupAdminEndpoint.class.getName());
   }
 
   @AfterClass
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/ConstraintProcessor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/ConstraintProcessor.java
index b836082130..6a9c70bfd3 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/ConstraintProcessor.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/ConstraintProcessor.java
@@ -26,11 +26,11 @@ import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.Cell;
 import org.apache.hadoop.hbase.CoprocessorEnvironment;
-import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.client.Put;
 import org.apache.hadoop.hbase.client.Durability;
 import org.apache.hadoop.hbase.client.TableDescriptor;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.regionserver.InternalScanner;
@@ -43,7 +43,7 @@ import org.apache.hadoop.hbase.regionserver.wal.WALEdit;
  * implemented on any given system by a coprocessor.
  */
 @InterfaceAudience.Private
-public class ConstraintProcessor implements RegionObserver {
+public class ConstraintProcessor implements RegionCoprocessor, RegionObserver {
 
   private static final Log LOG = LogFactory.getLog(ConstraintProcessor.class);
 
@@ -51,6 +51,11 @@ public class ConstraintProcessor implements RegionObserver {
 
   private List<? extends Constraint> constraints = new ArrayList<>();
 
+  @Override
+  public RegionObserver getRegionObserver() {
+    return this;
+  }
+
   /**
    * Create the constraint processor.
    * <p>
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BulkLoadObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BulkLoadObserver.java
index 5e84cca041..88f2dff14d 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BulkLoadObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BulkLoadObserver.java
@@ -48,7 +48,7 @@ import org.apache.hadoop.hbase.shaded.protobuf.generated.ClientProtos.CleanupBul
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public interface BulkLoadObserver extends Coprocessor {
+public interface BulkLoadObserver {
     /**
       * Called as part of SecureBulkLoadEndpoint.prepareBulkLoad() RPC call.
       * It can't bypass the default action, e.g., ctx.bypass() won't have effect.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java
index ae0c4b13b6..a45f8296d4 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java
@@ -31,6 +31,7 @@ import java.util.UUID;
 import java.util.concurrent.ConcurrentSkipListSet;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.function.Function;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -47,6 +48,8 @@ import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.HTableWrapper;
 import org.apache.hadoop.hbase.client.Table;
+import org.apache.hadoop.hbase.ipc.RpcServer;
+import org.apache.hadoop.hbase.security.User;
 import org.apache.hadoop.hbase.util.CoprocessorClassLoader;
 import org.apache.hadoop.hbase.util.SortedList;
 import org.apache.hadoop.hbase.util.VersionInfo;
@@ -54,12 +57,13 @@ import org.apache.hadoop.hbase.util.VersionInfo;
 /**
  * Provides the common setup framework and runtime services for coprocessor
  * invocation from HBase services.
- * @param <E> the specific environment extension that a concrete implementation
+ * @param <C> type of specific coprocessor this host will handle
+ * @param <E> type of specific coprocessor environment this host requires.
  * provides
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
+public abstract class CoprocessorHost<C extends Coprocessor, E extends CoprocessorEnvironment<C>> {
   public static final String REGION_COPROCESSOR_CONF_KEY =
       "hbase.coprocessor.region.classes";
   public static final String REGIONSERVER_COPROCESSOR_CONF_KEY =
@@ -81,7 +85,8 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
   private static final Log LOG = LogFactory.getLog(CoprocessorHost.class);
   protected Abortable abortable;
   /** Ordered set of loaded coprocessors with lock */
-  protected SortedList<E> coprocessors = new SortedList<>(new EnvironmentPriorityComparator());
+  protected final SortedList<E> coprocessors =
+      new SortedList<>(new EnvironmentPriorityComparator());
   protected Configuration conf;
   // unique file prefix to use for local copies of jars when classloading
   protected String pathPrefix;
@@ -118,7 +123,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    */
   public Set<String> getCoprocessors() {
     Set<String> returnValue = new TreeSet<>();
-    for (CoprocessorEnvironment e: coprocessors) {
+    for (E e: coprocessors) {
       returnValue.add(e.getInstance().getClass().getSimpleName());
     }
     return returnValue;
@@ -135,7 +140,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
       return;
     }
 
-    Class<?> implClass = null;
+    Class<?> implClass;
 
     // load default coprocessors from configure file
     String[] defaultCPClasses = conf.getStrings(confKey);
@@ -154,9 +159,13 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
       Thread.currentThread().setContextClassLoader(cl);
       try {
         implClass = cl.loadClass(className);
+        if (!checkCoprocessorType(implClass)) {
+          LOG.info("Not loading coprocessor " + implClass.getSimpleName());
+          continue;
+        }
         // Add coprocessors as we go to guard against case where a coprocessor is specified twice
         // in the configuration
-        this.coprocessors.add(loadInstance(implClass, priority, conf));
+        this.coprocessors.add(loadInstance((Class<? extends C>)implClass, priority, conf));
         LOG.info("System coprocessor " + className + " was loaded " +
             "successfully with priority (" + priority + ").");
         ++priority;
@@ -196,7 +205,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    */
   public E load(Path path, String className, int priority,
       Configuration conf, String[] includedClassPrefixes) throws IOException {
-    Class<?> implClass = null;
+    Class<?> implClass;
     LOG.debug("Loading coprocessor class " + className + " with path " +
         path + " and priority " + priority);
 
@@ -220,10 +229,14 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
     //load custom code for coprocessor
     Thread currentThread = Thread.currentThread();
     ClassLoader hostClassLoader = currentThread.getContextClassLoader();
+    if (!checkCoprocessorType(implClass)) {
+      LOG.info("Not loading coprocessor " + implClass.getSimpleName());
+      return null;
+    }
     try{
       // switch temporarily to the thread classloader for custom CP
       currentThread.setContextClassLoader(cl);
-      E cpInstance = loadInstance(implClass, priority, conf);
+      E cpInstance = loadInstance((Class<? extends C>)implClass, priority, conf);
       return cpInstance;
     } finally {
       // restore the fresh (host) classloader
@@ -237,7 +250,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    * @param conf configuration
    * @throws java.io.IOException Exception
    */
-  public void load(Class<?> implClass, int priority, Configuration conf)
+  public void load(Class<? extends C> implClass, int priority, Configuration conf)
       throws IOException {
     E env = loadInstance(implClass, priority, conf);
     coprocessors.add(env);
@@ -249,22 +262,18 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    * @param conf configuration
    * @throws java.io.IOException Exception
    */
-  public E loadInstance(Class<?> implClass, int priority, Configuration conf)
+  // TODO: filter out coprocessors not of this particular type.
+  public E loadInstance(Class<? extends C> implClass, int priority, Configuration conf)
       throws IOException {
     if (!Coprocessor.class.isAssignableFrom(implClass)) {
       throw new IOException("Configured class " + implClass.getName() + " must implement "
           + Coprocessor.class.getName() + " interface ");
     }
-
     // create the instance
-    Coprocessor impl;
-    Object o = null;
+    C impl;
     try {
-      o = implClass.newInstance();
-      impl = (Coprocessor)o;
-    } catch (InstantiationException e) {
-      throw new IOException(e);
-    } catch (IllegalAccessException e) {
+      impl = implClass.newInstance();
+    } catch (InstantiationException|IllegalAccessException e) {
       throw new IOException(e);
     }
     // create the environment
@@ -281,10 +290,16 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
   /**
    * Called when a new Coprocessor class is loaded
    */
-  public abstract E createEnvironment(Class<?> implClass, Coprocessor instance,
+  public abstract E createEnvironment(Class<? extends C> implClass, C instance,
       int priority, int sequence, Configuration conf);
 
-  public void shutdown(CoprocessorEnvironment e) {
+  /**
+   * Called when a new Coprocessor class is loaded. Checks if the loaded class implements
+   * correct coprocessor interface as required by host implementation.
+   */
+  public abstract boolean checkCoprocessorType(Class<?> implClass);
+
+  public void shutdown(E e) {
     if (e instanceof Environment) {
       if (LOG.isDebugEnabled()) {
         LOG.debug("Stop coprocessor " + e.getInstance().getClass().getName());
@@ -295,13 +310,25 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
           e.getClass().getName());
     }
   }
+  /**
+   * Get all observers of particular type.
+   * @param <O> Observer Type.
+   */
+  public <O> List<O> getObservers(ObserverGetter<C, O> observerGetter) {
+    List<O> observers = new ArrayList<>();
+    for (E env : coprocessors) {
+      O observer = observerGetter.apply(env.getInstance());
+      if (observer != null) {
+        observers.add(observer);
+      }
+    }
+    return observers;
+  }
 
   /**
-   * Find a coprocessor implementation by class name
-   * @param className the class name
-   * @return the coprocessor, or null if not found
+   * Find coprocessors by full class name or simple name.
    */
-  public Coprocessor findCoprocessor(String className) {
+  public C findCoprocessor(String className) {
     for (E env: coprocessors) {
       if (env.getInstance().getClass().getName().equals(className) ||
           env.getInstance().getClass().getSimpleName().equals(className)) {
@@ -316,11 +343,11 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    * @param cls the class/interface to look for
    * @return the list of coprocessors, or null if not found
    */
-  public <T extends Coprocessor> List<T> findCoprocessors(Class<T> cls) {
+  public <T extends C> List<T> findCoprocessors(Class<T> cls) {
     ArrayList<T> ret = new ArrayList<>();
 
     for (E env: coprocessors) {
-      Coprocessor cp = env.getInstance();
+      C cp = env.getInstance();
 
       if(cp != null) {
         if (cls.isAssignableFrom(cp.getClass())) {
@@ -332,15 +359,15 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
   }
 
   /**
-   * Find list of CoprocessorEnvironment that extend/implement the given class/interface
+   * Find list of coprocessor environments that extend/implement the given class/interface
    * @param cls the class/interface to look for
-   * @return the list of CoprocessorEnvironment, or null if not found
+   * @return the list of coprocessor environments
    */
-  public List<CoprocessorEnvironment> findCoprocessorEnvironment(Class<?> cls) {
-    ArrayList<CoprocessorEnvironment> ret = new ArrayList<>();
+  public List<E> findCoprocessorEnvironment(Class<?> cls) {
+    ArrayList<E> ret = new ArrayList<>();
 
     for (E env: coprocessors) {
-      Coprocessor cp = env.getInstance();
+      C cp = env.getInstance();
 
       if(cp != null) {
         if (cls.isAssignableFrom(cp.getClass())) {
@@ -356,7 +383,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    * @param className the class name
    * @return the coprocessor, or null if not found
    */
-  public CoprocessorEnvironment findCoprocessorEnvironment(String className) {
+  public E findCoprocessorEnvironment(String className) {
     for (E env: coprocessors) {
       if (env.getInstance().getClass().getName().equals(className) ||
           env.getInstance().getClass().getSimpleName().equals(className)) {
@@ -388,8 +415,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
    * Environment priority comparator.
    * Coprocessors are chained in sorted order.
    */
-  static class EnvironmentPriorityComparator
-      implements Comparator<CoprocessorEnvironment> {
+  static class EnvironmentPriorityComparator implements Comparator<CoprocessorEnvironment> {
     @Override
     public int compare(final CoprocessorEnvironment env1,
         final CoprocessorEnvironment env2) {
@@ -410,10 +436,12 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
   /**
    * Encapsulation of the environment of each coprocessor
    */
-  public static class Environment implements CoprocessorEnvironment {
+  // TODO: verify if any benefit of making these non-static and pairing up with outer class'
+  // generics.
+  public static class Environment<C extends Coprocessor> implements CoprocessorEnvironment<C> {
 
     /** The coprocessor */
-    public Coprocessor impl;
+    public C impl;
     /** Chaining priority */
     protected int priority = Coprocessor.PRIORITY_USER;
     /** Current coprocessor state */
@@ -430,7 +458,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
      * @param impl the coprocessor instance
      * @param priority chaining priority
      */
-    public Environment(final Coprocessor impl, final int priority,
+    public Environment(final C impl, final int priority,
         final int seq, final Configuration conf) {
       this.impl = impl;
       this.classLoader = impl.getClass().getClassLoader();
@@ -494,7 +522,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
     }
 
     @Override
-    public Coprocessor getInstance() {
+    public C getInstance() {
       return impl;
     }
 
@@ -553,7 +581,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
     }
   }
 
-  protected void abortServer(final CoprocessorEnvironment environment, final Throwable e) {
+  protected void abortServer(final E environment, final Throwable e) {
     abortServer(environment.getInstance().getClass().getName(), e);
   }
 
@@ -586,8 +614,7 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
   // etc) mention this nuance of our exception handling so that coprocessor can throw appropriate
   // exceptions depending on situation. If any changes are made to this logic, make sure to
   // update all classes' comments.
-  protected void handleCoprocessorThrowable(final CoprocessorEnvironment env, final Throwable e)
-      throws IOException {
+  protected void handleCoprocessorThrowable(final E env, final Throwable e) throws IOException {
     if (e instanceof IOException) {
       throw (IOException)e;
     }
@@ -695,4 +722,189 @@ public abstract class CoprocessorHost<E extends CoprocessorEnvironment> {
           "'. Details of the problem: " + message);
     }
   }
+
+  // TODO: comments for these classes.
+
+  @FunctionalInterface
+  public interface ObserverGetter<C, O> extends Function<C, O> {}
+
+  private abstract class ObserverOperation<O> extends ObserverContext<E> {
+    ObserverGetter<C, O> observerGetter;
+
+    ObserverOperation(ObserverGetter<C, O> observerGetter) {
+      this(observerGetter, RpcServer.getRequestUser());
+    }
+
+    ObserverOperation(ObserverGetter<C, O> observerGetter, User user) {
+      super(user);
+      this.observerGetter = observerGetter;
+    }
+
+    abstract void callObserver() throws IOException;
+    protected void postEnvCall() {}
+  }
+
+  // Can't derive ObserverOperation from ObserverOperationWithResult (R = Void) because then all
+  // ObserverCaller implementations will have to have a return statement.
+  // O = observer, E = environment, C = coprocessor, R=result type
+  public abstract class ObserverOperationWithoutResult<O> extends ObserverOperation<O> {
+    protected abstract void call(O observer) throws IOException;
+
+    public ObserverOperationWithoutResult(ObserverGetter<C, O> observerGetter) {
+      super(observerGetter);
+    }
+
+    public ObserverOperationWithoutResult(ObserverGetter<C, O> observerGetter, User user) {
+      super(observerGetter, user);
+    }
+
+    /**
+     * In case of coprocessors which have many kinds of observers (for eg, {@link RegionCoprocessor}
+     * has BulkLoadObserver, RegionObserver, etc), some implementations may not need all
+     * observers, in which case they will return null for that observer's getter.
+     * We simply ignore such cases.
+     */
+    @Override
+    void callObserver() throws IOException {
+      O observer = observerGetter.apply(getEnvironment().getInstance());
+      if (observer != null) {
+        call(observer);
+      }
+    }
+  }
+
+  public abstract class ObserverOperationWithResult<O, R> extends ObserverOperation<O> {
+    protected abstract R call(O observer) throws IOException;
+
+    private R result;
+
+    public ObserverOperationWithResult(ObserverGetter<C, O> observerGetter) {
+      super(observerGetter);
+    }
+
+    public ObserverOperationWithResult(ObserverGetter<C, O> observerGetter, User user) {
+      super(observerGetter, user);
+    }
+
+    void setResult(final R result) {
+      this.result = result;
+    }
+
+    protected R getResult() {
+      return this.result;
+    }
+
+    void callObserver() throws IOException {
+      O observer = observerGetter.apply(getEnvironment().getInstance());
+      if (observer != null) {
+        result = call(observer);
+      }
+    }
+  }
+
+  //////////////////////////////////////////////////////////////////////////////////////////
+  // Functions to execute observer hooks and handle results (if any)
+  //////////////////////////////////////////////////////////////////////////////////////////
+  protected <O, R> R execOperationWithResult(final R defaultValue,
+      final ObserverOperationWithResult<O, R> observerOperation) throws IOException {
+    if (observerOperation == null) {
+      return defaultValue;
+    }
+    observerOperation.setResult(defaultValue);
+    execOperation(observerOperation);
+    return observerOperation.getResult();
+  }
+
+  // TODO: rearranged logic to make it hopefully clearer.
+  // what does bypass mean?
+  protected <O, R> R execOperationWithResult(final boolean ifBypass, final R defaultValue,
+      final ObserverOperationWithResult<O, R> observerOperation) throws IOException {
+    if (observerOperation == null) {
+      return ifBypass ? null : defaultValue;
+    } else {
+      observerOperation.setResult(defaultValue);
+      boolean bypass = execOperation(true, observerOperation);
+      R result = observerOperation.getResult();
+      return bypass == ifBypass ? result : null;
+    }
+  }
+
+  protected <O> boolean execOperation(final ObserverOperation<O> observerOperation)
+      throws IOException {
+    return execOperation(true, observerOperation);
+  }
+
+  protected <O> boolean execOperation(final boolean earlyExit,
+      final ObserverOperation<O> observerOperation) throws IOException {
+    if (observerOperation == null) return false;
+    boolean bypass = false;
+    List<E> envs = coprocessors.get();
+    for (E env : envs) {
+      observerOperation.prepare(env);
+      Thread currentThread = Thread.currentThread();
+      ClassLoader cl = currentThread.getContextClassLoader();
+      try {
+        currentThread.setContextClassLoader(env.getClassLoader());
+        observerOperation.callObserver();
+      } catch (Throwable e) {
+        handleCoprocessorThrowable(env, e);
+      } finally {
+        currentThread.setContextClassLoader(cl);
+      }
+      bypass |= observerOperation.shouldBypass();
+      if (earlyExit && observerOperation.shouldComplete()) {
+        break;
+      }
+      observerOperation.postEnvCall();
+    }
+    return bypass;
+  }
+
+
+  /**
+   * Coprocessor classes can be configured in any order, based on that priority is set and
+   * chained in a sorted order. Should be used preStop*() hooks i.e. when master/regionserver is
+   * going down. This function first calls coprocessor methods (using ObserverOperation.call())
+   * and then shutdowns the environment in postEnvCall(). <br>
+   * Need to execute all coprocessor methods first then postEnvCall(), otherwise some coprocessors
+   * may remain shutdown if any exception occurs during next coprocessor execution which prevent
+   * master/regionserver stop or cluster shutdown. (Refer:
+   * <a href="https://issues.apache.org/jira/browse/HBASE-16663">HBASE-16663</a>
+   * @return true if bypaas coprocessor execution, false if not.
+   * @throws IOException
+   */
+  protected <O> boolean execShutdown(final ObserverOperation<O> observerOperation)
+      throws IOException {
+    if (observerOperation == null) return false;
+    boolean bypass = false;
+    List<E> envs = coprocessors.get();
+    // Iterate the coprocessors and execute ObserverOperation's call()
+    for (E env : envs) {
+      if (env.getInstance() instanceof MasterObserver) {
+        observerOperation.prepare(env);
+        Thread currentThread = Thread.currentThread();
+        ClassLoader cl = currentThread.getContextClassLoader();
+        try {
+          currentThread.setContextClassLoader(env.getClassLoader());
+          observerOperation.callObserver();
+        } catch (Throwable e) {
+          handleCoprocessorThrowable(env, e);
+        } finally {
+          currentThread.setContextClassLoader(cl);
+        }
+        bypass |= observerOperation.shouldBypass();
+        if (observerOperation.shouldComplete()) {
+          break;
+        }
+      }
+    }
+
+    // Iterate the coprocessors and execute ObserverOperation's postEnvCall()
+    for (E env : envs) {
+      observerOperation.prepare(env);
+      observerOperation.postEnvCall();
+    }
+    return bypass;
+  }
+
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/EndpointObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/EndpointObserver.java
index 0646e13c70..98c1e1ed32 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/EndpointObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/EndpointObserver.java
@@ -50,7 +50,7 @@ import com.google.protobuf.Service;
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public interface EndpointObserver extends Coprocessor {
+public interface EndpointObserver {
 
   /**
    * Called before an Endpoint service method is invoked.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessor.java
new file mode 100644
index 0000000000..71c4c89ca6
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessor.java
@@ -0,0 +1,30 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.coprocessor;
+
+import org.apache.hadoop.hbase.Coprocessor;
+import org.apache.hadoop.hbase.HBaseInterfaceAudience;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.classification.InterfaceStability;
+
+@InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
+@InterfaceStability.Evolving
+public interface MasterCoprocessor extends Coprocessor {
+  MasterObserver getMasterObserver();
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessorEnvironment.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessorEnvironment.java
index a6e54e0c40..7ba17dbce8 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessorEnvironment.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessorEnvironment.java
@@ -28,7 +28,7 @@ import org.apache.hadoop.hbase.metrics.MetricRegistry;
 
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public interface MasterCoprocessorEnvironment extends CoprocessorEnvironment {
+public interface MasterCoprocessorEnvironment extends CoprocessorEnvironment<MasterCoprocessor> {
   /** @return reference to the HMaster services */
   MasterServices getMasterServices();
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java
index 8e368ba8e9..ea07782d15 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java
@@ -78,7 +78,7 @@ import org.apache.hadoop.hbase.shaded.protobuf.generated.SnapshotProtos.Snapshot
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public interface MasterObserver extends Coprocessor {
+public interface MasterObserver {
   /**
    * Called before a new table is created by
    * {@link org.apache.hadoop.hbase.master.HMaster}.  Called as part of create
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/ObserverContext.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/ObserverContext.java
index fc80768043..f1a727d08d 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/ObserverContext.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/ObserverContext.java
@@ -116,13 +116,13 @@ public class ObserverContext<E extends CoprocessorEnvironment> {
    * @param env The coprocessor environment to set
    * @param context An existing ObserverContext instance to use, or <code>null</code>
    *     to create a new instance
-   * @param <T> The environment type for the context
+   * @param <E> The environment type for the context
    * @return An instance of <code>ObserverContext</code> with the environment set
    */
   @Deprecated
   // TODO: Remove this method, ObserverContext should not depend on RpcServer
-  public static <T extends CoprocessorEnvironment> ObserverContext<T> createAndPrepare(
-      T env, ObserverContext<T> context) {
+  public static <E extends CoprocessorEnvironment> ObserverContext<E> createAndPrepare(
+      E env, ObserverContext< E> context) {
     if (context == null) {
       context = new ObserverContext<>(RpcServer.getRequestUser());
     }
@@ -140,11 +140,11 @@ public class ObserverContext<E extends CoprocessorEnvironment> {
    * @param context An existing ObserverContext instance to use, or <code>null</code>
    *     to create a new instance
    * @param user The requesting caller for the execution context
-   * @param <T> The environment type for the context
+   * @param <E> The environment type for the context
    * @return An instance of <code>ObserverContext</code> with the environment set
    */
-  public static <T extends CoprocessorEnvironment> ObserverContext<T> createAndPrepare(
-      T env, ObserverContext<T> context, User user) {
+  public static <E extends CoprocessorEnvironment> ObserverContext<E> createAndPrepare(
+      E env, ObserverContext<E> context, User user) {
     if (context == null) {
       context = new ObserverContext<>(user);
     }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessor.java
new file mode 100644
index 0000000000..e91c248d66
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessor.java
@@ -0,0 +1,38 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.coprocessor;
+
+import org.apache.hadoop.hbase.Coprocessor;
+import org.apache.hadoop.hbase.HBaseInterfaceAudience;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.classification.InterfaceStability;
+
+@InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
+@InterfaceStability.Evolving
+public interface RegionCoprocessor extends Coprocessor {
+  default RegionObserver getRegionObserver() {
+    return null;
+  }
+  default EndpointObserver getEndpointObserver() {
+    return null;
+  }
+  default BulkLoadObserver getBulkLoadObserver() {
+    return null;
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessorEnvironment.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessorEnvironment.java
index 3566f069b9..df6b28f8ac 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessorEnvironment.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessorEnvironment.java
@@ -32,7 +32,7 @@ import org.apache.hadoop.hbase.regionserver.RegionServerServices;
 
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public interface RegionCoprocessorEnvironment extends CoprocessorEnvironment {
+public interface RegionCoprocessorEnvironment extends CoprocessorEnvironment<RegionCoprocessor> {
   /** @return the region associated with this coprocessor */
   Region getRegion();
 
@@ -61,6 +61,4 @@ public interface RegionCoprocessorEnvironment extends CoprocessorEnvironment {
   // so we do not want to allow coprocessors to export metrics at the region level. We can allow
   // getMetricRegistryForTable() to allow coprocessors to track metrics per-table, per-regionserver.
   MetricRegistry getMetricRegistryForRegionServer();
-
-
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java
index 4f997c21cf..959e8d7c8b 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java
@@ -96,7 +96,7 @@ import org.apache.hadoop.hbase.wal.WALKey;
 // TODO as method signatures need to break, update to
 // ObserverContext<? extends RegionCoprocessorEnvironment>
 // so we can use additional environment state that isn't exposed to coprocessors.
-public interface RegionObserver extends Coprocessor {
+public interface RegionObserver {
   /** Mutation type for postMutationBeforeWAL hook */
   enum MutationType {
     APPEND, INCREMENT
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessor.java
new file mode 100644
index 0000000000..d51c78b8f9
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessor.java
@@ -0,0 +1,30 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.coprocessor;
+
+import org.apache.hadoop.hbase.Coprocessor;
+import org.apache.hadoop.hbase.HBaseInterfaceAudience;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.classification.InterfaceStability;
+
+@InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
+@InterfaceStability.Evolving
+public interface RegionServerCoprocessor extends Coprocessor {
+  RegionServerObserver getRegionServerObserver();
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessorEnvironment.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessorEnvironment.java
index f42556a47a..6a4a5ec67b 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessorEnvironment.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessorEnvironment.java
@@ -22,7 +22,8 @@ import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.metrics.MetricRegistry;
 import org.apache.hadoop.hbase.regionserver.RegionServerServices;
 
-public interface RegionServerCoprocessorEnvironment extends CoprocessorEnvironment {
+public interface RegionServerCoprocessorEnvironment
+    extends CoprocessorEnvironment<RegionServerCoprocessor> {
   /**
    * Gets the region server services.
    *
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerObserver.java
index 140bdbe036..622270bf56 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerObserver.java
@@ -59,7 +59,7 @@ import org.apache.hadoop.hbase.replication.ReplicationEndpoint;
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public interface RegionServerObserver extends Coprocessor {
+public interface RegionServerObserver {
   /**
    * Called before stopping region server.
    * @param ctx the environment to interact with the framework and region server.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALCoprocessor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALCoprocessor.java
new file mode 100644
index 0000000000..c85410593a
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALCoprocessor.java
@@ -0,0 +1,30 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.coprocessor;
+
+import org.apache.hadoop.hbase.Coprocessor;
+import org.apache.hadoop.hbase.HBaseInterfaceAudience;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.classification.InterfaceStability;
+
+@InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
+@InterfaceStability.Evolving
+public interface WALCoprocessor extends Coprocessor {
+  WALObserver getWALObserver();
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALCoprocessorEnvironment.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALCoprocessorEnvironment.java
index 0865d96296..03526d905c 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALCoprocessorEnvironment.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALCoprocessorEnvironment.java
@@ -28,7 +28,7 @@ import org.apache.hadoop.hbase.wal.WAL;
 
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public interface WALCoprocessorEnvironment extends CoprocessorEnvironment {
+public interface WALCoprocessorEnvironment extends CoprocessorEnvironment<WALCoprocessor> {
   /** @return reference to the region server's WAL */
   WAL getWAL();
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALObserver.java
index 887ed964a0..b13dd4ea02 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/WALObserver.java
@@ -66,7 +66,7 @@ import org.apache.hadoop.hbase.wal.WALKey;
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
-public interface WALObserver extends Coprocessor {
+public interface WALObserver {
   /**
    * Called before a {@link org.apache.hadoop.hbase.regionserver.wal.WALEdit}
    * is writen to WAL.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java
index 004f91d5e6..dbfd496660 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java
@@ -26,8 +26,8 @@ import java.util.Set;
 import org.apache.commons.lang.ClassUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.commons.math3.analysis.function.Add;
 import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.hbase.Coprocessor;
 import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
@@ -45,11 +45,11 @@ import org.apache.hadoop.hbase.client.Mutation;
 import org.apache.hadoop.hbase.client.TableDescriptor;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
+import org.apache.hadoop.hbase.coprocessor.MasterCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.MetricsCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
-import org.apache.hadoop.hbase.ipc.RpcServer;
 import org.apache.hadoop.hbase.master.locking.LockProcedure;
 import org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv;
 import org.apache.hadoop.hbase.metrics.MetricRegistry;
@@ -68,7 +68,7 @@ import org.apache.hadoop.hbase.shaded.protobuf.generated.SnapshotProtos.Snapshot
  */
 @InterfaceAudience.Private
 public class MasterCoprocessorHost
-    extends CoprocessorHost<MasterCoprocessorHost.MasterEnvironment> {
+    extends CoprocessorHost<MasterCoprocessor, MasterCoprocessorEnvironment> {
 
   private static final Log LOG = LogFactory.getLog(MasterCoprocessorHost.class);
 
@@ -76,13 +76,13 @@ public class MasterCoprocessorHost
    * Coprocessor environment extension providing access to master related
    * services.
    */
-  static class MasterEnvironment extends CoprocessorHost.Environment
+  static class MasterEnvironment extends CoprocessorHost.Environment<MasterCoprocessor>
       implements MasterCoprocessorEnvironment {
     private final MasterServices masterServices;
     private final boolean supportGroupCPs;
     private final MetricRegistry metricRegistry;
 
-    public MasterEnvironment(final Class<?> implClass, final Coprocessor impl,
+    public MasterEnvironment(final Class<?> implClass, final MasterCoprocessor impl,
         final int priority, final int seq, final Configuration conf,
         final MasterServices services) {
       super(impl, priority, seq, conf);
@@ -126,8 +126,8 @@ public class MasterCoprocessorHost
   }
 
   @Override
-  public MasterEnvironment createEnvironment(final Class<?> implClass,
-      final Coprocessor instance, final int priority, final int seq,
+  public MasterEnvironment createEnvironment(final Class<? extends MasterCoprocessor> implClass,
+      final MasterCoprocessor instance, final int priority, final int seq,
       final Configuration conf) {
     for (Object itf : ClassUtils.getAllInterfaces(implClass)) {
       Class<?> c = (Class<?>) itf;
@@ -139,106 +139,121 @@ public class MasterCoprocessorHost
         masterServices);
   }
 
+  @Override
+  public boolean checkCoprocessorType(Class<?> implClass) {
+    return MasterCoprocessor.class.isAssignableFrom(implClass);
+  }
+
+  private ObserverGetter<MasterCoprocessor, MasterObserver> masterObserverGetter =
+      MasterCoprocessor::getMasterObserver;
+
+  abstract class MasterObserverOperation extends
+      ObserverOperationWithoutResult<MasterObserver> {
+    public MasterObserverOperation(){
+      super(masterObserverGetter);
+    }
+
+    public MasterObserverOperation(User user) {
+      super(masterObserverGetter, user);
+    }
+  }
+
+
+  //////////////////////////////////////////////////////////////////////////////////////////////////
+  // MasterObserver operations
+  //////////////////////////////////////////////////////////////////////////////////////////////////
+
+
   public boolean preCreateNamespace(final NamespaceDescriptor ns) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preCreateNamespace(ctx, ns);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preCreateNamespace(this, ns);
       }
     });
   }
 
   public void postCreateNamespace(final NamespaceDescriptor ns) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postCreateNamespace(ctx, ns);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postCreateNamespace(this, ns);
       }
     });
   }
 
   public boolean preDeleteNamespace(final String namespaceName) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preDeleteNamespace(ctx, namespaceName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preDeleteNamespace(this, namespaceName);
       }
     });
   }
 
   public void postDeleteNamespace(final String namespaceName) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postDeleteNamespace(ctx, namespaceName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postDeleteNamespace(this, namespaceName);
       }
     });
   }
 
   public boolean preModifyNamespace(final NamespaceDescriptor ns) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preModifyNamespace(ctx, ns);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preModifyNamespace(this, ns);
       }
     });
   }
 
   public void postModifyNamespace(final NamespaceDescriptor ns) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postModifyNamespace(ctx, ns);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postModifyNamespace(this, ns);
       }
     });
   }
 
   public void preGetNamespaceDescriptor(final String namespaceName)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preGetNamespaceDescriptor(ctx, namespaceName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preGetNamespaceDescriptor(this, namespaceName);
       }
     });
   }
 
   public void postGetNamespaceDescriptor(final NamespaceDescriptor ns)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postGetNamespaceDescriptor(ctx, ns);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postGetNamespaceDescriptor(this, ns);
       }
     });
   }
 
   public boolean preListNamespaceDescriptors(final List<NamespaceDescriptor> descriptors)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preListNamespaceDescriptors(ctx, descriptors);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preListNamespaceDescriptors(this, descriptors);
       }
     });
   }
 
   public void postListNamespaceDescriptors(final List<NamespaceDescriptor> descriptors)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postListNamespaceDescriptors(ctx, descriptors);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postListNamespaceDescriptors(this, descriptors);
       }
     });
   }
@@ -247,205 +262,184 @@ public class MasterCoprocessorHost
 
   public void preCreateTable(final TableDescriptor htd, final HRegionInfo[] regions)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preCreateTable(ctx, htd, regions);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preCreateTable(this, htd, regions);
       }
     });
   }
 
   public void postCreateTable(final TableDescriptor htd, final HRegionInfo[] regions)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postCreateTable(ctx, htd, regions);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postCreateTable(this, htd, regions);
       }
     });
   }
 
   public void preCreateTableAction(final TableDescriptor htd, final HRegionInfo[] regions,
-                                   final User user)
-      throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+                                   final User user) throws IOException {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preCreateTableHandler(ctx, toImmutableHTableDescriptor(htd), regions);
-        oserver.preCreateTableAction(ctx, htd, regions);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preCreateTableHandler(this, toImmutableHTableDescriptor(htd), regions);
+        observer.preCreateTableAction(this, htd, regions);
       }
     });
   }
 
   public void postCompletedCreateTableAction(
       final TableDescriptor htd, final HRegionInfo[] regions, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postCreateTableHandler(ctx, toImmutableHTableDescriptor(htd), regions);
-        oserver.postCompletedCreateTableAction(ctx, htd, regions);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postCreateTableHandler(this, toImmutableHTableDescriptor(htd), regions);
+        observer.postCompletedCreateTableAction(this, htd, regions);
       }
     });
   }
 
   public void preDeleteTable(final TableName tableName) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preDeleteTable(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preDeleteTable(this, tableName);
       }
     });
   }
 
   public void postDeleteTable(final TableName tableName) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postDeleteTable(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postDeleteTable(this, tableName);
       }
     });
   }
 
   public void preDeleteTableAction(final TableName tableName, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preDeleteTableHandler(ctx, tableName);
-        oserver.preDeleteTableAction(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preDeleteTableHandler(this, tableName);
+        observer.preDeleteTableAction(this, tableName);
       }
     });
   }
 
   public void postCompletedDeleteTableAction(final TableName tableName, final User user)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postDeleteTableHandler(ctx, tableName);
-        oserver.postCompletedDeleteTableAction(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postDeleteTableHandler(this, tableName);
+        observer.postCompletedDeleteTableAction(this, tableName);
       }
     });
   }
 
   public void preTruncateTable(final TableName tableName) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preTruncateTable(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preTruncateTable(this, tableName);
       }
     });
   }
 
   public void postTruncateTable(final TableName tableName) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postTruncateTable(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postTruncateTable(this, tableName);
       }
     });
   }
 
   public void preTruncateTableAction(final TableName tableName, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preTruncateTableHandler(ctx, tableName);
-        oserver.preTruncateTableAction(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preTruncateTableHandler(this, tableName);
+        observer.preTruncateTableAction(this, tableName);
       }
     });
   }
 
   public void postCompletedTruncateTableAction(final TableName tableName, final User user)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postTruncateTableHandler(ctx, tableName);
-        oserver.postCompletedTruncateTableAction(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postTruncateTableHandler(this, tableName);
+        observer.postCompletedTruncateTableAction(this, tableName);
       }
     });
   }
 
   public void preModifyTable(final TableName tableName, final TableDescriptor htd)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preModifyTable(ctx, tableName, htd);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preModifyTable(this, tableName, htd);
       }
     });
   }
 
   public void postModifyTable(final TableName tableName, final TableDescriptor htd)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postModifyTable(ctx, tableName, htd);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postModifyTable(this, tableName, htd);
       }
     });
   }
 
   public void preModifyTableAction(final TableName tableName, final TableDescriptor htd,
-                                   final User user)
-      throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+                                   final User user) throws IOException {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preModifyTableHandler(ctx, tableName, toImmutableHTableDescriptor(htd));
-        oserver.preModifyTableAction(ctx, tableName, htd);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preModifyTableHandler(this, tableName, toImmutableHTableDescriptor(htd));
+        observer.preModifyTableAction(this, tableName, htd);
       }
     });
   }
 
   public void postCompletedModifyTableAction(final TableName tableName, final TableDescriptor htd,
-                                             final User user)
-      throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+                                             final User user) throws IOException {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postModifyTableHandler(ctx, tableName, toImmutableHTableDescriptor(htd));
-        oserver.postCompletedModifyTableAction(ctx, tableName, htd);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postModifyTableHandler(this, tableName, toImmutableHTableDescriptor(htd));
+        observer.postCompletedModifyTableAction(this, tableName, htd);
       }
     });
   }
 
   public boolean preAddColumn(final TableName tableName, final ColumnFamilyDescriptor columnFamily)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preAddColumn(ctx, tableName, toImmutableHColumnDescriptor(columnFamily));
-        oserver.preAddColumnFamily(ctx, tableName, columnFamily);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preAddColumn(this, tableName, toImmutableHColumnDescriptor(columnFamily));
+        observer.preAddColumnFamily(this, tableName, columnFamily);
       }
     });
   }
 
   public void postAddColumn(final TableName tableName, final ColumnFamilyDescriptor columnFamily)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postAddColumn(ctx, tableName, toImmutableHColumnDescriptor(columnFamily));
-        oserver.postAddColumnFamily(ctx, tableName, columnFamily);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postAddColumn(this, tableName, toImmutableHColumnDescriptor(columnFamily));
+        observer.postAddColumnFamily(this, tableName, columnFamily);
       }
     });
   }
@@ -455,12 +449,11 @@ public class MasterCoprocessorHost
       final ColumnFamilyDescriptor columnFamily,
       final User user)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preAddColumnHandler(ctx, tableName, toImmutableHColumnDescriptor(columnFamily));
-        oserver.preAddColumnFamilyAction(ctx, tableName, columnFamily);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preAddColumnHandler(this, tableName, toImmutableHColumnDescriptor(columnFamily));
+        observer.preAddColumnFamilyAction(this, tableName, columnFamily);
       }
     });
   }
@@ -470,36 +463,33 @@ public class MasterCoprocessorHost
       final ColumnFamilyDescriptor columnFamily,
       final User user)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postAddColumnHandler(ctx, tableName, toImmutableHColumnDescriptor(columnFamily));
-        oserver.postCompletedAddColumnFamilyAction(ctx, tableName, columnFamily);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postAddColumnHandler(this, tableName, toImmutableHColumnDescriptor(columnFamily));
+        observer.postCompletedAddColumnFamilyAction(this, tableName, columnFamily);
       }
     });
   }
 
   public boolean preModifyColumn(final TableName tableName, final ColumnFamilyDescriptor columnFamily)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preModifyColumn(ctx, tableName, toImmutableHColumnDescriptor(columnFamily));
-        oserver.preModifyColumnFamily(ctx, tableName, columnFamily);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preModifyColumn(this, tableName, toImmutableHColumnDescriptor(columnFamily));
+        observer.preModifyColumnFamily(this, tableName, columnFamily);
       }
     });
   }
 
   public void postModifyColumn(final TableName tableName, final ColumnFamilyDescriptor columnFamily)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postModifyColumn(ctx, tableName, toImmutableHColumnDescriptor(columnFamily));
-        oserver.postModifyColumnFamily(ctx, tableName, columnFamily);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postModifyColumn(this, tableName, toImmutableHColumnDescriptor(columnFamily));
+        observer.postModifyColumnFamily(this, tableName, columnFamily);
       }
     });
   }
@@ -508,12 +498,12 @@ public class MasterCoprocessorHost
       final TableName tableName,
       final ColumnFamilyDescriptor columnFamily,
       final User user) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preModifyColumnHandler(ctx, tableName, toImmutableHColumnDescriptor(columnFamily));
-        oserver.preModifyColumnFamilyAction(ctx, tableName, columnFamily);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preModifyColumnHandler(this, tableName, toImmutableHColumnDescriptor
+            (columnFamily));
+        observer.preModifyColumnFamilyAction(this, tableName, columnFamily);
       }
     });
   }
@@ -522,36 +512,34 @@ public class MasterCoprocessorHost
       final TableName tableName,
       final ColumnFamilyDescriptor columnFamily,
       final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postModifyColumnHandler(ctx, tableName, toImmutableHColumnDescriptor(columnFamily));
-        oserver.postCompletedModifyColumnFamilyAction(ctx, tableName, columnFamily);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postModifyColumnHandler(this, tableName,
+            toImmutableHColumnDescriptor(columnFamily));
+        observer.postCompletedModifyColumnFamilyAction(this, tableName, columnFamily);
       }
     });
   }
 
   public boolean preDeleteColumn(final TableName tableName, final byte[] columnFamily)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preDeleteColumn(ctx, tableName, columnFamily);
-        oserver.preDeleteColumnFamily(ctx, tableName, columnFamily);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preDeleteColumn(this, tableName, columnFamily);
+        observer.preDeleteColumnFamily(this, tableName, columnFamily);
       }
     });
   }
 
   public void postDeleteColumn(final TableName tableName, final byte[] columnFamily)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postDeleteColumn(ctx, tableName, columnFamily);
-        oserver.postDeleteColumnFamily(ctx, tableName, columnFamily);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postDeleteColumn(this, tableName, columnFamily);
+        observer.postDeleteColumnFamily(this, tableName, columnFamily);
       }
     });
   }
@@ -561,110 +549,100 @@ public class MasterCoprocessorHost
       final byte[] columnFamily,
       final User user)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preDeleteColumnHandler(ctx, tableName, columnFamily);
-        oserver.preDeleteColumnFamilyAction(ctx, tableName, columnFamily);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preDeleteColumnHandler(this, tableName, columnFamily);
+        observer.preDeleteColumnFamilyAction(this, tableName, columnFamily);
       }
     });
   }
 
   public void postCompletedDeleteColumnFamilyAction(
       final TableName tableName, final byte[] columnFamily, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postDeleteColumnHandler(ctx, tableName, columnFamily);
-        oserver.postCompletedDeleteColumnFamilyAction(ctx, tableName, columnFamily);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postDeleteColumnHandler(this, tableName, columnFamily);
+        observer.postCompletedDeleteColumnFamilyAction(this, tableName, columnFamily);
       }
     });
   }
 
   public void preEnableTable(final TableName tableName) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preEnableTable(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preEnableTable(this, tableName);
       }
     });
   }
 
   public void postEnableTable(final TableName tableName) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postEnableTable(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postEnableTable(this, tableName);
       }
     });
   }
 
   public void preEnableTableAction(final TableName tableName, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preEnableTableHandler(ctx, tableName);
-        oserver.preEnableTableAction(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preEnableTableHandler(this, tableName);
+        observer.preEnableTableAction(this, tableName);
       }
     });
   }
 
   public void postCompletedEnableTableAction(final TableName tableName, final User user)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postEnableTableHandler(ctx, tableName);
-        oserver.postCompletedEnableTableAction(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postEnableTableHandler(this, tableName);
+        observer.postCompletedEnableTableAction(this, tableName);
       }
     });
   }
 
   public void preDisableTable(final TableName tableName) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preDisableTable(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preDisableTable(this, tableName);
       }
     });
   }
 
   public void postDisableTable(final TableName tableName) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postDisableTable(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postDisableTable(this, tableName);
       }
     });
   }
 
   public void preDisableTableAction(final TableName tableName, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preDisableTableHandler(ctx, tableName);
-        oserver.preDisableTableAction(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preDisableTableHandler(this, tableName);
+        observer.preDisableTableAction(this, tableName);
       }
     });
   }
 
   public void postCompletedDisableTableAction(final TableName tableName, final User user)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postDisableTableHandler(ctx, tableName);
-        oserver.postCompletedDisableTableAction(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postDisableTableHandler(this, tableName);
+        observer.postCompletedDisableTableAction(this, tableName);
       }
     });
   }
@@ -672,208 +650,188 @@ public class MasterCoprocessorHost
   public boolean preAbortProcedure(
       final ProcedureExecutor<MasterProcedureEnv> procEnv,
       final long procId) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preAbortProcedure(ctx, procEnv, procId);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preAbortProcedure(this, procEnv, procId);
       }
     });
   }
 
   public void postAbortProcedure() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postAbortProcedure(ctx);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postAbortProcedure(this);
       }
     });
   }
 
   public boolean preListProcedures() throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preListProcedures(ctx);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preListProcedures(this);
       }
     });
   }
 
   public void postListProcedures(final List<ProcedureInfo> procInfoList) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postListProcedures(ctx, procInfoList);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postListProcedures(this, procInfoList);
       }
     });
   }
 
   public boolean preListLocks() throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preListLocks(ctx);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preListLocks(this);
       }
     });
   }
 
   public void postListLocks(final List<LockInfo> lockInfoList) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postListLocks(ctx, lockInfoList);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postListLocks(this, lockInfoList);
       }
     });
   }
 
   public boolean preMove(final HRegionInfo region, final ServerName srcServer,
       final ServerName destServer) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preMove(ctx, region, srcServer, destServer);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preMove(this, region, srcServer, destServer);
       }
     });
   }
 
   public void postMove(final HRegionInfo region, final ServerName srcServer,
       final ServerName destServer) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postMove(ctx, region, srcServer, destServer);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postMove(this, region, srcServer, destServer);
       }
     });
   }
 
   public boolean preAssign(final HRegionInfo regionInfo) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preAssign(ctx, regionInfo);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preAssign(this, regionInfo);
       }
     });
   }
 
   public void postAssign(final HRegionInfo regionInfo) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postAssign(ctx, regionInfo);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postAssign(this, regionInfo);
       }
     });
   }
 
   public boolean preUnassign(final HRegionInfo regionInfo, final boolean force)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preUnassign(ctx, regionInfo, force);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preUnassign(this, regionInfo, force);
       }
     });
   }
 
   public void postUnassign(final HRegionInfo regionInfo, final boolean force) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postUnassign(ctx, regionInfo, force);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postUnassign(this, regionInfo, force);
       }
     });
   }
 
   public void preRegionOffline(final HRegionInfo regionInfo) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preRegionOffline(ctx, regionInfo);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preRegionOffline(this, regionInfo);
       }
     });
   }
 
   public void postRegionOffline(final HRegionInfo regionInfo) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postRegionOffline(ctx, regionInfo);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postRegionOffline(this, regionInfo);
       }
     });
   }
 
   public void preMergeRegions(final HRegionInfo[] regionsToMerge)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preMergeRegions(ctx, regionsToMerge);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preMergeRegions(this, regionsToMerge);
       }
     });
   }
 
   public void postMergeRegions(final HRegionInfo[] regionsToMerge)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postMergeRegions(ctx, regionsToMerge);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postMergeRegions(this, regionsToMerge);
       }
     });
   }
 
   public boolean preBalance() throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preBalance(ctx);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preBalance(this);
       }
     });
   }
 
   public void postBalance(final List<RegionPlan> plans) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postBalance(ctx, plans);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postBalance(this, plans);
       }
     });
   }
 
   public boolean preSetSplitOrMergeEnabled(final boolean newValue,
       final MasterSwitchType switchType) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSetSplitOrMergeEnabled(ctx, newValue, switchType);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preSetSplitOrMergeEnabled(this, newValue, switchType);
       }
     });
   }
 
   public void postSetSplitOrMergeEnabled(final boolean newValue,
       final MasterSwitchType switchType) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postSetSplitOrMergeEnabled(ctx, newValue, switchType);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postSetSplitOrMergeEnabled(this, newValue, switchType);
       }
     });
   }
@@ -887,11 +845,10 @@ public class MasterCoprocessorHost
   public void preSplitRegion(
       final TableName tableName,
       final byte[] splitRow) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSplitRegion(ctx, tableName, splitRow);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preSplitRegion(this, tableName, splitRow);
       }
     });
   }
@@ -907,11 +864,10 @@ public class MasterCoprocessorHost
       final TableName tableName,
       final byte[] splitRow,
       final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSplitRegionAction(ctx, tableName, splitRow);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preSplitRegionAction(this, tableName, splitRow);
       }
     });
   }
@@ -927,11 +883,10 @@ public class MasterCoprocessorHost
       final HRegionInfo regionInfoA,
       final HRegionInfo regionInfoB,
       final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postCompletedSplitRegionAction(ctx, regionInfoA, regionInfoB);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postCompletedSplitRegionAction(this, regionInfoA, regionInfoB);
       }
     });
   }
@@ -947,11 +902,10 @@ public class MasterCoprocessorHost
       final byte[] splitKey,
       final List<Mutation> metaEntries,
       final User user) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSplitRegionBeforePONRAction(ctx, splitKey, metaEntries);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preSplitRegionBeforePONRAction(this, splitKey, metaEntries);
       }
     });
   }
@@ -962,11 +916,10 @@ public class MasterCoprocessorHost
    * @throws IOException
    */
   public void preSplitAfterPONRAction(final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSplitRegionAfterPONRAction(ctx);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preSplitRegionAfterPONRAction(this);
       }
     });
   }
@@ -977,11 +930,10 @@ public class MasterCoprocessorHost
    * @throws IOException
    */
   public void postRollBackSplitRegionAction(final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postRollBackSplitRegionAction(ctx);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postRollBackSplitRegionAction(this);
       }
     });
   }
@@ -994,11 +946,10 @@ public class MasterCoprocessorHost
    */
   public boolean preMergeRegionsAction(
       final HRegionInfo[] regionsToMerge, final User user) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        oserver.preMergeRegionsAction(ctx, regionsToMerge);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preMergeRegionsAction(this, regionsToMerge);
       }
     });
   }
@@ -1014,11 +965,10 @@ public class MasterCoprocessorHost
       final HRegionInfo[] regionsToMerge,
       final HRegionInfo mergedRegion,
       final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        oserver.postCompletedMergeRegionsAction(ctx, regionsToMerge, mergedRegion);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postCompletedMergeRegionsAction(this, regionsToMerge, mergedRegion);
       }
     });
   }
@@ -1034,11 +984,10 @@ public class MasterCoprocessorHost
       final HRegionInfo[] regionsToMerge,
       final @MetaMutationAnnotation List<Mutation> metaEntries,
       final User user) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        oserver.preMergeRegionsCommitAction(ctx, regionsToMerge, metaEntries);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preMergeRegionsCommitAction(this, regionsToMerge, metaEntries);
       }
     });
   }
@@ -1054,11 +1003,10 @@ public class MasterCoprocessorHost
       final HRegionInfo[] regionsToMerge,
       final HRegionInfo mergedRegion,
       final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        oserver.postMergeRegionsCommitAction(ctx, regionsToMerge, mergedRegion);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postMergeRegionsCommitAction(this, regionsToMerge, mergedRegion);
       }
     });
   }
@@ -1071,33 +1019,30 @@ public class MasterCoprocessorHost
    */
   public void postRollBackMergeRegionsAction(
       final HRegionInfo[] regionsToMerge, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation(user) {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        oserver.postRollBackMergeRegionsAction(ctx, regionsToMerge);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postRollBackMergeRegionsAction(this, regionsToMerge);
       }
     });
   }
 
   public boolean preBalanceSwitch(final boolean b) throws IOException {
     return execOperationWithResult(b, coprocessors.isEmpty() ? null :
-        new CoprocessorOperationWithResult<Boolean>() {
-      @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preBalanceSwitch(ctx, getResult()));
-      }
-    });
+        new ObserverOperationWithResult<MasterObserver, Boolean>(masterObserverGetter) {
+          @Override
+          public Boolean call(MasterObserver observer) throws IOException {
+            return observer.preBalanceSwitch(this, getResult());
+          }
+        });
   }
 
   public void postBalanceSwitch(final boolean oldValue, final boolean newValue)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postBalanceSwitch(ctx, oldValue, newValue);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postBalanceSwitch(this, oldValue, newValue);
       }
     });
   }
@@ -1105,16 +1050,15 @@ public class MasterCoprocessorHost
   public void preShutdown() throws IOException {
     // While stopping the cluster all coprocessors method should be executed first then the
     // coprocessor should be cleaned up.
-    execShutdown(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execShutdown(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preShutdown(ctx);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preShutdown(this);
       }
       @Override
-      public void postEnvCall(MasterEnvironment env) {
+      public void postEnvCall() {
         // invoke coprocessor stop method
-        shutdown(env);
+        shutdown(this.getEnvironment());
       }
     });
   }
@@ -1122,441 +1066,304 @@ public class MasterCoprocessorHost
   public void preStopMaster() throws IOException {
     // While stopping master all coprocessors method should be executed first then the coprocessor
     // environment should be cleaned up.
-    execShutdown(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execShutdown(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preStopMaster(ctx);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preStopMaster(this);
       }
       @Override
-      public void postEnvCall(MasterEnvironment env) {
+      public void postEnvCall() {
         // invoke coprocessor stop method
-        shutdown(env);
+        shutdown(this.getEnvironment());
       }
     });
   }
 
   public void preMasterInitialization() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preMasterInitialization(ctx);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preMasterInitialization(this);
       }
     });
   }
 
   public void postStartMaster() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postStartMaster(ctx);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postStartMaster(this);
       }
     });
   }
 
   public void preSnapshot(final SnapshotDescription snapshot,
       final TableDescriptor hTableDescriptor) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSnapshot(ctx, snapshot, hTableDescriptor);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preSnapshot(this, snapshot, hTableDescriptor);
       }
     });
   }
 
   public void postSnapshot(final SnapshotDescription snapshot,
       final TableDescriptor hTableDescriptor) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postSnapshot(ctx, snapshot, hTableDescriptor);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postSnapshot(this, snapshot, hTableDescriptor);
       }
     });
   }
 
   public void preListSnapshot(final SnapshotDescription snapshot) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.preListSnapshot(ctx, snapshot);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preListSnapshot(this, snapshot);
       }
     });
   }
 
   public void postListSnapshot(final SnapshotDescription snapshot) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.postListSnapshot(ctx, snapshot);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postListSnapshot(this, snapshot);
       }
     });
   }
 
   public void preCloneSnapshot(final SnapshotDescription snapshot,
       final TableDescriptor hTableDescriptor) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preCloneSnapshot(ctx, snapshot, hTableDescriptor);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preCloneSnapshot(this, snapshot, hTableDescriptor);
       }
     });
   }
 
   public void postCloneSnapshot(final SnapshotDescription snapshot,
       final TableDescriptor hTableDescriptor) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postCloneSnapshot(ctx, snapshot, hTableDescriptor);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postCloneSnapshot(this, snapshot, hTableDescriptor);
       }
     });
   }
 
   public void preRestoreSnapshot(final SnapshotDescription snapshot,
       final TableDescriptor hTableDescriptor) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preRestoreSnapshot(ctx, snapshot, hTableDescriptor);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preRestoreSnapshot(this, snapshot, hTableDescriptor);
       }
     });
   }
 
   public void postRestoreSnapshot(final SnapshotDescription snapshot,
       final TableDescriptor hTableDescriptor) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postRestoreSnapshot(ctx, snapshot, hTableDescriptor);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postRestoreSnapshot(this, snapshot, hTableDescriptor);
       }
     });
   }
 
   public void preDeleteSnapshot(final SnapshotDescription snapshot) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preDeleteSnapshot(ctx, snapshot);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preDeleteSnapshot(this, snapshot);
       }
     });
   }
 
   public void postDeleteSnapshot(final SnapshotDescription snapshot) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postDeleteSnapshot(ctx, snapshot);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postDeleteSnapshot(this, snapshot);
       }
     });
   }
 
   public boolean preGetTableDescriptors(final List<TableName> tableNamesList,
       final List<TableDescriptor> descriptors, final String regex) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preGetTableDescriptors(ctx, tableNamesList, descriptors, regex);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preGetTableDescriptors(this, tableNamesList, descriptors, regex);
       }
     });
   }
 
   public void postGetTableDescriptors(final List<TableName> tableNamesList,
       final List<TableDescriptor> descriptors, final String regex) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postGetTableDescriptors(ctx, tableNamesList, descriptors, regex);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postGetTableDescriptors(this, tableNamesList, descriptors, regex);
       }
     });
   }
 
   public boolean preGetTableNames(final List<TableDescriptor> descriptors,
       final String regex) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preGetTableNames(ctx, descriptors, regex);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preGetTableNames(this, descriptors, regex);
       }
     });
   }
 
   public void postGetTableNames(final List<TableDescriptor> descriptors,
       final String regex) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postGetTableNames(ctx, descriptors, regex);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postGetTableNames(this, descriptors, regex);
       }
     });
   }
 
   public void preTableFlush(final TableName tableName) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preTableFlush(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preTableFlush(this, tableName);
       }
     });
   }
 
   public void postTableFlush(final TableName tableName) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postTableFlush(ctx, tableName);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postTableFlush(this, tableName);
       }
     });
   }
 
   public void preSetUserQuota(final String user, final Quotas quotas) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSetUserQuota(ctx, user, quotas);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preSetUserQuota(this, user, quotas);
       }
     });
   }
 
   public void postSetUserQuota(final String user, final Quotas quotas) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postSetUserQuota(ctx, user, quotas);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postSetUserQuota(this, user, quotas);
       }
     });
   }
 
   public void preSetUserQuota(final String user, final TableName table, final Quotas quotas)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSetUserQuota(ctx, user, table, quotas);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preSetUserQuota(this, user, table, quotas);
       }
     });
   }
 
   public void postSetUserQuota(final String user, final TableName table, final Quotas quotas)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postSetUserQuota(ctx, user, table, quotas);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postSetUserQuota(this, user, table, quotas);
       }
     });
   }
 
   public void preSetUserQuota(final String user, final String namespace, final Quotas quotas)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSetUserQuota(ctx, user, namespace, quotas);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preSetUserQuota(this, user, namespace, quotas);
       }
     });
   }
 
   public void postSetUserQuota(final String user, final String namespace, final Quotas quotas)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postSetUserQuota(ctx, user, namespace, quotas);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postSetUserQuota(this, user, namespace, quotas);
       }
     });
   }
 
   public void preSetTableQuota(final TableName table, final Quotas quotas) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSetTableQuota(ctx, table, quotas);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preSetTableQuota(this, table, quotas);
       }
     });
   }
 
   public void postSetTableQuota(final TableName table, final Quotas quotas) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postSetTableQuota(ctx, table, quotas);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postSetTableQuota(this, table, quotas);
       }
     });
   }
 
   public void preSetNamespaceQuota(final String namespace, final Quotas quotas) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSetNamespaceQuota(ctx, namespace, quotas);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preSetNamespaceQuota(this, namespace, quotas);
       }
     });
   }
 
   public void postSetNamespaceQuota(final String namespace, final Quotas quotas) throws IOException{
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postSetNamespaceQuota(ctx, namespace, quotas);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postSetNamespaceQuota(this, namespace, quotas);
       }
     });
   }
 
-  private static abstract class CoprocessorOperation
-      extends ObserverContext<MasterCoprocessorEnvironment> {
-    public CoprocessorOperation() {
-      this(RpcServer.getRequestUser());
-    }
-
-    public CoprocessorOperation(User user) {
-      super(user);
-    }
-
-    public abstract void call(MasterObserver oserver,
-        ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException;
-
-    public void postEnvCall(MasterEnvironment env) {
-    }
-  }
-
-  private static abstract class CoprocessorOperationWithResult<T> extends CoprocessorOperation {
-    private T result = null;
-    public void setResult(final T result) { this.result = result; }
-    public T getResult() { return this.result; }
-  }
-
-  private <T> T execOperationWithResult(final T defaultValue,
-      final CoprocessorOperationWithResult<T> ctx) throws IOException {
-    if (ctx == null) return defaultValue;
-    ctx.setResult(defaultValue);
-    execOperation(ctx);
-    return ctx.getResult();
-  }
-
-  private boolean execOperation(final CoprocessorOperation ctx) throws IOException {
-    if (ctx == null) return false;
-    boolean bypass = false;
-    List<MasterEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      MasterEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof MasterObserver) {
-        ctx.prepare(env);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          ctx.call((MasterObserver)env.getInstance(), ctx);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        bypass |= ctx.shouldBypass();
-        if (ctx.shouldComplete()) {
-          break;
-        }
-      }
-      ctx.postEnvCall(env);
-    }
-    return bypass;
-  }
-
-  /**
-   * Master coprocessor classes can be configured in any order, based on that priority is set and
-   * chained in a sorted order. For preStopMaster()/preShutdown(), coprocessor methods are invoked
-   * in call() and environment is shutdown in postEnvCall(). <br>
-   * Need to execute all coprocessor methods first then postEnvCall(), otherwise some coprocessors
-   * may remain shutdown if any exception occurs during next coprocessor execution which prevent
-   * Master stop or cluster shutdown. (Refer:
-   * <a href="https://issues.apache.org/jira/browse/HBASE-16663">HBASE-16663</a>
-   * @param ctx CoprocessorOperation
-   * @return true if bypaas coprocessor execution, false if not.
-   * @throws IOException
-   */
-  private boolean execShutdown(final CoprocessorOperation ctx) throws IOException {
-    if (ctx == null) return false;
-    boolean bypass = false;
-    List<MasterEnvironment> envs = coprocessors.get();
-    int envsSize = envs.size();
-    // Iterate the coprocessors and execute CoprocessorOperation's call()
-    for (int i = 0; i < envsSize; i++) {
-      MasterEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof MasterObserver) {
-        ctx.prepare(env);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          ctx.call((MasterObserver) env.getInstance(), ctx);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        bypass |= ctx.shouldBypass();
-        if (ctx.shouldComplete()) {
-          break;
-        }
-      }
-    }
-
-    // Iterate the coprocessors and execute CoprocessorOperation's postEnvCall()
-    for (int i = 0; i < envsSize; i++) {
-      MasterEnvironment env = envs.get(i);
-      ctx.postEnvCall(env);
-    }
-    return bypass;
-  }
-
   public void preMoveServersAndTables(final Set<Address> servers, final Set<TableName> tables, final String targetGroup)
-          throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+      throws IOException {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver,
-                       ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        if(((MasterEnvironment)ctx.getEnvironment()).supportGroupCPs) {
-          oserver.preMoveServersAndTables(ctx, servers, tables, targetGroup);
+      public void call(MasterObserver observer) throws IOException {
+        if(((MasterEnvironment)getEnvironment()).supportGroupCPs) {
+          observer.preMoveServersAndTables(this, servers, tables, targetGroup);
         }
       }
     });
   }
 
   public void postMoveServersAndTables(final Set<Address> servers, final Set<TableName> tables, final String targetGroup)
-          throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+      throws IOException {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver,
-                       ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        if(((MasterEnvironment)ctx.getEnvironment()).supportGroupCPs) {
-          oserver.postMoveServersAndTables(ctx, servers, tables, targetGroup);
+      public void call(MasterObserver observer) throws IOException {
+        if(((MasterEnvironment)getEnvironment()).supportGroupCPs) {
+          observer.postMoveServersAndTables(this, servers, tables, targetGroup);
         }
       }
     });
@@ -1564,12 +1371,11 @@ public class MasterCoprocessorHost
 
   public void preMoveServers(final Set<Address> servers, final String targetGroup)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        if(((MasterEnvironment)ctx.getEnvironment()).supportGroupCPs) {
-          oserver.preMoveServers(ctx, servers, targetGroup);
+      public void call(MasterObserver observer) throws IOException {
+        if(((MasterEnvironment)getEnvironment()).supportGroupCPs) {
+          observer.preMoveServers(this, servers, targetGroup);
         }
       }
     });
@@ -1577,12 +1383,11 @@ public class MasterCoprocessorHost
 
   public void postMoveServers(final Set<Address> servers, final String targetGroup)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        if(((MasterEnvironment)ctx.getEnvironment()).supportGroupCPs) {
-          oserver.postMoveServers(ctx, servers, targetGroup);
+      public void call(MasterObserver observer) throws IOException {
+        if(((MasterEnvironment)getEnvironment()).supportGroupCPs) {
+          observer.postMoveServers(this, servers, targetGroup);
         }
       }
     });
@@ -1590,12 +1395,11 @@ public class MasterCoprocessorHost
 
   public void preMoveTables(final Set<TableName> tables, final String targetGroup)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        if(((MasterEnvironment)ctx.getEnvironment()).supportGroupCPs) {
-          oserver.preMoveTables(ctx, tables, targetGroup);
+      public void call(MasterObserver observer) throws IOException {
+        if(((MasterEnvironment)getEnvironment()).supportGroupCPs) {
+          observer.preMoveTables(this, tables, targetGroup);
         }
       }
     });
@@ -1603,12 +1407,11 @@ public class MasterCoprocessorHost
 
   public void postMoveTables(final Set<TableName> tables, final String targetGroup)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        if(((MasterEnvironment)ctx.getEnvironment()).supportGroupCPs) {
-          oserver.postMoveTables(ctx, tables, targetGroup);
+      public void call(MasterObserver observer) throws IOException {
+        if(((MasterEnvironment)getEnvironment()).supportGroupCPs) {
+          observer.postMoveTables(this, tables, targetGroup);
         }
       }
     });
@@ -1616,12 +1419,11 @@ public class MasterCoprocessorHost
 
   public void preAddRSGroup(final String name)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        if(((MasterEnvironment)ctx.getEnvironment()).supportGroupCPs) {
-          oserver.preAddRSGroup(ctx, name);
+      public void call(MasterObserver observer) throws IOException {
+        if(((MasterEnvironment)getEnvironment()).supportGroupCPs) {
+          observer.preAddRSGroup(this, name);
         }
       }
     });
@@ -1629,12 +1431,11 @@ public class MasterCoprocessorHost
 
   public void postAddRSGroup(final String name)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        if (((MasterEnvironment) ctx.getEnvironment()).supportGroupCPs) {
-          oserver.postAddRSGroup(ctx, name);
+      public void call(MasterObserver observer) throws IOException {
+        if (((MasterEnvironment)getEnvironment()).supportGroupCPs) {
+          observer.postAddRSGroup(this, name);
         }
       }
     });
@@ -1642,12 +1443,11 @@ public class MasterCoprocessorHost
 
   public void preRemoveRSGroup(final String name)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        if(((MasterEnvironment)ctx.getEnvironment()).supportGroupCPs) {
-          oserver.preRemoveRSGroup(ctx, name);
+      public void call(MasterObserver observer) throws IOException {
+        if(((MasterEnvironment)getEnvironment()).supportGroupCPs) {
+          observer.preRemoveRSGroup(this, name);
         }
       }
     });
@@ -1655,12 +1455,11 @@ public class MasterCoprocessorHost
 
   public void postRemoveRSGroup(final String name)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        if(((MasterEnvironment)ctx.getEnvironment()).supportGroupCPs) {
-          oserver.postRemoveRSGroup(ctx, name);
+      public void call(MasterObserver observer) throws IOException {
+        if(((MasterEnvironment)getEnvironment()).supportGroupCPs) {
+          observer.postRemoveRSGroup(this, name);
         }
       }
     });
@@ -1668,12 +1467,11 @@ public class MasterCoprocessorHost
 
   public void preBalanceRSGroup(final String name)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        if(((MasterEnvironment)ctx.getEnvironment()).supportGroupCPs) {
-          oserver.preBalanceRSGroup(ctx, name);
+      public void call(MasterObserver observer) throws IOException {
+        if(((MasterEnvironment)getEnvironment()).supportGroupCPs) {
+          observer.preBalanceRSGroup(this, name);
         }
       }
     });
@@ -1681,12 +1479,11 @@ public class MasterCoprocessorHost
 
   public void postBalanceRSGroup(final String name, final boolean balanceRan)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver,
-          ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
-        if(((MasterEnvironment)ctx.getEnvironment()).supportGroupCPs) {
-          oserver.postBalanceRSGroup(ctx, name, balanceRan);
+      public void call(MasterObserver observer) throws IOException {
+        if(((MasterEnvironment)getEnvironment()).supportGroupCPs) {
+          observer.postBalanceRSGroup(this, name, balanceRan);
         }
       }
     });
@@ -1694,186 +1491,168 @@ public class MasterCoprocessorHost
 
   public void preAddReplicationPeer(final String peerId, final ReplicationPeerConfig peerConfig)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.preAddReplicationPeer(ctx, peerId, peerConfig);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preAddReplicationPeer(this, peerId, peerConfig);
       }
     });
   }
 
   public void postAddReplicationPeer(final String peerId, final ReplicationPeerConfig peerConfig)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.postAddReplicationPeer(ctx, peerId, peerConfig);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postAddReplicationPeer(this, peerId, peerConfig);
       }
     });
   }
 
   public void preRemoveReplicationPeer(final String peerId) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.preRemoveReplicationPeer(ctx, peerId);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preRemoveReplicationPeer(this, peerId);
       }
     });
   }
 
   public void postRemoveReplicationPeer(final String peerId) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.postRemoveReplicationPeer(ctx, peerId);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postRemoveReplicationPeer(this, peerId);
       }
     });
   }
 
   public void preEnableReplicationPeer(final String peerId) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.preEnableReplicationPeer(ctx, peerId);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preEnableReplicationPeer(this, peerId);
       }
     });
   }
 
   public void postEnableReplicationPeer(final String peerId) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.postEnableReplicationPeer(ctx, peerId);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postEnableReplicationPeer(this, peerId);
       }
     });
   }
 
   public void preDisableReplicationPeer(final String peerId) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.preDisableReplicationPeer(ctx, peerId);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preDisableReplicationPeer(this, peerId);
       }
     });
   }
 
   public void postDisableReplicationPeer(final String peerId) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.postDisableReplicationPeer(ctx, peerId);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postDisableReplicationPeer(this, peerId);
       }
     });
   }
 
   public void preGetReplicationPeerConfig(final String peerId) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.preGetReplicationPeerConfig(ctx, peerId);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preGetReplicationPeerConfig(this, peerId);
       }
     });
   }
 
   public void postGetReplicationPeerConfig(final String peerId) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.postGetReplicationPeerConfig(ctx, peerId);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postGetReplicationPeerConfig(this, peerId);
       }
     });
   }
 
   public void preUpdateReplicationPeerConfig(final String peerId,
       final ReplicationPeerConfig peerConfig) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.preUpdateReplicationPeerConfig(ctx, peerId, peerConfig);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preUpdateReplicationPeerConfig(this, peerId, peerConfig);
       }
     });
   }
 
   public void postUpdateReplicationPeerConfig(final String peerId,
       final ReplicationPeerConfig peerConfig) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.postUpdateReplicationPeerConfig(ctx, peerId, peerConfig);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postUpdateReplicationPeerConfig(this, peerId, peerConfig);
       }
     });
   }
 
   public void preListReplicationPeers(final String regex) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.preListReplicationPeers(ctx, regex);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preListReplicationPeers(this, regex);
       }
     });
   }
 
   public void postListReplicationPeers(final String regex) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver observer, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        observer.postListReplicationPeers(ctx, regex);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postListReplicationPeers(this, regex);
       }
     });
   }
 
   public void preRequestLock(String namespace, TableName tableName, HRegionInfo[] regionInfos,
       LockProcedure.LockType type, String description) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preRequestLock(ctx, namespace, tableName, regionInfos, type, description);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preRequestLock(this, namespace, tableName, regionInfos, type, description);
       }
     });
   }
 
   public void postRequestLock(String namespace, TableName tableName, HRegionInfo[] regionInfos,
       LockProcedure.LockType type, String description) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postRequestLock(ctx, namespace, tableName, regionInfos, type, description);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postRequestLock(this, namespace, tableName, regionInfos, type, description);
       }
     });
   }
 
   public void preLockHeartbeat(LockProcedure proc, boolean keepAlive) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preLockHeartbeat(ctx, proc, keepAlive);
+      public void call(MasterObserver observer) throws IOException {
+        observer.preLockHeartbeat(this, proc, keepAlive);
       }
     });
   }
 
   public void postLockHeartbeat(LockProcedure proc, boolean keepAlive) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new MasterObserverOperation() {
       @Override
-      public void call(MasterObserver oserver, ObserverContext<MasterCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postLockHeartbeat(ctx, proc, keepAlive);
+      public void call(MasterObserver observer) throws IOException {
+        observer.postLockHeartbeat(this, proc, keepAlive);
       }
     });
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/MasterSpaceQuotaObserver.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/MasterSpaceQuotaObserver.java
index 7c86525482..5253eeac46 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/MasterSpaceQuotaObserver.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/MasterSpaceQuotaObserver.java
@@ -24,6 +24,7 @@ import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.client.Admin;
 import org.apache.hadoop.hbase.client.Connection;
+import org.apache.hadoop.hbase.coprocessor.MasterCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
@@ -35,7 +36,7 @@ import org.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.Quotas;
  * are deleted.
  */
 @InterfaceAudience.Private
-public class MasterSpaceQuotaObserver implements MasterObserver {
+public class MasterSpaceQuotaObserver implements MasterCoprocessor, MasterObserver {
   public static final String REMOVE_QUOTA_ON_TABLE_DELETE = "hbase.quota.remove.on.table.delete";
   public static final boolean REMOVE_QUOTA_ON_TABLE_DELETE_DEFAULT = true;
 
@@ -44,6 +45,11 @@ public class MasterSpaceQuotaObserver implements MasterObserver {
   private boolean quotasEnabled = false;
 
   @Override
+  public MasterObserver getMasterObserver() {
+    return this;
+  }
+
+  @Override
   public void start(CoprocessorEnvironment ctx) throws IOException {
     this.cpEnv = ctx;
     this.conf = cpEnv.getConfiguration();
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java
index dfe22ba545..6cff016b81 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java
@@ -34,6 +34,7 @@ import org.apache.commons.collections.map.ReferenceMap;
 import org.apache.commons.lang.ClassUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.commons.math3.analysis.function.Add;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
@@ -61,6 +62,7 @@ import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
 import org.apache.hadoop.hbase.coprocessor.EndpointObserver;
 import org.apache.hadoop.hbase.coprocessor.MetricsCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.coprocessor.RegionObserver.MutationType;
@@ -69,7 +71,6 @@ import org.apache.hadoop.hbase.filter.CompareFilter.CompareOp;
 import org.apache.hadoop.hbase.io.FSDataInputStreamWrapper;
 import org.apache.hadoop.hbase.io.Reference;
 import org.apache.hadoop.hbase.io.hfile.CacheConfig;
-import org.apache.hadoop.hbase.ipc.RpcServer;
 import org.apache.hadoop.hbase.metrics.MetricRegistry;
 import org.apache.hadoop.hbase.regionserver.Region.Operation;
 import org.apache.hadoop.hbase.regionserver.compactions.CompactionRequest;
@@ -93,7 +94,7 @@ import com.google.protobuf.Service;
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
 public class RegionCoprocessorHost
-    extends CoprocessorHost<RegionCoprocessorHost.RegionEnvironment> {
+    extends CoprocessorHost<RegionCoprocessor, RegionCoprocessorEnvironment> {
 
   private static final Log LOG = LogFactory.getLog(RegionCoprocessorHost.class);
   // The shared data map
@@ -104,10 +105,10 @@ public class RegionCoprocessorHost
   private final boolean hasCustomPostScannerFilterRow;
 
   /**
-   * 
+   *
    * Encapsulation of the environment of each coprocessor
    */
-  static class RegionEnvironment extends CoprocessorHost.Environment
+  static class RegionEnvironment extends CoprocessorHost.Environment<RegionCoprocessor>
       implements RegionCoprocessorEnvironment {
 
     private Region region;
@@ -120,7 +121,7 @@ public class RegionCoprocessorHost
      * @param impl the coprocessor instance
      * @param priority chaining priority
      */
-    public RegionEnvironment(final Coprocessor impl, final int priority,
+    public RegionEnvironment(final RegionCoprocessor impl, final int priority,
         final int seq, final Configuration conf, final Region region,
         final RegionServerServices services, final ConcurrentMap<String, Object> sharedData) {
       super(impl, priority, seq, conf);
@@ -143,6 +144,7 @@ public class RegionCoprocessorHost
       return rsServices;
     }
 
+    @Override
     public void shutdown() {
       super.shutdown();
       MetricsCoprocessor.removeRegistry(this.metricRegistry);
@@ -227,7 +229,7 @@ public class RegionCoprocessorHost
 
     // now check whether any coprocessor implements postScannerFilterRow
     boolean hasCustomPostScannerFilterRow = false;
-    out: for (RegionEnvironment env: coprocessors) {
+    out: for (RegionCoprocessorEnvironment env: coprocessors) {
       if (env.getInstance() instanceof RegionObserver) {
         Class<?> clazz = env.getInstance().getClass();
         for(;;) {
@@ -362,13 +364,16 @@ public class RegionCoprocessorHost
 
     // scan the table attributes for coprocessor load specifications
     // initialize the coprocessors
-    List<RegionEnvironment> configured = new ArrayList<>();
+    List<RegionCoprocessorEnvironment> configured = new ArrayList<>();
     for (TableCoprocessorAttribute attr: getTableCoprocessorAttrsFromSchema(conf,
         region.getTableDescriptor())) {
       // Load encompasses classloading and coprocessor initialization
       try {
-        RegionEnvironment env = load(attr.getPath(), attr.getClassName(), attr.getPriority(),
-          attr.getConf());
+        RegionCoprocessorEnvironment env = load(attr.getPath(), attr.getClassName(),
+            attr.getPriority(), attr.getConf());
+        if (env == null) {
+          continue;
+        }
         configured.add(env);
         LOG.info("Loaded coprocessor " + attr.getClassName() + " from HTD of " +
             region.getTableDescriptor().getTableName().getNameAsString() + " successfully.");
@@ -386,8 +391,8 @@ public class RegionCoprocessorHost
   }
 
   @Override
-  public RegionEnvironment createEnvironment(Class<?> implClass,
-      Coprocessor instance, int priority, int seq, Configuration conf) {
+  public RegionEnvironment createEnvironment(Class<? extends RegionCoprocessor> implClass,
+      RegionCoprocessor instance, int priority, int seq, Configuration conf) {
     // Check if it's an Endpoint.
     // Due to current dynamic protocol design, Endpoint
     // uses a different way to be registered and executed.
@@ -414,31 +419,55 @@ public class RegionCoprocessorHost
         rsServices, classData);
   }
 
+  @Override
+  public boolean checkCoprocessorType(Class<?> implClass) {
+    return RegionCoprocessor.class.isAssignableFrom(implClass);
+  }
+
+  private ObserverGetter<RegionCoprocessor, RegionObserver> regionObserverGetter =
+      RegionCoprocessor::getRegionObserver;
+
+  private ObserverGetter<RegionCoprocessor, EndpointObserver> endpointObserverGetter =
+      RegionCoprocessor::getEndpointObserver;
+
+  abstract class RegionObserverOperation extends ObserverOperationWithoutResult<RegionObserver> {
+    public RegionObserverOperation() {
+      super(regionObserverGetter);
+    }
+
+    public RegionObserverOperation(User user) {
+      super(regionObserverGetter, user);
+    }
+  }
+
+  //////////////////////////////////////////////////////////////////////////////////////////////////
+  // Observer operations
+  //////////////////////////////////////////////////////////////////////////////////////////////////
+
   /**
    * Invoked before a region open.
    *
    * @throws IOException Signals that an I/O exception has occurred.
    */
   public void preOpen() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preOpen(ctx);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preOpen(this);
       }
     });
   }
 
+
   /**
    * Invoked after a region open
    */
   public void postOpen() {
     try {
-      execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+      execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
         @Override
-        public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-            throws IOException {
-          oserver.postOpen(ctx);
+        public void call(RegionObserver observer) throws IOException {
+          observer.postOpen(this);
         }
       });
     } catch (IOException e) {
@@ -451,11 +480,10 @@ public class RegionCoprocessorHost
    */
   public void postLogReplay() {
     try {
-      execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+      execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
         @Override
-        public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-            throws IOException {
-          oserver.postLogReplay(ctx);
+        public void call(RegionObserver observer) throws IOException {
+          observer.postLogReplay(this);
         }
       });
     } catch (IOException e) {
@@ -468,11 +496,10 @@ public class RegionCoprocessorHost
    * @param abortRequested true if the server is aborting
    */
   public void preClose(final boolean abortRequested) throws IOException {
-    execOperation(false, new RegionOperation() {
+    execOperation(false, new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preClose(ctx, abortRequested);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preClose(this, abortRequested);
       }
     });
   }
@@ -483,11 +510,10 @@ public class RegionCoprocessorHost
    */
   public void postClose(final boolean abortRequested) {
     try {
-      execOperation(false, new RegionOperation() {
+      execOperation(false, new RegionObserverOperation() {
         @Override
-        public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-            throws IOException {
-          oserver.postClose(ctx, abortRequested);
+        public void call(RegionObserver observer) throws IOException {
+          observer.postClose(this, abortRequested);
         }
         public void postEnvCall(RegionEnvironment env) {
           shutdown(env);
@@ -506,15 +532,16 @@ public class RegionCoprocessorHost
   public InternalScanner preCompactScannerOpen(final Store store,
       final List<StoreFileScanner> scanners, final ScanType scanType, final long earliestPutTs,
       final CompactionRequest request, final User user, final long readPoint) throws IOException {
-    return execOperationWithResult(null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<InternalScanner>(user) {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preCompactScannerOpen(ctx, store, scanners, scanType,
-          earliestPutTs, getResult(), request, readPoint));
-      }
-    });
+    return execOperationWithResult(null, coprocessors.isEmpty() ? null :
+        // TODO: this constructor should be wrong.
+            new ObserverOperationWithResult<RegionObserver, InternalScanner>(
+                regionObserverGetter, user) {
+          @Override
+          public InternalScanner call(RegionObserver observer) throws IOException {
+            return observer.preCompactScannerOpen(this, store, scanners, scanType,
+                earliestPutTs, getResult(), request, readPoint);
+          }
+        });
   }
 
   /**
@@ -528,11 +555,10 @@ public class RegionCoprocessorHost
    */
   public boolean preCompactSelection(final Store store, final List<StoreFile> candidates,
       final CompactionRequest request, final User user) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    return execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation(user) {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preCompactSelection(ctx, store, candidates, request);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preCompactSelection(this, store, candidates, request);
       }
     });
   }
@@ -547,11 +573,10 @@ public class RegionCoprocessorHost
   public void postCompactSelection(final Store store, final ImmutableList<StoreFile> selected,
       final CompactionRequest request, final User user) {
     try {
-      execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+      execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation(user) {
         @Override
-        public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-            throws IOException {
-          oserver.postCompactSelection(ctx, store, selected, request);
+        public void call(RegionObserver observer) throws IOException {
+          observer.postCompactSelection(this, store, selected, request);
         }
       });
     } catch (IOException e) {
@@ -570,12 +595,12 @@ public class RegionCoprocessorHost
   public InternalScanner preCompact(final Store store, final InternalScanner scanner,
       final ScanType scanType, final CompactionRequest request, final User user)
       throws IOException {
-    return execOperationWithResult(false, scanner,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<InternalScanner>(user) {
+    return execOperationWithResult(false, scanner, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, InternalScanner>(
+            regionObserverGetter, user) {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preCompact(ctx, store, getResult(), scanType, request));
+      public InternalScanner call(RegionObserver observer) throws IOException {
+        return observer.preCompact(this, store, getResult(), scanType, request);
       }
     });
   }
@@ -589,11 +614,10 @@ public class RegionCoprocessorHost
    */
   public void postCompact(final Store store, final StoreFile resultFile,
       final CompactionRequest request, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation(user) {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postCompact(ctx, store, resultFile, request);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postCompact(this, store, resultFile, request);
       }
     });
   }
@@ -604,14 +628,13 @@ public class RegionCoprocessorHost
    */
   public InternalScanner preFlush(final Store store, final InternalScanner scanner)
       throws IOException {
-    return execOperationWithResult(false, scanner,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<InternalScanner>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preFlush(ctx, store, getResult()));
-      }
-    });
+    return execOperationWithResult(false, scanner, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, InternalScanner>(regionObserverGetter) {
+          @Override
+          public InternalScanner call(RegionObserver observer) throws IOException {
+            return observer.preFlush(this, store, getResult());
+          }
+        });
   }
 
   /**
@@ -619,11 +642,10 @@ public class RegionCoprocessorHost
    * @throws IOException
    */
   public void preFlush() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preFlush(ctx);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preFlush(this);
       }
     });
   }
@@ -634,14 +656,13 @@ public class RegionCoprocessorHost
    */
   public InternalScanner preFlushScannerOpen(final Store store,
       final List<KeyValueScanner> scanners, final long readPoint) throws IOException {
-    return execOperationWithResult(null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<InternalScanner>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preFlushScannerOpen(ctx, store, scanners, getResult(), readPoint));
-      }
-    });
+    return execOperationWithResult(null, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, InternalScanner>(regionObserverGetter) {
+          @Override
+          public InternalScanner call(RegionObserver observer) throws IOException {
+            return observer.preFlushScannerOpen(this, store, scanners, getResult(), readPoint);
+          }
+        });
   }
 
   /**
@@ -649,11 +670,10 @@ public class RegionCoprocessorHost
    * @throws IOException
    */
   public void postFlush() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postFlush(ctx);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postFlush(this);
       }
     });
   }
@@ -663,11 +683,10 @@ public class RegionCoprocessorHost
    * @throws IOException
    */
   public void postFlush(final Store store, final StoreFile storeFile) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postFlush(ctx, store, storeFile);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postFlush(this, store, storeFile);
       }
     });
   }
@@ -678,11 +697,10 @@ public class RegionCoprocessorHost
    */
   @Deprecated
   public void preSplit(final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation(user) {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSplit(ctx);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preSplit(this);
       }
     });
   }
@@ -695,11 +713,10 @@ public class RegionCoprocessorHost
    */
   @Deprecated
   public void preSplit(final byte[] splitRow, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation(user) {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSplit(ctx, splitRow);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preSplit(this, splitRow);
       }
     });
   }
@@ -714,40 +731,37 @@ public class RegionCoprocessorHost
    */
   @Deprecated
   public void postSplit(final Region l, final Region r, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation(user) {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postSplit(ctx, l, r);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postSplit(this, l, r);
       }
     });
   }
 
   /**
-  * Note: the logic moves to Master; it is unused in RS
-  */
- @Deprecated
+   * Note: the logic moves to Master; it is unused in RS
+   */
+  @Deprecated
   public boolean preSplitBeforePONR(final byte[] splitKey,
       final List<Mutation> metaEntries, final User user) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    return execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation(user) {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSplitBeforePONR(ctx, splitKey, metaEntries);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preSplitBeforePONR(this, splitKey, metaEntries);
       }
     });
   }
 
   /**
-  * Note: the logic moves to Master; it is unused in RS
-  */
+   * Note: the logic moves to Master; it is unused in RS
+   */
   @Deprecated
   public void preSplitAfterPONR(final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation(user) {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preSplitAfterPONR(ctx);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preSplitAfterPONR(this);
       }
     });
   }
@@ -756,15 +770,14 @@ public class RegionCoprocessorHost
    * Invoked just before the rollback of a failed split is started
    * @throws IOException
    *
-  * Note: the logic moves to Master; it is unused in RS
-  */
+   * Note: the logic moves to Master; it is unused in RS
+   */
   @Deprecated
   public void preRollBackSplit(final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation(user) {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preRollBackSplit(ctx);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preRollBackSplit(this);
       }
     });
   }
@@ -773,15 +786,14 @@ public class RegionCoprocessorHost
    * Invoked just after the rollback of a failed split is done
    * @throws IOException
    *
-  * Note: the logic moves to Master; it is unused in RS
-  */
+   * Note: the logic moves to Master; it is unused in RS
+   */
   @Deprecated
   public void postRollBackSplit(final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation(user) {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postRollBackSplit(ctx);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postRollBackSplit(this);
       }
     });
   }
@@ -791,11 +803,10 @@ public class RegionCoprocessorHost
    * @throws IOException
    */
   public void postCompleteSplit() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postCompleteSplit(ctx);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postCompleteSplit(this);
       }
     });
   }
@@ -809,11 +820,10 @@ public class RegionCoprocessorHost
    */
   public boolean preGet(final Get get, final List<Cell> results)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preGetOp(ctx, get, results);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preGetOp(this, get, results);
       }
     });
   }
@@ -825,11 +835,10 @@ public class RegionCoprocessorHost
    */
   public void postGet(final Get get, final List<Cell> results)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postGetOp(ctx, get, results);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postGetOp(this, get, results);
       }
     });
   }
@@ -841,14 +850,13 @@ public class RegionCoprocessorHost
    * @exception IOException Exception
    */
   public Boolean preExists(final Get get) throws IOException {
-    return execOperationWithResult(true, false,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preExists(ctx, get, getResult()));
-      }
-    });
+    return execOperationWithResult(true, false, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Boolean>(regionObserverGetter) {
+          @Override
+          public Boolean call(RegionObserver observer) throws IOException {
+            return observer.preExists(this, get, getResult());
+          }
+        });
   }
 
   /**
@@ -859,14 +867,13 @@ public class RegionCoprocessorHost
    */
   public boolean postExists(final Get get, boolean exists)
       throws IOException {
-    return execOperationWithResult(exists,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.postExists(ctx, get, getResult()));
-      }
-    });
+    return execOperationWithResult(exists, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Boolean>(regionObserverGetter) {
+          @Override
+          public Boolean call(RegionObserver observer) throws IOException {
+            return observer.postExists(this, get, getResult());
+          }
+        });
   }
 
   /**
@@ -878,11 +885,10 @@ public class RegionCoprocessorHost
    */
   public boolean prePut(final Put put, final WALEdit edit, final Durability durability)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.prePut(ctx, put, edit, durability);
+      public void call(RegionObserver observer) throws IOException {
+        observer.prePut(this, put, edit, durability);
       }
     });
   }
@@ -899,11 +905,10 @@ public class RegionCoprocessorHost
    */
   public boolean prePrepareTimeStampForDeleteVersion(final Mutation mutation,
       final Cell kv, final byte[] byteNow, final Get get) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.prePrepareTimeStampForDeleteVersion(ctx, mutation, kv, byteNow, get);
+      public void call(RegionObserver observer) throws IOException {
+        observer.prePrepareTimeStampForDeleteVersion(this, mutation, kv, byteNow, get);
       }
     });
   }
@@ -916,11 +921,10 @@ public class RegionCoprocessorHost
    */
   public void postPut(final Put put, final WALEdit edit, final Durability durability)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postPut(ctx, put, edit, durability);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postPut(this, put, edit, durability);
       }
     });
   }
@@ -934,11 +938,10 @@ public class RegionCoprocessorHost
    */
   public boolean preDelete(final Delete delete, final WALEdit edit, final Durability durability)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preDelete(ctx, delete, edit, durability);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preDelete(this, delete, edit, durability);
       }
     });
   }
@@ -951,11 +954,10 @@ public class RegionCoprocessorHost
    */
   public void postDelete(final Delete delete, final WALEdit edit, final Durability durability)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postDelete(ctx, delete, edit, durability);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postDelete(this, delete, edit, durability);
       }
     });
   }
@@ -967,11 +969,10 @@ public class RegionCoprocessorHost
    */
   public boolean preBatchMutate(
       final MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preBatchMutate(ctx, miniBatchOp);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preBatchMutate(this, miniBatchOp);
       }
     });
   }
@@ -982,11 +983,10 @@ public class RegionCoprocessorHost
    */
   public void postBatchMutate(
       final MiniBatchOperationInProgress<Mutation> miniBatchOp) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postBatchMutate(ctx, miniBatchOp);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postBatchMutate(this, miniBatchOp);
       }
     });
   }
@@ -994,11 +994,10 @@ public class RegionCoprocessorHost
   public void postBatchMutateIndispensably(
       final MiniBatchOperationInProgress<Mutation> miniBatchOp, final boolean success)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postBatchMutateIndispensably(ctx, miniBatchOp, success);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postBatchMutateIndispensably(this, miniBatchOp, success);
       }
     });
   }
@@ -1018,15 +1017,14 @@ public class RegionCoprocessorHost
       final byte [] qualifier, final CompareOp compareOp,
       final ByteArrayComparable comparator, final Put put)
       throws IOException {
-    return execOperationWithResult(true, false,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preCheckAndPut(ctx, row, family, qualifier,
-          compareOp, comparator, put, getResult()));
-      }
-    });
+    return execOperationWithResult(true, false, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Boolean>(regionObserverGetter) {
+          @Override
+          public Boolean call(RegionObserver observer) throws IOException {
+            return observer.preCheckAndPut(this, row, family, qualifier,
+                compareOp, comparator, put, getResult());
+          }
+        });
   }
 
   /**
@@ -1043,15 +1041,14 @@ public class RegionCoprocessorHost
   public Boolean preCheckAndPutAfterRowLock(final byte[] row, final byte[] family,
       final byte[] qualifier, final CompareOp compareOp, final ByteArrayComparable comparator,
       final Put put) throws IOException {
-    return execOperationWithResult(true, false,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preCheckAndPutAfterRowLock(ctx, row, family, qualifier,
-          compareOp, comparator, put, getResult()));
-      }
-    });
+    return execOperationWithResult(true, false, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Boolean>(regionObserverGetter) {
+          @Override
+          public Boolean call(RegionObserver observer) throws IOException {
+            return observer.preCheckAndPutAfterRowLock(this, row, family, qualifier,
+                compareOp, comparator, put, getResult());
+          }
+        });
   }
 
   /**
@@ -1067,15 +1064,14 @@ public class RegionCoprocessorHost
       final byte [] qualifier, final CompareOp compareOp,
       final ByteArrayComparable comparator, final Put put,
       boolean result) throws IOException {
-    return execOperationWithResult(result,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.postCheckAndPut(ctx, row, family, qualifier,
-          compareOp, comparator, put, getResult()));
-      }
-    });
+    return execOperationWithResult(result, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Boolean>(regionObserverGetter) {
+          @Override
+          public Boolean call(RegionObserver observer) throws IOException {
+            return observer.postCheckAndPut(this, row, family, qualifier,
+                compareOp, comparator, put, getResult());
+          }
+        });
   }
 
   /**
@@ -1093,15 +1089,14 @@ public class RegionCoprocessorHost
       final byte [] qualifier, final CompareOp compareOp,
       final ByteArrayComparable comparator, final Delete delete)
       throws IOException {
-    return execOperationWithResult(true, false,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preCheckAndDelete(ctx, row, family,
-            qualifier, compareOp, comparator, delete, getResult()));
-      }
-    });
+    return execOperationWithResult(true, false, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Boolean>(regionObserverGetter) {
+          @Override
+          public Boolean call(RegionObserver observer) throws IOException {
+            return observer.preCheckAndDelete(this, row, family,
+                qualifier, compareOp, comparator, delete, getResult());
+          }
+        });
   }
 
   /**
@@ -1118,15 +1113,14 @@ public class RegionCoprocessorHost
   public Boolean preCheckAndDeleteAfterRowLock(final byte[] row, final byte[] family,
       final byte[] qualifier, final CompareOp compareOp, final ByteArrayComparable comparator,
       final Delete delete) throws IOException {
-    return execOperationWithResult(true, false,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preCheckAndDeleteAfterRowLock(ctx, row,
-              family, qualifier, compareOp, comparator, delete, getResult()));
-      }
-    });
+    return execOperationWithResult(true, false, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Boolean>(regionObserverGetter) {
+          @Override
+          public Boolean call(RegionObserver observer) throws IOException {
+            return observer.preCheckAndDeleteAfterRowLock(this, row,
+                family, qualifier, compareOp, comparator, delete, getResult());
+          }
+        });
   }
 
   /**
@@ -1142,15 +1136,14 @@ public class RegionCoprocessorHost
       final byte [] qualifier, final CompareOp compareOp,
       final ByteArrayComparable comparator, final Delete delete,
       boolean result) throws IOException {
-    return execOperationWithResult(result,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.postCheckAndDelete(ctx, row, family,
-            qualifier, compareOp, comparator, delete, getResult()));
-      }
-    });
+    return execOperationWithResult(result, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Boolean>(regionObserverGetter) {
+          @Override
+          public Boolean call(RegionObserver observer) throws IOException {
+            return observer.postCheckAndDelete(this, row, family,
+                qualifier, compareOp, comparator, delete, getResult());
+          }
+        });
   }
 
   /**
@@ -1160,14 +1153,13 @@ public class RegionCoprocessorHost
    * @throws IOException if an error occurred on the coprocessor
    */
   public Result preAppend(final Append append) throws IOException {
-    return execOperationWithResult(true, null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Result>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preAppend(ctx, append));
-      }
-    });
+    return execOperationWithResult(true, null, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Result>(regionObserverGetter) {
+          @Override
+          public Result call(RegionObserver observer) throws IOException {
+            return observer.preAppend(this, append);
+          }
+        });
   }
 
   /**
@@ -1177,14 +1169,13 @@ public class RegionCoprocessorHost
    * @throws IOException if an error occurred on the coprocessor
    */
   public Result preAppendAfterRowLock(final Append append) throws IOException {
-    return execOperationWithResult(true, null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Result>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preAppendAfterRowLock(ctx, append));
-      }
-    });
+    return execOperationWithResult(true, null, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Result>(regionObserverGetter) {
+          @Override
+          public Result call(RegionObserver observer) throws IOException {
+            return observer.preAppendAfterRowLock(this, append);
+          }
+        });
   }
 
   /**
@@ -1194,14 +1185,13 @@ public class RegionCoprocessorHost
    * @throws IOException if an error occurred on the coprocessor
    */
   public Result preIncrement(final Increment increment) throws IOException {
-    return execOperationWithResult(true, null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Result>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preIncrement(ctx, increment));
-      }
-    });
+    return execOperationWithResult(true, null, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Result>(regionObserverGetter) {
+          @Override
+          public Result call(RegionObserver observer) throws IOException {
+            return observer.preIncrement(this, increment);
+          }
+        });
   }
 
   /**
@@ -1211,14 +1201,13 @@ public class RegionCoprocessorHost
    * @throws IOException if an error occurred on the coprocessor
    */
   public Result preIncrementAfterRowLock(final Increment increment) throws IOException {
-    return execOperationWithResult(true, null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Result>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preIncrementAfterRowLock(ctx, increment));
-      }
-    });
+    return execOperationWithResult(true, null, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Result>(regionObserverGetter) {
+          @Override
+          public Result call(RegionObserver observer) throws IOException {
+            return observer.preIncrementAfterRowLock(this, increment);
+          }
+        });
   }
 
   /**
@@ -1227,12 +1216,11 @@ public class RegionCoprocessorHost
    * @throws IOException if an error occurred on the coprocessor
    */
   public Result postAppend(final Append append, final Result result) throws IOException {
-    return execOperationWithResult(result,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Result>() {
+    return execOperationWithResult(result, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Result>(regionObserverGetter) {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.postAppend(ctx, append, result));
+      public Result call(RegionObserver observer) throws IOException {
+        return observer.postAppend(this, append, result);
       }
     });
   }
@@ -1243,14 +1231,13 @@ public class RegionCoprocessorHost
    * @throws IOException if an error occurred on the coprocessor
    */
   public Result postIncrement(final Increment increment, Result result) throws IOException {
-    return execOperationWithResult(result,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Result>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.postIncrement(ctx, increment, getResult()));
-      }
-    });
+    return execOperationWithResult(result, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Result>(regionObserverGetter) {
+          @Override
+          public Result call(RegionObserver observer) throws IOException {
+            return observer.postIncrement(this, increment, getResult());
+          }
+        });
   }
 
   /**
@@ -1260,14 +1247,13 @@ public class RegionCoprocessorHost
    * @exception IOException Exception
    */
   public RegionScanner preScannerOpen(final Scan scan) throws IOException {
-    return execOperationWithResult(true, null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<RegionScanner>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preScannerOpen(ctx, scan, getResult()));
-      }
-    });
+    return execOperationWithResult(true, null, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, RegionScanner>(regionObserverGetter) {
+          @Override
+          public RegionScanner call(RegionObserver observer) throws IOException {
+            return observer.preScannerOpen(this, scan, getResult());
+          }
+        });
   }
 
   /**
@@ -1277,14 +1263,13 @@ public class RegionCoprocessorHost
    */
   public KeyValueScanner preStoreScannerOpen(final Store store, final Scan scan,
       final NavigableSet<byte[]> targetCols, final long readPt) throws IOException {
-    return execOperationWithResult(null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<KeyValueScanner>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preStoreScannerOpen(ctx, store, scan, targetCols, getResult(), readPt));
-      }
-    });
+    return execOperationWithResult(null, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, KeyValueScanner>(regionObserverGetter) {
+          @Override
+          public KeyValueScanner call(RegionObserver observer) throws IOException {
+            return observer.preStoreScannerOpen(this, store, scan, targetCols, getResult(), readPt);
+          }
+        });
   }
 
   /**
@@ -1294,14 +1279,13 @@ public class RegionCoprocessorHost
    * @exception IOException Exception
    */
   public RegionScanner postScannerOpen(final Scan scan, RegionScanner s) throws IOException {
-    return execOperationWithResult(s,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<RegionScanner>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.postScannerOpen(ctx, scan, getResult()));
-      }
-    });
+    return execOperationWithResult(s, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, RegionScanner>(regionObserverGetter) {
+          @Override
+          public RegionScanner call(RegionObserver observer) throws IOException {
+            return observer.postScannerOpen(this, scan, getResult());
+          }
+        });
   }
 
   /**
@@ -1314,14 +1298,13 @@ public class RegionCoprocessorHost
    */
   public Boolean preScannerNext(final InternalScanner s,
       final List<Result> results, final int limit) throws IOException {
-    return execOperationWithResult(true, false,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preScannerNext(ctx, s, results, limit, getResult()));
-      }
-    });
+    return execOperationWithResult(true, false, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Boolean>(regionObserverGetter) {
+          @Override
+          public Boolean call(RegionObserver observer) throws IOException {
+            return observer.preScannerNext(this, s, results, limit, getResult());
+          }
+        });
   }
 
   /**
@@ -1335,14 +1318,13 @@ public class RegionCoprocessorHost
   public boolean postScannerNext(final InternalScanner s,
       final List<Result> results, final int limit, boolean hasMore)
       throws IOException {
-    return execOperationWithResult(hasMore,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.postScannerNext(ctx, s, results, limit, getResult()));
-      }
-    });
+    return execOperationWithResult(hasMore, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Boolean>(regionObserverGetter) {
+          @Override
+          public Boolean call(RegionObserver observer) throws IOException {
+            return observer.postScannerNext(this, s, results, limit, getResult());
+          }
+        });
   }
 
   /**
@@ -1357,14 +1339,13 @@ public class RegionCoprocessorHost
       throws IOException {
     // short circuit for performance
     if (!hasCustomPostScannerFilterRow) return true;
-    return execOperationWithResult(true,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.postScannerFilterRow(ctx, s, curRowCell, getResult()));
-      }
-    });
+    return execOperationWithResult(true, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Boolean>(regionObserverGetter) {
+          @Override
+          public Boolean call(RegionObserver observer) throws IOException {
+            return observer.postScannerFilterRow(this, s, curRowCell, getResult());
+          }
+        });
   }
 
   /**
@@ -1373,11 +1354,10 @@ public class RegionCoprocessorHost
    * @exception IOException Exception
    */
   public boolean preScannerClose(final InternalScanner s) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preScannerClose(ctx, s);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preScannerClose(this, s);
       }
     });
   }
@@ -1386,11 +1366,10 @@ public class RegionCoprocessorHost
    * @exception IOException Exception
    */
   public void postScannerClose(final InternalScanner s) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postScannerClose(ctx, s);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postScannerClose(this, s);
       }
     });
   }
@@ -1401,11 +1380,10 @@ public class RegionCoprocessorHost
    * @throws IOException Exception
    */
   public void preReplayWALs(final HRegionInfo info, final Path edits) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-        throws IOException {
-        oserver.preReplayWALs(ctx, info, edits);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preReplayWALs(this, info, edits);
       }
     });
   }
@@ -1416,11 +1394,10 @@ public class RegionCoprocessorHost
    * @throws IOException Exception
    */
   public void postReplayWALs(final HRegionInfo info, final Path edits) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-        throws IOException {
-        oserver.postReplayWALs(ctx, info, edits);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postReplayWALs(this, info, edits);
       }
     });
   }
@@ -1434,11 +1411,10 @@ public class RegionCoprocessorHost
    */
   public boolean preWALRestore(final HRegionInfo info, final WALKey logKey,
       final WALEdit logEdit) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preWALRestore(ctx, info, logKey, logEdit);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preWALRestore(this, info, logKey, logEdit);
       }
     });
   }
@@ -1451,11 +1427,10 @@ public class RegionCoprocessorHost
    */
   public void postWALRestore(final HRegionInfo info, final WALKey logKey, final WALEdit logEdit)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postWALRestore(ctx, info, logKey, logEdit);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postWALRestore(this, info, logKey, logEdit);
       }
     });
   }
@@ -1466,31 +1441,28 @@ public class RegionCoprocessorHost
    * @throws IOException
    */
   public boolean preBulkLoadHFile(final List<Pair<byte[], String>> familyPaths) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preBulkLoadHFile(ctx, familyPaths);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preBulkLoadHFile(this, familyPaths);
       }
     });
   }
 
   public boolean preCommitStoreFile(final byte[] family, final List<Pair<Path, Path>> pairs)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    return execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.preCommitStoreFile(ctx, family, pairs);
+      public void call(RegionObserver observer) throws IOException {
+        observer.preCommitStoreFile(this, family, pairs);
       }
     });
   }
   public void postCommitStoreFile(final byte[] family, Path srcPath, Path dstPath) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postCommitStoreFile(ctx, family, srcPath, dstPath);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postCommitStoreFile(this, family, srcPath, dstPath);
       }
     });
   }
@@ -1504,32 +1476,29 @@ public class RegionCoprocessorHost
    */
   public boolean postBulkLoadHFile(final List<Pair<byte[], String>> familyPaths,
       Map<byte[], List<Path>> map, boolean hasLoaded) throws IOException {
-    return execOperationWithResult(hasLoaded,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Boolean>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.postBulkLoadHFile(ctx, familyPaths, map, getResult()));
-      }
-    });
+    return execOperationWithResult(hasLoaded, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Boolean>(regionObserverGetter) {
+          @Override
+          public Boolean call(RegionObserver observer) throws IOException {
+            return observer.postBulkLoadHFile(this, familyPaths, map, getResult());
+          }
+        });
   }
 
   public void postStartRegionOperation(final Operation op) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postStartRegionOperation(ctx, op);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postStartRegionOperation(this, op);
       }
     });
   }
 
   public void postCloseRegionOperation(final Operation op) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new RegionOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionObserverOperation() {
       @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postCloseRegionOperation(ctx, op);
+      public void call(RegionObserver observer) throws IOException {
+        observer.postCloseRegionOperation(this, op);
       }
     });
   }
@@ -1548,14 +1517,14 @@ public class RegionCoprocessorHost
   public StoreFileReader preStoreFileReaderOpen(final FileSystem fs, final Path p,
       final FSDataInputStreamWrapper in, final long size, final CacheConfig cacheConf,
       final Reference r) throws IOException {
-    return execOperationWithResult(null,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<StoreFileReader>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preStoreFileReaderOpen(ctx, fs, p, in, size, cacheConf, r, getResult()));
-      }
-    });
+    return execOperationWithResult(null, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, StoreFileReader>(regionObserverGetter) {
+          @Override
+          public StoreFileReader call(RegionObserver observer) throws IOException {
+            return observer.preStoreFileReaderOpen(this, fs, p, in, size, cacheConf, r,
+                getResult());
+          }
+        });
   }
 
   /**
@@ -1572,192 +1541,56 @@ public class RegionCoprocessorHost
   public StoreFileReader postStoreFileReaderOpen(final FileSystem fs, final Path p,
       final FSDataInputStreamWrapper in, final long size, final CacheConfig cacheConf,
       final Reference r, final StoreFileReader reader) throws IOException {
-    return execOperationWithResult(reader,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<StoreFileReader>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.postStoreFileReaderOpen(ctx, fs, p, in, size, cacheConf, r, getResult()));
-      }
-    });
+    return execOperationWithResult(reader, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, StoreFileReader>(regionObserverGetter) {
+          @Override
+          public StoreFileReader call(RegionObserver observer) throws IOException {
+            return observer.postStoreFileReaderOpen(this, fs, p, in, size, cacheConf, r,
+                getResult());
+          }
+        });
   }
 
   public Cell postMutationBeforeWAL(final MutationType opType, final Mutation mutation,
       final Cell oldCell, Cell newCell) throws IOException {
-    return execOperationWithResult(newCell,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<Cell>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.postMutationBeforeWAL(ctx, opType, mutation, oldCell, getResult()));
-      }
-    });
+    return execOperationWithResult(newCell, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, Cell>(regionObserverGetter) {
+          @Override
+          public Cell call(RegionObserver observer) throws IOException {
+            return observer.postMutationBeforeWAL(this, opType, mutation, oldCell, getResult());
+          }
+        });
   }
 
   public Message preEndpointInvocation(final Service service, final String methodName,
       Message request) throws IOException {
-    return execOperationWithResult(request,
-        coprocessors.isEmpty() ? null : new EndpointOperationWithResult<Message>() {
-      @Override
-      public void call(EndpointObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.preEndpointInvocation(ctx, service, methodName, getResult()));
-      }
-    });
+    return execOperationWithResult(request, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<EndpointObserver, Message>(endpointObserverGetter) {
+          @Override
+          public Message call(EndpointObserver observer) throws IOException {
+            return observer.preEndpointInvocation(this, service, methodName, getResult());
+          }
+        });
   }
 
   public void postEndpointInvocation(final Service service, final String methodName,
       final Message request, final Message.Builder responseBuilder) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new EndpointOperation() {
+    execOperation(coprocessors.isEmpty() ? null :
+        new ObserverOperationWithoutResult<EndpointObserver>(endpointObserverGetter) {
       @Override
-      public void call(EndpointObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        oserver.postEndpointInvocation(ctx, service, methodName, request, responseBuilder);
+      public void call(EndpointObserver observer) throws IOException {
+        observer.postEndpointInvocation(this, service, methodName, request, responseBuilder);
       }
     });
   }
 
   public DeleteTracker postInstantiateDeleteTracker(DeleteTracker tracker) throws IOException {
-    return execOperationWithResult(tracker,
-        coprocessors.isEmpty() ? null : new RegionOperationWithResult<DeleteTracker>() {
-      @Override
-      public void call(RegionObserver oserver, ObserverContext<RegionCoprocessorEnvironment> ctx)
-          throws IOException {
-        setResult(oserver.postInstantiateDeleteTracker(ctx, getResult()));
-      }
-    });
-  }
-
-  private static abstract class CoprocessorOperation
-      extends ObserverContext<RegionCoprocessorEnvironment> {
-    public CoprocessorOperation() {
-      this(RpcServer.getRequestUser());
-    }
-
-    public CoprocessorOperation(User user) {
-      super(user);
-    }
-
-    public abstract void call(Coprocessor observer,
-        ObserverContext<RegionCoprocessorEnvironment> ctx) throws IOException;
-    public abstract boolean hasCall(Coprocessor observer);
-    public void postEnvCall(RegionEnvironment env) { }
-  }
-
-  private static abstract class RegionOperation extends CoprocessorOperation {
-    public RegionOperation() {
-    }
-
-    public RegionOperation(User user) {
-      super(user);
-    }
-
-    public abstract void call(RegionObserver observer,
-        ObserverContext<RegionCoprocessorEnvironment> ctx) throws IOException;
-
-    public boolean hasCall(Coprocessor observer) {
-      return observer instanceof RegionObserver;
-    }
-
-    public void call(Coprocessor observer, ObserverContext<RegionCoprocessorEnvironment> ctx)
-        throws IOException {
-      call((RegionObserver)observer, ctx);
-    }
-  }
-
-  private static abstract class RegionOperationWithResult<T> extends RegionOperation {
-    public RegionOperationWithResult() {
-    }
-
-    public RegionOperationWithResult(User user) {
-      super (user);
-    }
-
-    private T result = null;
-    public void setResult(final T result) { this.result = result; }
-    public T getResult() { return this.result; }
-  }
-
-  private static abstract class EndpointOperation extends CoprocessorOperation {
-    public abstract void call(EndpointObserver observer,
-        ObserverContext<RegionCoprocessorEnvironment> ctx) throws IOException;
-
-    public boolean hasCall(Coprocessor observer) {
-      return observer instanceof EndpointObserver;
-    }
-
-    public void call(Coprocessor observer, ObserverContext<RegionCoprocessorEnvironment> ctx)
-        throws IOException {
-      call((EndpointObserver)observer, ctx);
-    }
-  }
-
-  private static abstract class EndpointOperationWithResult<T> extends EndpointOperation {
-    private T result = null;
-    public void setResult(final T result) { this.result = result; }
-    public T getResult() { return this.result; }
-  }
-
-  private boolean execOperation(final CoprocessorOperation ctx)
-      throws IOException {
-    return execOperation(true, ctx);
-  }
-
-  private <T> T execOperationWithResult(final T defaultValue,
-      final RegionOperationWithResult<T> ctx) throws IOException {
-    if (ctx == null) return defaultValue;
-    ctx.setResult(defaultValue);
-    execOperation(true, ctx);
-    return ctx.getResult();
-  }
-
-  private <T> T execOperationWithResult(final boolean ifBypass, final T defaultValue,
-      final RegionOperationWithResult<T> ctx) throws IOException {
-    boolean bypass = false;
-    T result = defaultValue;
-    if (ctx != null) {
-      ctx.setResult(defaultValue);
-      bypass = execOperation(true, ctx);
-      result = ctx.getResult();
-    }
-    return bypass == ifBypass ? result : null;
-  }
-
-  private <T> T execOperationWithResult(final T defaultValue,
-      final EndpointOperationWithResult<T> ctx) throws IOException {
-    if (ctx == null) return defaultValue;
-    ctx.setResult(defaultValue);
-    execOperation(true, ctx);
-    return ctx.getResult();
-  }
-
-  private boolean execOperation(final boolean earlyExit, final CoprocessorOperation ctx)
-      throws IOException {
-    boolean bypass = false;
-    List<RegionEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      RegionEnvironment env = envs.get(i);
-      Coprocessor observer = env.getInstance();
-      if (ctx.hasCall(observer)) {
-        ctx.prepare(env);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          ctx.call(observer, ctx);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        bypass |= ctx.shouldBypass();
-        if (earlyExit && ctx.shouldComplete()) {
-          break;
-        }
-      }
-
-      ctx.postEnvCall(env);
-    }
-    return bypass;
+    return execOperationWithResult(tracker, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionObserver, DeleteTracker>(regionObserverGetter) {
+          @Override
+          public DeleteTracker call(RegionObserver observer) throws IOException {
+            return observer.postInstantiateDeleteTracker(this, getResult());
+          }
+        });
   }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerCoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerCoprocessorHost.java
index 9bcf201237..b22b861d0e 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerCoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerCoprocessorHost.java
@@ -19,7 +19,6 @@
 package org.apache.hadoop.hbase.regionserver;
 
 import java.io.IOException;
-import java.util.Comparator;
 import java.util.List;
 
 import org.apache.commons.lang.ClassUtils;
@@ -27,8 +26,6 @@ import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.CellScanner;
-import org.apache.hadoop.hbase.Coprocessor;
-import org.apache.hadoop.hbase.CoprocessorEnvironment;
 import org.apache.hadoop.hbase.HBaseInterfaceAudience;
 import org.apache.hadoop.hbase.MetaMutationAnnotation;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
@@ -37,10 +34,10 @@ import org.apache.hadoop.hbase.client.Mutation;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.MetricsCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.RegionServerCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionServerCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionServerObserver;
 import org.apache.hadoop.hbase.coprocessor.SingletonCoprocessorService;
-import org.apache.hadoop.hbase.ipc.RpcServer;
 import org.apache.hadoop.hbase.metrics.MetricRegistry;
 import org.apache.hadoop.hbase.replication.ReplicationEndpoint;
 import org.apache.hadoop.hbase.security.User;
@@ -49,12 +46,15 @@ import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.WALEntry;
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
 @InterfaceStability.Evolving
 public class RegionServerCoprocessorHost extends
-    CoprocessorHost<RegionServerCoprocessorHost.RegionServerEnvironment> {
+    CoprocessorHost<RegionServerCoprocessor, RegionServerCoprocessorEnvironment> {
 
   private static final Log LOG = LogFactory.getLog(RegionServerCoprocessorHost.class);
 
   private RegionServerServices rsServices;
 
+  private ObserverGetter<RegionServerCoprocessor, RegionServerObserver>
+      regionServerObserverGetter = RegionServerCoprocessor::getRegionServerObserver;
+
   public RegionServerCoprocessorHost(RegionServerServices rsServices,
       Configuration conf) {
     super(rsServices);
@@ -74,47 +74,69 @@ public class RegionServerCoprocessorHost extends
   }
 
   @Override
-  public RegionServerEnvironment createEnvironment(Class<?> implClass,
-      Coprocessor instance, int priority, int sequence, Configuration conf) {
+  public RegionServerEnvironment createEnvironment(
+      Class<? extends RegionServerCoprocessor> implClass, RegionServerCoprocessor instance,
+      int priority, int sequence, Configuration conf) {
     return new RegionServerEnvironment(implClass, instance, priority,
       sequence, conf, this.rsServices);
   }
 
+  @Override
+  public boolean checkCoprocessorType(Class<?> implClass) {
+    return RegionServerCoprocessor.class.isAssignableFrom(implClass);
+  }
+
+  private ObserverGetter<RegionServerCoprocessor, RegionServerObserver> rsObserverGetter =
+      RegionServerCoprocessor::getRegionServerObserver;
+
+  abstract class RegionServerObserverOperation extends
+      ObserverOperationWithoutResult<RegionServerObserver> {
+    public RegionServerObserverOperation() {
+      super(rsObserverGetter);
+    }
+
+    public RegionServerObserverOperation(User user) {
+      super(rsObserverGetter, user);
+    }
+  }
+
+  //////////////////////////////////////////////////////////////////////////////////////////////////
+  // RegionServerObserver operations
+  //////////////////////////////////////////////////////////////////////////////////////////////////
+
   public void preStop(String message, User user) throws IOException {
     // While stopping the region server all coprocessors method should be executed first then the
     // coprocessor should be cleaned up.
-    execShutdown(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execShutdown(coprocessors.isEmpty() ? null : new RegionServerObserverOperation(user) {
       @Override
-      public void call(RegionServerObserver oserver,
-          ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-        oserver.preStopRegionServer(ctx);
+      public void call(RegionServerObserver observer) throws IOException {
+        observer.preStopRegionServer(this);
       }
+
       @Override
-      public void postEnvCall(RegionServerEnvironment env) {
+      public void postEnvCall() {
         // invoke coprocessor stop method
-        shutdown(env);
+        shutdown(this.getEnvironment());
       }
     });
   }
 
   public boolean preMerge(final HRegion regionA, final HRegion regionB, final User user) throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    return execOperation(coprocessors.isEmpty() ? null : new RegionServerObserverOperation(user) {
       @Override
-      public void call(RegionServerObserver oserver,
-          ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-        oserver.preMerge(ctx, regionA, regionB);
+      public void call(RegionServerObserver observer) throws IOException {
+        observer.preMerge(this, regionA, regionB);
       }
     });
   }
 
   public void postMerge(final HRegion regionA, final HRegion regionB, final HRegion mergedRegion,
-                        final User user)
+      final User user)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new RegionServerObserverOperation(user) {
       @Override
-      public void call(RegionServerObserver oserver,
-          ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-        oserver.postMerge(ctx, regionA, regionB, mergedRegion);
+      public void call(RegionServerObserver observer) throws IOException {
+        observer.postMerge(this, regionA, regionB, mergedRegion);
       }
     });
   }
@@ -122,240 +144,117 @@ public class RegionServerCoprocessorHost extends
   public boolean preMergeCommit(final HRegion regionA, final HRegion regionB,
       final @MetaMutationAnnotation List<Mutation> metaEntries, final User user)
       throws IOException {
-    return execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    return execOperation(coprocessors.isEmpty() ? null : new RegionServerObserverOperation(user) {
       @Override
-      public void call(RegionServerObserver oserver,
-          ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-        oserver.preMergeCommit(ctx, regionA, regionB, metaEntries);
+      public void call(RegionServerObserver observer) throws IOException {
+        observer.preMergeCommit(this, regionA, regionB, metaEntries);
       }
     });
   }
 
   public void postMergeCommit(final HRegion regionA, final HRegion regionB,
       final HRegion mergedRegion, final User user) throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new RegionServerObserverOperation(user) {
       @Override
-      public void call(RegionServerObserver oserver,
-          ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-        oserver.postMergeCommit(ctx, regionA, regionB, mergedRegion);
+      public void call(RegionServerObserver observer) throws IOException {
+        observer.postMergeCommit(this, regionA, regionB, mergedRegion);
       }
     });
   }
 
   public void preRollBackMerge(final HRegion regionA, final HRegion regionB, final User user)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new RegionServerObserverOperation(user) {
       @Override
-      public void call(RegionServerObserver oserver,
-          ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-        oserver.preRollBackMerge(ctx, regionA, regionB);
+      public void call(RegionServerObserver observer) throws IOException {
+        observer.preRollBackMerge(this, regionA, regionB);
       }
     });
   }
 
   public void postRollBackMerge(final HRegion regionA, final HRegion regionB, final User user)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation(user) {
+    execOperation(coprocessors.isEmpty() ? null : new RegionServerObserverOperation(user) {
       @Override
-      public void call(RegionServerObserver oserver,
-          ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-        oserver.postRollBackMerge(ctx, regionA, regionB);
+      public void call(RegionServerObserver observer) throws IOException {
+        observer.postRollBackMerge(this, regionA, regionB);
       }
     });
   }
 
   public void preRollWALWriterRequest() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionServerObserverOperation() {
       @Override
-      public void call(RegionServerObserver oserver,
-          ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-        oserver.preRollWALWriterRequest(ctx);
+      public void call(RegionServerObserver observer) throws IOException {
+        observer.preRollWALWriterRequest(this);
       }
     });
   }
 
   public void postRollWALWriterRequest() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionServerObserverOperation() {
       @Override
-      public void call(RegionServerObserver oserver,
-          ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-        oserver.postRollWALWriterRequest(ctx);
+      public void call(RegionServerObserver observer) throws IOException {
+        observer.postRollWALWriterRequest(this);
       }
     });
   }
 
   public void preReplicateLogEntries(final List<WALEntry> entries, final CellScanner cells)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionServerObserverOperation() {
       @Override
-      public void call(RegionServerObserver oserver,
-          ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-        oserver.preReplicateLogEntries(ctx, entries, cells);
+      public void call(RegionServerObserver observer) throws IOException {
+        observer.preReplicateLogEntries(this, entries, cells);
       }
     });
   }
 
   public void postReplicateLogEntries(final List<WALEntry> entries, final CellScanner cells)
       throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionServerObserverOperation() {
       @Override
-      public void call(RegionServerObserver oserver,
-          ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-        oserver.postReplicateLogEntries(ctx, entries, cells);
+      public void call(RegionServerObserver observer) throws IOException {
+        observer.postReplicateLogEntries(this, entries, cells);
       }
     });
   }
 
-  public ReplicationEndpoint postCreateReplicationEndPoint(final ReplicationEndpoint endpoint)
-      throws IOException {
-    return execOperationWithResult(endpoint, coprocessors.isEmpty() ? null
-        : new CoprocessOperationWithResult<ReplicationEndpoint>() {
-          @Override
-          public void call(RegionServerObserver oserver,
-              ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-            setResult(oserver.postCreateReplicationEndPoint(ctx, getResult()));
-          }
-        });
-  }
-
   public void preClearCompactionQueues() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionServerObserverOperation() {
       @Override
-      public void call(RegionServerObserver oserver,
-                       ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-        oserver.preClearCompactionQueues(ctx);
+      public void call(RegionServerObserver observer) throws IOException {
+        observer.preClearCompactionQueues(this);
       }
     });
   }
 
   public void postClearCompactionQueues() throws IOException {
-    execOperation(coprocessors.isEmpty() ? null : new CoprocessorOperation() {
+    execOperation(coprocessors.isEmpty() ? null : new RegionServerObserverOperation() {
       @Override
-      public void call(RegionServerObserver oserver,
-                       ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
-        oserver.postClearCompactionQueues(ctx);
+      public void call(RegionServerObserver observer) throws IOException {
+        observer.postClearCompactionQueues(this);
       }
     });
   }
 
-  private <T> T execOperationWithResult(final T defaultValue,
-      final CoprocessOperationWithResult<T> ctx) throws IOException {
-    if (ctx == null)
-      return defaultValue;
-    ctx.setResult(defaultValue);
-    execOperation(ctx);
-    return ctx.getResult();
-  }
-
-  private static abstract class CoprocessorOperation
-      extends ObserverContext<RegionServerCoprocessorEnvironment> {
-    public CoprocessorOperation() {
-      this(RpcServer.getRequestUser());
-    }
-
-    public CoprocessorOperation(User user) {
-      super(user);
-    }
-
-    public abstract void call(RegionServerObserver oserver,
-        ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException;
-
-    public void postEnvCall(RegionServerEnvironment env) {
-    }
-  }
-
-  private static abstract class CoprocessOperationWithResult<T> extends CoprocessorOperation {
-    private T result = null;
-
-    public void setResult(final T result) {
-      this.result = result;
-    }
-
-    public T getResult() {
-      return this.result;
-    }
-  }
-
-  private boolean execOperation(final CoprocessorOperation ctx) throws IOException {
-    if (ctx == null) return false;
-    boolean bypass = false;
-    List<RegionServerEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      RegionServerEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof RegionServerObserver) {
-        ctx.prepare(env);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          ctx.call((RegionServerObserver)env.getInstance(), ctx);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        bypass |= ctx.shouldBypass();
-        if (ctx.shouldComplete()) {
-          break;
-        }
-      }
-      ctx.postEnvCall(env);
-    }
-    return bypass;
-  }
-
-  /**
-   * RegionServer coprocessor classes can be configured in any order, based on that priority is set
-   * and chained in a sorted order. For preStop(), coprocessor methods are invoked in call() and
-   * environment is shutdown in postEnvCall(). <br>
-   * Need to execute all coprocessor methods first then postEnvCall(), otherwise some coprocessors
-   * may remain shutdown if any exception occurs during next coprocessor execution which prevent
-   * RegionServer stop. (Refer:
-   * <a href="https://issues.apache.org/jira/browse/HBASE-16663">HBASE-16663</a>
-   * @param ctx CoprocessorOperation
-   * @return true if bypaas coprocessor execution, false if not.
-   * @throws IOException
-   */
-  private boolean execShutdown(final CoprocessorOperation ctx) throws IOException {
-    if (ctx == null) return false;
-    boolean bypass = false;
-    List<RegionServerEnvironment> envs = coprocessors.get();
-    int envsSize = envs.size();
-    // Iterate the coprocessors and execute CoprocessorOperation's call()
-    for (int i = 0; i < envsSize; i++) {
-      RegionServerEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof RegionServerObserver) {
-        ctx.prepare(env);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          ctx.call((RegionServerObserver) env.getInstance(), ctx);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        bypass |= ctx.shouldBypass();
-        if (ctx.shouldComplete()) {
-          break;
-        }
+  public ReplicationEndpoint postCreateReplicationEndPoint(final ReplicationEndpoint endpoint)
+      throws IOException {
+    return execOperationWithResult(endpoint, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<RegionServerObserver, ReplicationEndpoint>(
+            rsObserverGetter) {
+      @Override
+      public ReplicationEndpoint call(RegionServerObserver observer) throws IOException {
+        return observer.postCreateReplicationEndPoint(this, getResult());
       }
-    }
-
-    // Iterate the coprocessors and execute CoprocessorOperation's postEnvCall()
-    for (int i = 0; i < envsSize; i++) {
-      RegionServerEnvironment env = envs.get(i);
-      ctx.postEnvCall(env);
-    }
-    return bypass;
+    });
   }
 
   /**
    * Coprocessor environment extension providing access to region server
    * related services.
    */
-  static class RegionServerEnvironment extends CoprocessorHost.Environment
+  static class RegionServerEnvironment extends CoprocessorHost.Environment<RegionServerCoprocessor>
       implements RegionServerCoprocessorEnvironment {
     private final RegionServerServices regionServerServices;
     private final MetricRegistry metricRegistry;
@@ -363,7 +262,7 @@ public class RegionServerCoprocessorHost extends
     @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="BC_UNCONFIRMED_CAST",
         justification="Intentional; FB has trouble detecting isAssignableFrom")
     public RegionServerEnvironment(final Class<?> implClass,
-        final Coprocessor impl, final int priority, final int seq,
+        final RegionServerCoprocessor impl, final int priority, final int seq,
         final Configuration conf, final RegionServerServices services) {
       super(impl, priority, seq, conf);
       this.regionServerServices = services;
@@ -371,7 +270,7 @@ public class RegionServerCoprocessorHost extends
         Class<?> c = (Class<?>) itf;
         if (SingletonCoprocessorService.class.isAssignableFrom(c)) {// FindBugs: BC_UNCONFIRMED_CAST
           this.regionServerServices.registerService(
-            ((SingletonCoprocessorService) impl).getService());
+              ((SingletonCoprocessorService) impl).getService());
           break;
         }
       }
@@ -395,27 +294,4 @@ public class RegionServerCoprocessorHost extends
       MetricsCoprocessor.removeRegistry(metricRegistry);
     }
   }
-
-  /**
-   * Environment priority comparator. Coprocessors are chained in sorted
-   * order.
-   */
-  static class EnvironmentPriorityComparator implements
-      Comparator<CoprocessorEnvironment> {
-    @Override
-    public int compare(final CoprocessorEnvironment env1,
-        final CoprocessorEnvironment env2) {
-      if (env1.getPriority() < env2.getPriority()) {
-        return -1;
-      } else if (env1.getPriority() > env2.getPriority()) {
-        return 1;
-      }
-      if (env1.getLoadSequence() < env2.getLoadSequence()) {
-        return -1;
-      } else if (env1.getLoadSequence() > env2.getLoadSequence()) {
-        return 1;
-      }
-      return 0;
-    }
-  }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SecureBulkLoadManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SecureBulkLoadManager.java
index 5fde5764ae..7ccdbab084 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SecureBulkLoadManager.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SecureBulkLoadManager.java
@@ -32,7 +32,9 @@ import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.client.Connection;
 import org.apache.hadoop.hbase.coprocessor.BulkLoadObserver;
+import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.ipc.RpcServer;
 import org.apache.hadoop.hbase.shaded.protobuf.generated.ClientProtos;
@@ -139,10 +141,12 @@ public class SecureBulkLoadManager {
       throws IOException {
     List<BulkLoadObserver> bulkLoadObservers = getBulkLoadObservers(region);
 
+    // TODO: Handle this in RegionCoprocessorHost. RegionCH handles three kinds of Coprocs -
+    // RegionObserver, EndpointObserver, BulkLoadObserver.
     if (bulkLoadObservers != null && bulkLoadObservers.size() != 0) {
       ObserverContext<RegionCoprocessorEnvironment> ctx = new ObserverContext<>(getActiveUser());
-      ctx.prepare((RegionCoprocessorEnvironment) region.getCoprocessorHost()
-          .findCoprocessorEnvironment(BulkLoadObserver.class).get(0));
+      ctx.prepare(region.getCoprocessorHost().findCoprocessorEnvironment(
+          BulkLoadObserver.class).get(0));
 
       for (BulkLoadObserver bulkLoadObserver : bulkLoadObservers) {
         bulkLoadObserver.prePrepareBulkLoad(ctx, request);
@@ -162,8 +166,8 @@ public class SecureBulkLoadManager {
 
     if (bulkLoadObservers != null && bulkLoadObservers.size() != 0) {
       ObserverContext<RegionCoprocessorEnvironment> ctx = new ObserverContext<>(getActiveUser());
-      ctx.prepare((RegionCoprocessorEnvironment) region.getCoprocessorHost()
-        .findCoprocessorEnvironment(BulkLoadObserver.class).get(0));
+      ctx.prepare(region.getCoprocessorHost().findCoprocessorEnvironment(
+          BulkLoadObserver.class).get(0));
 
       for (BulkLoadObserver bulkLoadObserver : bulkLoadObservers) {
         bulkLoadObserver.preCleanupBulkLoad(ctx, request);
@@ -270,8 +274,7 @@ public class SecureBulkLoadManager {
 
   private List<BulkLoadObserver> getBulkLoadObservers(Region region) {
     List<BulkLoadObserver> coprocessorList =
-        region.getCoprocessorHost().findCoprocessors(BulkLoadObserver.class);
-
+        region.getCoprocessorHost().getObservers(RegionCoprocessor::getBulkLoadObserver);
     return coprocessorList;
   }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCoprocessorHost.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCoprocessorHost.java
index a531e83e2e..a32e52c042 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCoprocessorHost.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCoprocessorHost.java
@@ -21,16 +21,14 @@
 package org.apache.hadoop.hbase.regionserver.wal;
 
 import java.io.IOException;
-import java.util.List;
 
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.hbase.Coprocessor;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.MetricsCoprocessor;
-import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.WALCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.WALCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.WALObserver;
 import org.apache.hadoop.hbase.metrics.MetricRegistry;
@@ -43,12 +41,12 @@ import org.apache.hadoop.hbase.wal.WALKey;
  */
 @InterfaceAudience.Private
 public class WALCoprocessorHost
-    extends CoprocessorHost<WALCoprocessorHost.WALEnvironment> {
+    extends CoprocessorHost<WALCoprocessor, WALCoprocessorEnvironment> {
 
   /**
    * Encapsulation of the environment of each coprocessor
    */
-  static class WALEnvironment extends CoprocessorHost.Environment
+  static class WALEnvironment extends CoprocessorHost.Environment<WALCoprocessor>
     implements WALCoprocessorEnvironment {
 
     private final WAL wal;
@@ -69,7 +67,7 @@ public class WALCoprocessorHost
      * @param conf configuration
      * @param wal WAL
      */
-    public WALEnvironment(Class<?> implClass, final Coprocessor impl,
+    public WALEnvironment(Class<?> implClass, final WALCoprocessor impl,
         final int priority, final int seq, final Configuration conf,
         final WAL wal) {
       super(impl, priority, seq, conf);
@@ -110,13 +108,27 @@ public class WALCoprocessorHost
   }
 
   @Override
-  public WALEnvironment createEnvironment(final Class<?> implClass,
-      final Coprocessor instance, final int priority, final int seq,
-      final Configuration conf) {
-    return new WALEnvironment(implClass, instance, priority, seq, conf,
-        this.wal);
+  public WALEnvironment createEnvironment(final Class<? extends WALCoprocessor> implClass,
+      final WALCoprocessor instance, final int priority, final int seq, final Configuration conf) {
+    return new WALEnvironment(implClass, instance, priority, seq, conf, this.wal);
   }
 
+  @Override
+  public boolean checkCoprocessorType(Class<?> implClass) {
+    return WALCoprocessor.class.isAssignableFrom(implClass);
+  }
+
+  private ObserverGetter<WALCoprocessor, WALObserver> walObserverGetter =
+      WALCoprocessor::getWALObserver;
+
+  abstract class WALObserverOperation extends
+      ObserverOperationWithoutResult<WALObserver> {
+    public WALObserverOperation() {
+      super(walObserverGetter);
+    }
+  }
+
+
   /**
    * @param info
    * @param logKey
@@ -126,32 +138,13 @@ public class WALCoprocessorHost
    */
   public boolean preWALWrite(final HRegionInfo info, final WALKey logKey, final WALEdit logEdit)
       throws IOException {
-    boolean bypass = false;
-    if (this.coprocessors == null || this.coprocessors.isEmpty()) return bypass;
-    ObserverContext<WALCoprocessorEnvironment> ctx = null;
-    List<WALEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      WALEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof WALObserver) {
-        final WALObserver observer = (WALObserver)env.getInstance();
-        ctx = ObserverContext.createAndPrepare(env, ctx);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          observer.preWALWrite(ctx, info, logKey, logEdit);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        bypass |= ctx.shouldBypass();
-        if (ctx.shouldComplete()) {
-          break;
-        }
+    return execOperationWithResult(null, coprocessors.isEmpty() ? null :
+        new ObserverOperationWithResult<WALObserver, Boolean>(walObserverGetter) {
+      @Override
+      public Boolean call(WALObserver oserver) throws IOException {
+        return oserver.preWALWrite(this, info, logKey, logEdit);
       }
-    }
-    return bypass;
+    });
   }
 
   /**
@@ -162,29 +155,12 @@ public class WALCoprocessorHost
    */
   public void postWALWrite(final HRegionInfo info, final WALKey logKey, final WALEdit logEdit)
       throws IOException {
-    if (this.coprocessors == null || this.coprocessors.isEmpty()) return;
-    ObserverContext<WALCoprocessorEnvironment> ctx = null;
-    List<WALEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      WALEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof WALObserver) {
-        final WALObserver observer = (WALObserver)env.getInstance();
-        ctx = ObserverContext.createAndPrepare(env, ctx);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          observer.postWALWrite(ctx, info, logKey, logEdit);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        if (ctx.shouldComplete()) {
-          break;
-        }
+    execOperation(coprocessors.isEmpty() ? null : new WALObserverOperation() {
+      @Override
+      protected void call(WALObserver observer) throws IOException {
+        observer.postWALWrite(this, info, logKey, logEdit);
       }
-    }
+    });
   }
 
   /**
@@ -193,29 +169,12 @@ public class WALCoprocessorHost
    * @param newPath the path of the wal we are going to create
    */
   public void preWALRoll(Path oldPath, Path newPath) throws IOException {
-    if (this.coprocessors == null || this.coprocessors.isEmpty()) return;
-    ObserverContext<WALCoprocessorEnvironment> ctx = null;
-    List<WALEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      WALEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof WALObserver) {
-        final WALObserver observer = (WALObserver)env.getInstance();
-        ctx = ObserverContext.createAndPrepare(env, ctx);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          observer.preWALRoll(ctx, oldPath, newPath);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        if (ctx.shouldComplete()) {
-          break;
-        }
+    execOperation(coprocessors.isEmpty() ? null : new WALObserverOperation() {
+      @Override
+      protected void call(WALObserver observer) throws IOException {
+        observer.preWALRoll(this, oldPath, newPath);
       }
-    }
+    });
   }
 
   /**
@@ -224,28 +183,11 @@ public class WALCoprocessorHost
    * @param newPath the path of the wal we have created and now is the current
    */
   public void postWALRoll(Path oldPath, Path newPath) throws IOException {
-    if (this.coprocessors == null || this.coprocessors.isEmpty()) return;
-    ObserverContext<WALCoprocessorEnvironment> ctx = null;
-    List<WALEnvironment> envs = coprocessors.get();
-    for (int i = 0; i < envs.size(); i++) {
-      WALEnvironment env = envs.get(i);
-      if (env.getInstance() instanceof WALObserver) {
-        final WALObserver observer = (WALObserver)env.getInstance();
-        ctx = ObserverContext.createAndPrepare(env, ctx);
-        Thread currentThread = Thread.currentThread();
-        ClassLoader cl = currentThread.getContextClassLoader();
-        try {
-          currentThread.setContextClassLoader(env.getClassLoader());
-          observer.postWALRoll(ctx, oldPath, newPath);
-        } catch (Throwable e) {
-          handleCoprocessorThrowable(env, e);
-        } finally {
-          currentThread.setContextClassLoader(cl);
-        }
-        if (ctx.shouldComplete()) {
-          break;
-        }
+    execOperation(coprocessors.isEmpty() ? null : new WALObserverOperation() {
+      @Override
+      protected void call(WALObserver observer) throws IOException {
+        observer.postWALRoll(this, oldPath, newPath);
       }
-    }
+    });
   }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
index c40d481708..3e86506e73 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
@@ -72,11 +72,14 @@ import org.apache.hadoop.hbase.coprocessor.BulkLoadObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorException;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
 import org.apache.hadoop.hbase.coprocessor.EndpointObserver;
+import org.apache.hadoop.hbase.coprocessor.MasterCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionObserver;
+import org.apache.hadoop.hbase.coprocessor.RegionServerCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionServerCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionServerObserver;
 import org.apache.hadoop.hbase.filter.ByteArrayComparable;
@@ -169,8 +172,10 @@ import com.google.protobuf.Service;
  * </p>
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.CONFIG)
-public class AccessController implements MasterObserver, RegionObserver, RegionServerObserver,
-      AccessControlService.Interface, CoprocessorService, EndpointObserver, BulkLoadObserver {
+public class AccessController implements MasterCoprocessor, RegionCoprocessor,
+    RegionServerCoprocessor, AccessControlService.Interface, CoprocessorService,
+    MasterObserver, RegionObserver, RegionServerObserver, EndpointObserver, BulkLoadObserver {
+  // TODO: encapsualte out observer functions into separate class/sub-class.
 
   private static final Log LOG = LogFactory.getLog(AccessController.class);
 
@@ -985,6 +990,34 @@ public class AccessController implements MasterObserver, RegionObserver, RegionS
     }
   }
 
+  /*********************************** Observer Getters ************************************/
+  @Override
+  public RegionObserver getRegionObserver() {
+    return this;
+  }
+
+  @Override
+  public MasterObserver getMasterObserver() {
+    return this;
+  }
+
+  @Override
+  public EndpointObserver getEndpointObserver() {
+    return this;
+  }
+
+  @Override
+  public BulkLoadObserver getBulkLoadObserver() {
+    return this;
+  }
+
+  @Override
+  public RegionServerObserver getRegionServerObserver() {
+    return this;
+  }
+
+  /*********************************** Observer Getters ************************************/
+
   @Override
   public void preCreateTable(ObserverContext<MasterCoprocessorEnvironment> c,
       TableDescriptor desc, HRegionInfo[] regions) throws IOException {
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java
index 130587a152..d3f125a7c1 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java
@@ -62,14 +62,19 @@ import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.TableDescriptor;
 import org.apache.hadoop.hbase.constraint.ConstraintException;
+import org.apache.hadoop.hbase.coprocessor.BulkLoadObserver;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorException;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
+import org.apache.hadoop.hbase.coprocessor.EndpointObserver;
+import org.apache.hadoop.hbase.coprocessor.MasterCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionObserver;
+import org.apache.hadoop.hbase.coprocessor.RegionServerCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionServerCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionServerObserver;
 import org.apache.hadoop.hbase.exceptions.DeserializationException;
@@ -122,8 +127,9 @@ import com.google.protobuf.Service;
  * visibility labels
  */
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.CONFIG)
-public class VisibilityController implements MasterObserver, RegionObserver,
-    VisibilityLabelsService.Interface, CoprocessorService {
+// TODO: break out Observer functions into separate class/sub-class.
+public class VisibilityController implements MasterCoprocessor, RegionCoprocessor,
+    VisibilityLabelsService.Interface, CoprocessorService, MasterObserver, RegionObserver {
 
   private static final Log LOG = LogFactory.getLog(VisibilityController.class);
   private static final Log AUDITLOG = LogFactory.getLog("SecurityLogger."
@@ -192,6 +198,17 @@ public class VisibilityController implements MasterObserver, RegionObserver,
 
   }
 
+  /*********************************** Observer Getters ************************************/
+  @Override
+  public RegionObserver getRegionObserver() {
+    return this;
+  }
+
+  @Override
+  public MasterObserver getMasterObserver() {
+    return this;
+  }
+
   /********************************* Master related hooks **********************************/
 
   @Override
@@ -1093,7 +1110,8 @@ public class VisibilityController implements MasterObserver, RegionObserver,
    * replicated as string.  The value for the configuration should be
    * 'org.apache.hadoop.hbase.security.visibility.VisibilityController$VisibilityReplication'.
    */
-  public static class VisibilityReplication implements RegionServerObserver {
+  public static class VisibilityReplication implements RegionServerCoprocessor,
+      RegionServerObserver {
     private Configuration conf;
     private VisibilityLabelService visibilityLabelService;
 
@@ -1108,6 +1126,10 @@ public class VisibilityController implements MasterObserver, RegionObserver,
     public void stop(CoprocessorEnvironment env) throws IOException {
     }
 
+    @Override public RegionServerObserver getRegionServerObserver() {
+      return this;
+    }
+
     @Override
     public ReplicationEndpoint postCreateReplicationEndPoint(
         ObserverContext<RegionServerCoprocessorEnvironment> ctx, ReplicationEndpoint endpoint) {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestResultFromCoprocessor.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestResultFromCoprocessor.java
index 4425fb2a87..f52089005e 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestResultFromCoprocessor.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestResultFromCoprocessor.java
@@ -29,6 +29,7 @@ import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.KeyValue;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.testclassification.ClientTests;
@@ -101,7 +102,11 @@ public class TestResultFromCoprocessor {
     }
   }
 
-  public static class MyObserver implements RegionObserver {
+  public static class MyObserver implements RegionCoprocessor, RegionObserver {
+    @Override
+    public RegionObserver getRegionObserver() {
+      return this;
+    }
 
     @Override
     public Result postAppend(final ObserverContext<RegionCoprocessorEnvironment> c,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SampleRegionWALObserver.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SampleRegionWALObserver.java
index 46b14aa1cf..44cdee39c3 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SampleRegionWALObserver.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SampleRegionWALObserver.java
@@ -39,7 +39,9 @@ import org.apache.hadoop.hbase.wal.WALKey;
  * passed-in WALEdit, i.e, ignore specified columns when writing, or add a KeyValue. On the other
  * side, it checks whether the ignored column is still in WAL when Restoreed at region reconstruct.
  */
-public class SampleRegionWALObserver implements WALObserver, RegionObserver {
+// TODO (followup) : rename to SampleRegionWALCoprocessor
+public class SampleRegionWALObserver implements WALCoprocessor, RegionCoprocessor,
+    WALObserver, RegionObserver {
 
   private static final Log LOG = LogFactory.getLog(SampleRegionWALObserver.class);
 
@@ -81,6 +83,15 @@ public class SampleRegionWALObserver implements WALObserver, RegionObserver {
     postWALRollCalled = false;
   }
 
+  @Override public WALObserver getWALObserver() {
+    return this;
+  }
+
+  @Override
+  public RegionObserver getRegionObserver() {
+    return this;
+  }
+
   @Override
   public void postWALWrite(ObserverContext<? extends WALCoprocessorEnvironment> env,
       HRegionInfo info, WALKey logKey, WALEdit logEdit) throws IOException {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java
index 5da445a31a..cc0c1ca90f 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java
@@ -74,7 +74,7 @@ import org.apache.hadoop.hbase.wal.WALKey;
  * A sample region observer that tests the RegionObserver interface.
  * It works with TestRegionObserverInterface to provide the test case.
  */
-public class SimpleRegionObserver implements RegionObserver {
+public class SimpleRegionObserver implements RegionCoprocessor, RegionObserver {
 
   final AtomicInteger ctBeforeDelete = new AtomicInteger(1);
   final AtomicInteger ctPreOpen = new AtomicInteger(0);
@@ -141,6 +141,11 @@ public class SimpleRegionObserver implements RegionObserver {
   }
 
   @Override
+  public RegionObserver getRegionObserver() {
+    return this;
+  }
+
+  @Override
   public void start(CoprocessorEnvironment e) throws IOException {
     // this only makes sure that leases and locks are available to coprocessors
     // from external packages
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorHost.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorHost.java
index 66b5c60b3d..40f0efe45c 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorHost.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorHost.java
@@ -56,12 +56,16 @@ public class TestCoprocessorHost {
   @Test
   public void testDoubleLoadingAndPriorityValue() {
     final Configuration conf = HBaseConfiguration.create();
-    CoprocessorHost<CoprocessorEnvironment> host =
-        new CoprocessorHost<CoprocessorEnvironment>(new TestAbortable()) {
-      final Configuration cpHostConf = conf;
+    CoprocessorHost<Coprocessor, CoprocessorEnvironment<Coprocessor>> host =
+        new CoprocessorHost<Coprocessor, CoprocessorEnvironment<Coprocessor>>(new TestAbortable()) {
+          @Override public boolean checkCoprocessorType(Class<?> implClass) {
+            return Coprocessor.class.isAssignableFrom(implClass);
+          }
+
+          final Configuration cpHostConf = conf;
 
       @Override
-      public CoprocessorEnvironment createEnvironment(Class<?> implClass,
+      public CoprocessorEnvironment createEnvironment(Class<? extends Coprocessor> implClass,
           final Coprocessor instance, final int priority, int sequence, Configuration conf) {
         return new CoprocessorEnvironment() {
           final Coprocessor envInstance = instance;
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java
index 7013c8c094..1bfa991455 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java
@@ -147,7 +147,7 @@ public class TestCoprocessorInterface {
     }
   }
 
-  public static class CoprocessorImpl implements RegionObserver {
+  public static class CoprocessorImpl implements RegionCoprocessor, RegionObserver {
 
     private boolean startCalled;
     private boolean stopCalled;
@@ -176,6 +176,11 @@ public class TestCoprocessorInterface {
     }
 
     @Override
+    public RegionObserver getRegionObserver() {
+      return this;
+    }
+
+    @Override
     public void preOpen(ObserverContext<RegionCoprocessorEnvironment> e) {
       preOpenCalled = true;
     }
@@ -240,23 +245,31 @@ public class TestCoprocessorInterface {
     }
   }
 
-  public static class CoprocessorII implements RegionObserver {
+  public static class CoprocessorII implements RegionCoprocessor {
     private ConcurrentMap<String, Object> sharedData;
+
     @Override
     public void start(CoprocessorEnvironment e) {
       sharedData = ((RegionCoprocessorEnvironment)e).getSharedData();
       sharedData.putIfAbsent("test2", new Object());
     }
+
     @Override
     public void stop(CoprocessorEnvironment e) {
       sharedData = null;
     }
+
     @Override
-    public void preGetOp(final ObserverContext<RegionCoprocessorEnvironment> e,
-        final Get get, final List<Cell> results) throws IOException {
-      if (1/0 == 1) {
-        e.complete();
-      }
+    public RegionObserver getRegionObserver() {
+      return new RegionObserver() {
+        @Override
+        public void preGetOp(final ObserverContext<RegionCoprocessorEnvironment> e,
+            final Get get, final List<Cell> results) throws IOException {
+          if (1/0 == 1) {
+            e.complete();
+          }
+        }
+      };
     }
 
     Map<String, Object> getSharedData() {
@@ -270,8 +283,7 @@ public class TestCoprocessorInterface {
     byte [][] families = { fam1, fam2, fam3 };
 
     Configuration hc = initConfig();
-    Region region = initHRegion(tableName, name.getMethodName(), hc,
-      new Class<?>[]{}, families);
+    Region region = initHRegion(tableName, name.getMethodName(), hc, new Class<?>[]{}, families);
 
     for (int i = 0; i < 3; i++) {
       HBaseTestCase.addContent(region, fam3);
@@ -380,7 +392,7 @@ public class TestCoprocessorInterface {
     ((HRegion)r).setCoprocessorHost(host);
 
     for (Class<?> implClass : implClasses) {
-      host.load(implClass, Coprocessor.PRIORITY_USER, conf);
+      host.load((Class<? extends RegionCoprocessor>) implClass, Coprocessor.PRIORITY_USER, conf);
     }
     // we need to manually call pre- and postOpen here since the
     // above load() is not the real case for CP loading. A CP is
@@ -410,7 +422,7 @@ public class TestCoprocessorInterface {
     ((HRegion)r).setCoprocessorHost(host);
 
     for (Class<?> implClass : implClasses) {
-      host.load(implClass, Coprocessor.PRIORITY_USER, conf);
+      host.load((Class<? extends RegionCoprocessor>) implClass, Coprocessor.PRIORITY_USER, conf);
       Coprocessor c = host.findCoprocessor(implClass.getName());
       assertNotNull(c);
     }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorMetrics.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorMetrics.java
index 878d445f35..d701a13adf 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorMetrics.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorMetrics.java
@@ -96,7 +96,7 @@ public class TestCoprocessorMetrics {
   /**
    * MasterObserver that has a Timer metric for create table operation.
    */
-  public static class CustomMasterObserver implements MasterObserver {
+  public static class CustomMasterObserver implements MasterCoprocessor, MasterObserver {
     private Timer createTableTimer;
     private long start = Long.MIN_VALUE;
 
@@ -126,14 +126,25 @@ public class TestCoprocessorMetrics {
         createTableTimer  = registry.timer("CreateTable");
       }
     }
+
+    @Override
+    public MasterObserver getMasterObserver() {
+      return this;
+    }
   }
 
   /**
    * RegionServerObserver that has a Counter for rollWAL requests.
    */
-  public static class CustomRegionServerObserver implements RegionServerObserver {
+  public static class CustomRegionServerObserver implements RegionServerCoprocessor,
+      RegionServerObserver {
     /** This is the Counter metric object to keep track of the current count across invocations */
     private Counter rollWALCounter;
+
+    @Override public RegionServerObserver getRegionServerObserver() {
+      return this;
+    }
+
     @Override
     public void postRollWALWriterRequest(ObserverContext<RegionServerCoprocessorEnvironment> ctx)
         throws IOException {
@@ -157,7 +168,7 @@ public class TestCoprocessorMetrics {
   /**
    * WALObserver that has a Counter for walEdits written.
    */
-  public static class CustomWALObserver implements WALObserver {
+  public static class CustomWALObserver implements WALCoprocessor, WALObserver {
     private Counter walEditsCount;
 
     @Override
@@ -178,12 +189,16 @@ public class TestCoprocessorMetrics {
         }
       }
     }
+
+    @Override public WALObserver getWALObserver() {
+      return this;
+    }
   }
 
   /**
    * RegionObserver that has a Counter for preGet()
    */
-  public static class CustomRegionObserver implements RegionObserver {
+  public static class CustomRegionObserver implements RegionCoprocessor, RegionObserver {
     private Counter preGetCounter;
 
     @Override
@@ -193,6 +208,11 @@ public class TestCoprocessorMetrics {
     }
 
     @Override
+    public RegionObserver getRegionObserver() {
+      return this;
+    }
+
+    @Override
     public void start(CoprocessorEnvironment env) throws IOException {
       if (env instanceof RegionCoprocessorEnvironment) {
         MetricRegistry registry =
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestHTableWrapper.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestHTableWrapper.java
index 326b3c0a1d..13df4e5d29 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestHTableWrapper.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestHTableWrapper.java
@@ -87,7 +87,11 @@ public class TestHTableWrapper {
   private static final byte[] bytes4 = Bytes.toBytes(4);
   private static final byte[] bytes5 = Bytes.toBytes(5);
 
-  static class DummyRegionObserver implements RegionObserver {
+  static class DummyRegionObserver implements MasterCoprocessor, MasterObserver {
+    @Override
+    public MasterObserver getMasterObserver() {
+      return this;
+    }
   }
 
   private Table hTableInterface;
@@ -135,14 +139,14 @@ public class TestHTableWrapper {
   public void testHTableInterfaceMethods() throws Exception {
     Configuration conf = util.getConfiguration();
     MasterCoprocessorHost cpHost = util.getMiniHBaseCluster().getMaster().getMasterCoprocessorHost();
-    Class<?> implClazz = DummyRegionObserver.class;
+    Class<? extends MasterCoprocessor> implClazz = DummyRegionObserver.class;
     cpHost.load(implClazz, Coprocessor.PRIORITY_HIGHEST, conf);
     CoprocessorEnvironment env = cpHost.findCoprocessorEnvironment(implClazz.getName());
     assertEquals(Coprocessor.VERSION, env.getVersion());
     assertEquals(VersionInfo.getVersion(), env.getHBaseVersion());
     hTableInterface = env.getTable(TEST_TABLE);
     checkHTableInterfaceMethods();
-    cpHost.shutdown(env);
+    cpHost.shutdown((MasterCoprocessorEnvironment) env);
   }
 
   private void checkHTableInterfaceMethods() throws Exception {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithAbort.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithAbort.java
index c0a5801d2c..3feab61d0f 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithAbort.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithAbort.java
@@ -97,13 +97,18 @@ public class TestMasterCoprocessorExceptionWithAbort {
    }
   }
 
-  public static class BuggyMasterObserver implements MasterObserver {
+  public static class BuggyMasterObserver implements MasterCoprocessor, MasterObserver {
     private boolean preCreateTableCalled;
     private boolean postCreateTableCalled;
     private boolean startCalled;
     private boolean postStartMasterCalled;
 
     @Override
+    public MasterObserver getMasterObserver() {
+      return this;
+    }
+
+    @Override
     public void postCreateTable(ObserverContext<MasterCoprocessorEnvironment> env,
         TableDescriptor desc, HRegionInfo[] regions) throws IOException {
       // cause a NullPointerException and don't catch it: this will cause the
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithRemove.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithRemove.java
index 92d12eeac7..8896e33a0c 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithRemove.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterCoprocessorExceptionWithRemove.java
@@ -73,12 +73,17 @@ public class TestMasterCoprocessorExceptionWithRemove {
     }
   }
 
-  public static class BuggyMasterObserver implements MasterObserver {
+  public static class BuggyMasterObserver implements MasterCoprocessor, MasterObserver {
     private boolean preCreateTableCalled;
     private boolean postCreateTableCalled;
     private boolean startCalled;
     private boolean postStartMasterCalled;
 
+    @Override
+    public MasterObserver getMasterObserver() {
+      return this;
+    }
+
     @SuppressWarnings("null")
     @Override
     public void postCreateTable(ObserverContext<MasterCoprocessorEnvironment> env,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java
index 1b8b27b061..6d64c6eabc 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java
@@ -93,7 +93,7 @@ public class TestMasterObserver {
   public static CountDownLatch tableCreationLatch = new CountDownLatch(1);
   public static CountDownLatch tableDeletionLatch = new CountDownLatch(1);
 
-  public static class CPMasterObserver implements MasterObserver {
+  public static class CPMasterObserver implements MasterCoprocessor, MasterObserver {
 
     private boolean bypass = false;
     private boolean preCreateTableCalled;
@@ -283,6 +283,11 @@ public class TestMasterObserver {
     }
 
     @Override
+    public MasterObserver getMasterObserver() {
+      return this;
+    }
+
+    @Override
     public void preMergeRegions(
         final ObserverContext<MasterCoprocessorEnvironment> ctx,
         final HRegionInfo[] regionsToMerge) throws IOException {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverScannerOpenHook.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverScannerOpenHook.java
index e9bf09b9b9..4fa6e02f92 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverScannerOpenHook.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverScannerOpenHook.java
@@ -101,13 +101,22 @@ public class TestRegionObserverScannerOpenHook {
   /**
    * Do the default logic in {@link RegionObserver} interface.
    */
-  public static class EmptyRegionObsever implements RegionObserver {
+  public static class EmptyRegionObsever implements RegionCoprocessor, RegionObserver {
+    @Override
+    public RegionObserver getRegionObserver() {
+      return this;
+    }
   }
 
   /**
    * Don't return any data from a scan by creating a custom {@link StoreScanner}.
    */
-  public static class NoDataFromScan implements RegionObserver {
+  public static class NoDataFromScan implements RegionCoprocessor, RegionObserver {
+    @Override
+    public RegionObserver getRegionObserver() {
+      return this;
+    }
+
     @Override
     public KeyValueScanner preStoreScannerOpen(ObserverContext<RegionCoprocessorEnvironment> c,
         Store store, Scan scan, NavigableSet<byte[]> targetCols, KeyValueScanner s, long readPt)
@@ -135,7 +144,11 @@ public class TestRegionObserverScannerOpenHook {
   /**
    * Don't allow any data in a flush by creating a custom {@link StoreScanner}.
    */
-  public static class NoDataFromFlush implements RegionObserver {
+  public static class NoDataFromFlush implements RegionCoprocessor, RegionObserver {
+    @Override
+    public RegionObserver getRegionObserver() {
+      return this;
+    }
 
     @Override
     public InternalScanner preFlushScannerOpen(ObserverContext<RegionCoprocessorEnvironment> c,
@@ -149,7 +162,12 @@ public class TestRegionObserverScannerOpenHook {
    * Don't allow any data to be written out in the compaction by creating a custom
    * {@link StoreScanner}.
    */
-  public static class NoDataFromCompaction implements RegionObserver {
+  public static class NoDataFromCompaction implements RegionCoprocessor, RegionObserver {
+    @Override
+    public RegionObserver getRegionObserver() {
+      return this;
+    }
+
     @Override
     public InternalScanner preCompactScannerOpen(ObserverContext<RegionCoprocessorEnvironment> c,
         Store store, List<? extends KeyValueScanner> scanners, ScanType scanType,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverStacking.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverStacking.java
index 15d449db29..b9a9612b82 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverStacking.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverStacking.java
@@ -50,8 +50,14 @@ public class TestRegionObserverStacking extends TestCase {
     = new HBaseTestingUtility();
   static final Path DIR = TEST_UTIL.getDataTestDir();
 
-  public static class ObserverA implements RegionObserver {
+  public static class ObserverA implements RegionCoprocessor, RegionObserver {
     long id;
+
+    @Override
+    public RegionObserver getRegionObserver() {
+      return this;
+    }
+
     @Override
     public void postPut(final ObserverContext<RegionCoprocessorEnvironment> c,
         final Put put, final WALEdit edit,
@@ -65,8 +71,14 @@ public class TestRegionObserverStacking extends TestCase {
     }
   }
 
-  public static class ObserverB implements RegionObserver {
+  public static class ObserverB implements RegionCoprocessor, RegionObserver {
     long id;
+
+    @Override
+    public RegionObserver getRegionObserver() {
+      return this;
+    }
+
     @Override
     public void postPut(final ObserverContext<RegionCoprocessorEnvironment> c,
         final Put put, final WALEdit edit,
@@ -80,10 +92,15 @@ public class TestRegionObserverStacking extends TestCase {
     }
   }
 
-  public static class ObserverC implements RegionObserver {
+  public static class ObserverC implements RegionCoprocessor, RegionObserver {
     long id;
 
     @Override
+    public RegionObserver getRegionObserver() {
+      return this;
+    }
+
+    @Override
     public void postPut(final ObserverContext<RegionCoprocessorEnvironment> c,
         final Put put, final WALEdit edit,
         final Durability durability)
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java
index a81d2680b6..550a974272 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java
@@ -61,6 +61,7 @@ import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.coprocessor.RegionServerCoprocessorEnvironment;
@@ -455,7 +456,7 @@ public class TestNamespaceAuditor {
     return Bytes.toBytes("" + key);
   }
 
-  public static class CustomObserver implements RegionObserver {
+  public static class CustomObserver implements RegionCoprocessor, RegionObserver {
     volatile CountDownLatch postCompact;
 
     @Override
@@ -468,6 +469,11 @@ public class TestNamespaceAuditor {
     public void start(CoprocessorEnvironment e) throws IOException {
       postCompact = new CountDownLatch(1);
     }
+
+    @Override
+    public RegionObserver getRegionObserver() {
+      return this;
+    }
   }
 
   @Test
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java
index 69bc9a70a6..dbd10a9248 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java
@@ -66,6 +66,7 @@ import org.apache.hadoop.hbase.client.ResultScanner;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.client.TestReplicasClient.SlowMeCopro;
+import org.apache.hadoop.hbase.coprocessor.MasterCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
@@ -263,12 +264,19 @@ public class TestSplitTransactionOnCluster {
     assertEquals(2, cluster.getRegions(tableName).size());
   }
 
-  public static class FailingSplitMasterObserver implements MasterObserver {
+  public static class FailingSplitMasterObserver implements MasterCoprocessor, MasterObserver {
     volatile CountDownLatch latch;
+
     @Override
     public void start(CoprocessorEnvironment e) throws IOException {
       latch = new CountDownLatch(1);
     }
+
+    @Override
+    public MasterObserver getMasterObserver() {
+      return this;
+    }
+
     @Override
     public void preSplitRegionBeforePONRAction(
         final ObserverContext<MasterCoprocessorEnvironment> ctx,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java
index 65833665c4..b7c89aa104 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java
@@ -75,6 +75,7 @@ import org.apache.hadoop.hbase.coprocessor.CoprocessorHost;
 import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionServerCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.protobuf.generated.PingProtos.CountRequest;
@@ -2577,7 +2578,7 @@ public class TestAccessController extends SecureTestUtil {
 
 
   public static class PingCoprocessor extends PingService implements Coprocessor,
-      CoprocessorService {
+      CoprocessorService, RegionCoprocessor {
 
     @Override
     public void start(CoprocessorEnvironment env) throws IOException { }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/TestTokenAuthentication.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/TestTokenAuthentication.java
index 012236cb10..d91de5cd8f 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/TestTokenAuthentication.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/TestTokenAuthentication.java
@@ -49,7 +49,9 @@ import org.apache.hadoop.hbase.client.ClusterConnection;
 import org.apache.hadoop.hbase.client.Connection;
 import org.apache.hadoop.hbase.client.ConnectionFactory;
 import org.apache.hadoop.hbase.client.Table;
+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
+import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.ipc.FifoRpcScheduler;
 import org.apache.hadoop.hbase.ipc.NettyRpcServer;
 import org.apache.hadoop.hbase.ipc.RpcServer;
@@ -260,7 +262,7 @@ public class TestTokenAuthentication {
       final RegionServerServices mockServices = TEST_UTIL.createMockRegionServerService(rpcServer);
 
       // mock up coprocessor environment
-      super.start(new RegionCoprocessorEnvironment() {
+      super.start( new RegionCoprocessorEnvironment()  {
         @Override
         public HRegion getRegion() { return null; }
 
@@ -284,7 +286,7 @@ public class TestTokenAuthentication {
         public String getHBaseVersion() { return null; }
 
         @Override
-        public Coprocessor getInstance() { return null; }
+        public RegionCoprocessor getInstance() { return null; }
 
         @Override
         public int getPriority() { return 0; }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/BaseTestHBaseFsck.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/BaseTestHBaseFsck.java
index c18d6d0326..004aacf8de 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/BaseTestHBaseFsck.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/BaseTestHBaseFsck.java
@@ -58,6 +58,7 @@ import org.apache.hadoop.hbase.client.RegionLocator;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.client.TableDescriptor;
+import org.apache.hadoop.hbase.coprocessor.MasterCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.MasterObserver;
 import org.apache.hadoop.hbase.coprocessor.MasterCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
@@ -591,11 +592,16 @@ public class BaseTestHBaseFsck {
   @org.junit.Rule
   public TestName name = new TestName();
 
-  public static class MasterSyncObserver implements MasterObserver {
+  public static class MasterSyncCoprocessor implements MasterCoprocessor, MasterObserver {
     volatile CountDownLatch tableCreationLatch = null;
     volatile CountDownLatch tableDeletionLatch = null;
 
     @Override
+    public MasterObserver getMasterObserver() {
+      return this;
+    }
+
+    @Override
     public void postCompletedCreateTableAction(
         final ObserverContext<MasterCoprocessorEnvironment> ctx,
         final TableDescriptor desc,
@@ -623,8 +629,8 @@ public class BaseTestHBaseFsck {
     byte [][] splitKeys) throws Exception {
     // NOTE: We need a latch because admin is not sync,
     // so the postOp coprocessor method may be called after the admin operation returned.
-    MasterSyncObserver observer = (MasterSyncObserver)testUtil.getHBaseCluster().getMaster()
-      .getMasterCoprocessorHost().findCoprocessor(MasterSyncObserver.class.getName());
+    MasterSyncCoprocessor observer = (MasterSyncCoprocessor) testUtil.getHBaseCluster().getMaster()
+      .getMasterCoprocessorHost().getObservers(MasterCoprocessor::getMasterObserver).get(0);
     observer.tableCreationLatch = new CountDownLatch(1);
     if (splitKeys != null) {
       admin.createTable(htd, splitKeys);
@@ -640,8 +646,8 @@ public class BaseTestHBaseFsck {
     throws Exception {
     // NOTE: We need a latch because admin is not sync,
     // so the postOp coprocessor method may be called after the admin operation returned.
-    MasterSyncObserver observer = (MasterSyncObserver)testUtil.getHBaseCluster().getMaster()
-      .getMasterCoprocessorHost().findCoprocessor(MasterSyncObserver.class.getName());
+    MasterSyncCoprocessor observer = (MasterSyncCoprocessor)testUtil.getHBaseCluster().getMaster()
+      .getMasterCoprocessorHost().findCoprocessor(MasterSyncCoprocessor.class.getName());
     observer.tableDeletionLatch = new CountDownLatch(1);
     try {
       admin.disableTable(tableName);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckMOB.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckMOB.java
index ca8bc91e95..36612074eb 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckMOB.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckMOB.java
@@ -50,7 +50,7 @@ public class TestHBaseFsckMOB extends BaseTestHBaseFsck {
   @BeforeClass
   public static void setUpBeforeClass() throws Exception {
     TEST_UTIL.getConfiguration().set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,
-        MasterSyncObserver.class.getName());
+        MasterSyncCoprocessor.class.getName());
 
     conf.setInt("hbase.regionserver.handler.count", 2);
     conf.setInt("hbase.regionserver.metahandler.count", 30);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckOneRS.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckOneRS.java
index 41881465ac..904d1b8beb 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckOneRS.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckOneRS.java
@@ -102,7 +102,7 @@ public class TestHBaseFsckOneRS extends BaseTestHBaseFsck {
   @BeforeClass
   public static void setUpBeforeClass() throws Exception {
     TEST_UTIL.getConfiguration().set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,
-        MasterSyncObserver.class.getName());
+        MasterSyncCoprocessor.class.getName());
 
     conf.setInt("hbase.regionserver.handler.count", 2);
     conf.setInt("hbase.regionserver.metahandler.count", 30);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckReplicas.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckReplicas.java
index 6e49b81f0c..75754defee 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckReplicas.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckReplicas.java
@@ -68,7 +68,7 @@ public class TestHBaseFsckReplicas extends BaseTestHBaseFsck {
   @BeforeClass
   public static void setUpBeforeClass() throws Exception {
     TEST_UTIL.getConfiguration().set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,
-        MasterSyncObserver.class.getName());
+        MasterSyncCoprocessor.class.getName());
 
     conf.setInt("hbase.regionserver.handler.count", 2);
     conf.setInt("hbase.regionserver.metahandler.count", 30);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckTwoRS.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckTwoRS.java
index 50a5b06863..beef02b505 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckTwoRS.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckTwoRS.java
@@ -67,7 +67,7 @@ public class TestHBaseFsckTwoRS extends BaseTestHBaseFsck {
   @BeforeClass
   public static void setUpBeforeClass() throws Exception {
     TEST_UTIL.getConfiguration().set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,
-        MasterSyncObserver.class.getName());
+        MasterSyncCoprocessor.class.getName());
 
     conf.setInt("hbase.regionserver.handler.count", 2);
     conf.setInt("hbase.regionserver.metahandler.count", 30);
diff --git a/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java b/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java
index 7a35d29300..820f76c5f3 100644
--- a/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java
+++ b/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift2/TestThriftHBaseServiceHandler.java
@@ -41,7 +41,10 @@ import org.apache.hadoop.hbase.client.Increment;
 import org.apache.hadoop.hbase.client.Delete;
 import org.apache.hadoop.hbase.client.Durability;
 import org.apache.hadoop.hbase.client.Table;
+import org.apache.hadoop.hbase.coprocessor.BulkLoadObserver;
+import org.apache.hadoop.hbase.coprocessor.EndpointObserver;
 import org.apache.hadoop.hbase.coprocessor.ObserverContext;
+import org.apache.hadoop.hbase.coprocessor.RegionCoprocessor;
 import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
 import org.apache.hadoop.hbase.coprocessor.RegionObserver;
 import org.apache.hadoop.hbase.filter.ParseFilter;
@@ -1555,12 +1558,17 @@ public class TestThriftHBaseServiceHandler {
     assertTColumnValueEqual(columnValueB, result.getColumnValues().get(1));
   }
 
-  public static class DelayingRegionObserver implements RegionObserver {
+  public static class DelayingRegionObserver implements RegionCoprocessor, RegionObserver {
     private static final Log LOG = LogFactory.getLog(DelayingRegionObserver.class);
     // sleep time in msec
     private long delayMillis;
 
     @Override
+    public RegionObserver getRegionObserver() {
+      return this;
+    }
+
+    @Override
     public void start(CoprocessorEnvironment e) throws IOException {
       this.delayMillis = e.getConfiguration()
           .getLong("delayingregionobserver.delay", 3000);
-- 
2.11.1
