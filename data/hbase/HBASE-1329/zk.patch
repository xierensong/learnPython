From ea1046e64aad3b970e15f8c4ef73bc0c916ef175 Mon Sep 17 00:00:00 2001
From: nitay <nitay@powerset.com>
Date: Fri, 12 Jun 2009 22:27:28 -0700
Subject: [PATCH] Visibility into ZooKeeper

---
 .../main/org/apache/zookeeper/ZooKeeperMain.java   |   50 +++++++++-----------
 1 files changed, 23 insertions(+), 27 deletions(-)

diff --git src/java/main/org/apache/zookeeper/ZooKeeperMain.java src/java/main/org/apache/zookeeper/ZooKeeperMain.java
index 6d29bd6..86f80d5 100644
--- src/java/main/org/apache/zookeeper/ZooKeeperMain.java
+++ src/java/main/org/apache/zookeeper/ZooKeeperMain.java
@@ -46,7 +46,7 @@ import org.apache.zookeeper.data.Stat;
  */
 public class ZooKeeperMain {
     private static final Logger LOG = Logger.getLogger(ZooKeeperMain.class);
-    protected static Map<String,String> commandMap = new HashMap<String,String>( );
+    protected static final Map<String,String> commandMap = new HashMap<String,String>( );
 
     protected MyCommandOptions cl = new MyCommandOptions();
     protected HashMap<Integer,String> history = new HashMap<Integer,String>( );
@@ -60,7 +60,7 @@ public class ZooKeeperMain {
         return printWatches;
     }
 
-    static void populateCommandMap() {
+    static {
         commandMap.put("connect", "host:port");
         commandMap.put("close","");
         commandMap.put("create", "path data acl");
@@ -146,12 +146,13 @@ public class ZooKeeperMain {
      */
     static private class MyCommandOptions {
 
-        private Map<String,String> options = null;
+        private Map<String,String> options = new HashMap<String,String>();
         private List<String> cmdArgs = null;
         private String command = null;
 
         public MyCommandOptions() {
-            options = null; command = null;
+          options.put("server", "localhost:2181");
+          options.put("timeout", "30000");
         }
 
         public String getOption(String opt) {
@@ -174,13 +175,6 @@ public class ZooKeeperMain {
             return cmdArgs.toArray(new String[0]);
         }
 
-        private Map<String,String> buildDefaults( ) {
-            options = new HashMap<String,String>( );
-            options.put("server", "localhost:2181");
-            options.put("timeout", "30000");
-            return options;
-        }
-
         /**
          * Parses a command line that may contain one or more flags
          * before an optional command string
@@ -188,7 +182,6 @@ public class ZooKeeperMain {
          * @return true if parsing succeeded, false otherwise.
          */
         public boolean parseOptions(String[] args) {
-            Map<String, String> ret = buildDefaults();
             List<String> argList = Arrays.asList(args);
             Iterator<String> it = argList.iterator();
 
@@ -196,9 +189,9 @@ public class ZooKeeperMain {
                 String opt = it.next();
                 try {
                     if (opt.equals("-server")) {
-                        ret.put("server", it.next());
+                        options.put("server", it.next());
                     } else if (opt.equals("-timeout")) {
-                        ret.put("timeout", it.next());
+                        options.put("timeout", it.next());
                     }
                 } catch (NoSuchElementException e){
                     System.err.println("Error: no argument found for option "
@@ -272,7 +265,6 @@ public class ZooKeeperMain {
     public static void main(String args[])
         throws KeeperException, IOException, InterruptedException
     {
-        populateCommandMap();
         ZooKeeperMain main = new ZooKeeperMain(args);
         main.run();
     }
@@ -285,6 +277,10 @@ public class ZooKeeperMain {
 //                Integer.parseInt(cl.getOption("timeout")), new MyWatcher());
     }
 
+    public ZooKeeperMain(ZooKeeper zk) {
+      this.zk = zk;
+    }
+
     @SuppressWarnings("unchecked")
     void run() throws KeeperException, IOException, InterruptedException {
         if (cl.getCommand() == null) {
@@ -311,12 +307,7 @@ public class ZooKeeperMain {
                 String line;
                 Method readLine = consoleC.getMethod("readLine", String.class);
                 while ((line = (String)readLine.invoke(console, getPrompt())) != null) {
-                    if (!line.equals("")) {
-                        cl.parseCommand(line);
-                        addToHistory(commandCount,line);
-                        processCmd(cl);
-                        commandCount++;
-                    }
+                    executeLine(line);
                 }
             } catch (ClassNotFoundException e) {
                 LOG.debug("Unable to start jline", e);
@@ -342,12 +333,7 @@ public class ZooKeeperMain {
 
                 String line;
                 while ((line = br.readLine()) != null) {
-                    if (!line.equals("")) {
-                        cl.parseCommand(line);
-                        addToHistory(commandCount,line);
-                        processCmd(cl);
-                        commandCount++;
-                    }
+                    executeLine(line);
                 }
             }
         }
@@ -358,6 +344,16 @@ public class ZooKeeperMain {
         }
     }
 
+    public void executeLine(String line)
+    throws InterruptedException, IOException, KeeperException {
+      if (!line.equals("")) {
+        cl.parseCommand(line);
+        addToHistory(commandCount,line);
+        processCmd(cl);
+        commandCount++;
+      }
+    }
+
     private static DataCallback dataCallback = new DataCallback() {
 
         public void processResult(int rc, String path, Object ctx, byte[] data,
-- 
1.6.1.3

