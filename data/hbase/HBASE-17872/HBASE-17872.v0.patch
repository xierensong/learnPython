From 1b3e8907ff2b8e920ec1267b0f771eb55bf35880 Mon Sep 17 00:00:00 2001
From: Chia-Ping Tsai <chia7712@gmail.com>
Date: Wed, 5 Apr 2017 20:17:11 +0800
Subject: [PATCH] HBASE-17872 The MSLABImpl generates the invaild cells when
 unsafe is not availble

---
 .../apache/hadoop/hbase/util/ByteBufferUtils.java  |  25 ++---
 .../hadoop/hbase/util/TestByteBufferUtils.java     | 114 +++++++++++++++++++++
 2 files changed, 125 insertions(+), 14 deletions(-)

diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteBufferUtils.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteBufferUtils.java
index ff4c843..3a12a1e 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteBufferUtils.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteBufferUtils.java
@@ -404,12 +404,11 @@ public final class ByteBufferUtils {
     } else if (UNSAFE_AVAIL) {
       UnsafeAccess.copy(in, sourceOffset, out, destinationOffset, length);
     } else {
-      int outOldPos = out.position();
-      out.position(destinationOffset);
+      ByteBuffer outDup = out.duplicate();
+      outDup.position(destinationOffset);
       ByteBuffer inDup = in.duplicate();
       inDup.position(sourceOffset).limit(sourceOffset + length);
-      out.put(inDup);
-      out.position(outOldPos);
+      outDup.put(inDup);
     }
     return destinationOffset + length;
   }
@@ -990,7 +989,7 @@ public final class ByteBufferUtils {
 
   /**
    * Copies bytes from given array's offset to length part into the given buffer. Puts the bytes
-   * to buffer's given position.
+   * to buffer's given position. This doesn't affact the position of buffer.
    * @param out
    * @param in
    * @param inOffset
@@ -1003,16 +1002,15 @@ public final class ByteBufferUtils {
     } else if (UNSAFE_AVAIL) {
       UnsafeAccess.copy(in, inOffset, out, outOffset, length);
     } else {
-      int oldPos = out.position();
-      out.position(outOffset);
-      out.put(in, inOffset, length);
-      out.position(oldPos);
+      ByteBuffer outDup = out.duplicate();
+      outDup.position(outOffset);
+      outDup.put(in, inOffset, length);
     }
   }
 
   /**
    * Copies specified number of bytes from given offset of 'in' ByteBuffer to
-   * the array.
+   * the array. This doesn't affact the position of buffer.
    * @param out
    * @param in
    * @param sourceOffset
@@ -1026,10 +1024,9 @@ public final class ByteBufferUtils {
     } else if (UNSAFE_AVAIL) {
       UnsafeAccess.copy(in, sourceOffset, out, destinationOffset, length);
     } else {
-      int oldPos = in.position();
-      in.position(sourceOffset);
-      in.get(out, destinationOffset, length);
-      in.position(oldPos);
+      ByteBuffer inDup = in.duplicate();
+      inDup.position(sourceOffset);
+      inDup.get(out, destinationOffset, length);
     }
   }
 
diff --git a/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestByteBufferUtils.java b/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestByteBufferUtils.java
index 053fb24..7d2821f 100644
--- a/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestByteBufferUtils.java
+++ b/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestByteBufferUtils.java
@@ -29,12 +29,20 @@ import java.io.DataOutputStream;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import java.util.stream.Collectors;
 
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.testclassification.MiscTests;
@@ -388,6 +396,111 @@ public class TestByteBufferUtils {
     assertEquals(i, buffer.getInt());
   }
 
+  private void testCopyFromSrcToDestWithThreads(Object input, Object output,
+    List<Integer> lengthes, List<Integer> offsets) throws InterruptedException {
+    assertTrue((input instanceof ByteBuffer) || (input instanceof byte[]));
+    assertTrue((output instanceof ByteBuffer) || (output instanceof byte[]));
+    assertEquals(lengthes.size(), offsets.size());
+
+    final int threads = lengthes.size();
+    CountDownLatch latch = new CountDownLatch(1);
+    List<Runnable> exes = new ArrayList<>(threads);
+    int oldInputPos = (input instanceof ByteBuffer) ? ((ByteBuffer) input).position() : 0;
+    int oldOutputPos = (output instanceof ByteBuffer) ? ((ByteBuffer) output).position() : 0;
+    for (int i = 0; i != threads; ++i) {
+      int offset = offsets.get(i);
+      int length = lengthes.get(i);
+      exes.add(() -> {
+        try {
+          latch.await();
+          if (input instanceof ByteBuffer && output instanceof byte[]) {
+            ByteBufferUtils.copyFromBufferToArray((byte[]) output,
+                (ByteBuffer) input, offset, offset, length);
+          }
+          if (input instanceof byte[] && output instanceof ByteBuffer) {
+            ByteBufferUtils.copyFromArrayToBuffer((ByteBuffer) output,
+                offset, (byte[]) input, offset, length);
+          }
+          if (input instanceof ByteBuffer && output instanceof ByteBuffer) {
+            ByteBufferUtils.copyFromBufferToBuffer((ByteBuffer) input,
+                (ByteBuffer) output, offset, offset, length);
+          }
+        } catch (InterruptedException ex) {
+          throw new RuntimeException(ex);
+        }
+      });
+    }
+    ExecutorService service = Executors.newFixedThreadPool(threads);
+    exes.forEach(service::execute);
+    latch.countDown();
+    service.shutdown();
+    assertTrue(service.awaitTermination(5, TimeUnit.SECONDS));
+    if (input instanceof ByteBuffer) {
+      assertEquals(oldInputPos, ((ByteBuffer) input).position());
+    }
+    if (output instanceof ByteBuffer) {
+      assertEquals(oldOutputPos, ((ByteBuffer) output).position());
+    }
+    String inputString = (input instanceof ByteBuffer) ?
+      Bytes.toString(Bytes.toBytes((ByteBuffer) input)) : Bytes.toString((byte[]) input);
+    String outputString = (output instanceof ByteBuffer) ?
+      Bytes.toString(Bytes.toBytes((ByteBuffer) output)) : Bytes.toString((byte[]) output);
+    assertEquals(inputString, outputString);
+  }
+
+  @Test
+  public void testCopyFromSrcToDestWithThreads() throws InterruptedException {
+    List<byte[]> words = Arrays.asList(
+      Bytes.toBytes("with"),
+      Bytes.toBytes("great"),
+      Bytes.toBytes("power"),
+      Bytes.toBytes("comes"),
+      Bytes.toBytes("great"),
+      Bytes.toBytes("responsibility")
+    );
+    List<Integer> lengthes = words.stream().map(v -> v.length).collect(Collectors.toList());
+    List<Integer> offsets = new ArrayList<>(words.size());
+    for (int i = 0; i != words.size(); ++i) {
+      offsets.add(words.subList(0, i).stream().mapToInt(v -> v.length).sum());
+    }
+
+    int totalSize = words.stream().mapToInt(v -> v.length).sum();
+    byte[] fullContent = new byte[totalSize];
+    int offset = 0;
+    for (byte[] w : words) {
+      offset = Bytes.putBytes(fullContent, offset, w, 0, w.length);
+    }
+
+    // test copyFromBufferToArray
+    for (ByteBuffer input : Arrays.asList(
+            ByteBuffer.allocateDirect(totalSize),
+            ByteBuffer.allocate(totalSize))) {
+      words.forEach(input::put);
+      byte[] output = new byte[totalSize];
+      testCopyFromSrcToDestWithThreads(input, output, lengthes, offsets);
+    }
+
+    // test copyFromArrayToBuffer
+    for (ByteBuffer output : Arrays.asList(
+            ByteBuffer.allocateDirect(totalSize),
+            ByteBuffer.allocate(totalSize))) {
+      byte[] input = fullContent;
+      testCopyFromSrcToDestWithThreads(input, output, lengthes, offsets);
+    }
+
+    // test copyFromBufferToBuffer
+    for (ByteBuffer input : Arrays.asList(
+            ByteBuffer.allocateDirect(totalSize),
+            ByteBuffer.allocate(totalSize))) {
+      words.forEach(input::put);
+      for (ByteBuffer output : Arrays.asList(
+            ByteBuffer.allocateDirect(totalSize),
+            ByteBuffer.allocate(totalSize))) {
+        testCopyFromSrcToDestWithThreads(input, output, lengthes, offsets);
+      }
+    }
+  }
+
   @Test
   public void testCopyFromBufferToArray() {
     ByteBuffer buffer = ByteBuffer.allocate(15);
@@ -492,4 +605,5 @@ public class TestByteBufferUtils {
       bb[i] = b;
     }
   }
+
 }
-- 
2.9.3

