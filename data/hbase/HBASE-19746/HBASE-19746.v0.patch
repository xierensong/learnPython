diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/ByteBufferKeyOnlyKeyValue.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/ByteBufferKeyOnlyKeyValue.java
index db2890f295..31f71f98c5 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/ByteBufferKeyOnlyKeyValue.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/ByteBufferKeyOnlyKeyValue.java
@@ -152,10 +152,6 @@ public class ByteBufferKeyOnlyKeyValue extends ByteBufferExtendedCell {
     return ByteBufferUtils.toByte(this.buf, this.offset + this.length - 1);
   }
 
-  public Type getType() {
-    return PrivateCellUtil.toType(getTypeByte());
-  }
-
   @Override
   public void setSequenceId(long seqId) throws IOException {
     throw new IllegalArgumentException("This is a key only Cell");
diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/Cell.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/Cell.java
index f208625e9c..78d4caf402 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/Cell.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/Cell.java
@@ -18,6 +18,7 @@
 
 package org.apache.hadoop.hbase;
 
+import java.util.stream.Stream;
 import org.apache.yetus.audience.InterfaceAudience;
 
 
@@ -201,10 +202,18 @@ public interface Cell {
   int getTagsLength();
 
   /**
-   * Returns the type of cell in a human readable format using {@link Type}
+   * Returns the type of cell in a human readable format using {@link Type}.
+   * Note : This does not expose the internal types of Cells like {@link KeyValue.Type#Maximum} and
+   * {@link KeyValue.Type#Minimum}
    * @return The data type this cell: one of Put, Delete, etc
    */
-  Type getType();
+  default Type getType() {
+    byte byteType = getTypeByte();
+    return Stream.of(Type.values())
+      .filter(t -> t.code == byteType)
+      .findAny()
+      .orElseThrow(() -> new UnsupportedOperationException("Invalid type of cell " + byteType));
+  }
 
   /**
    * The valid types for user to build the cell. Currently, This is subset of {@link KeyValue.Type}.
diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/ExtendedCell.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/ExtendedCell.java
index be6d96c7ce..07b0e3f798 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/ExtendedCell.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/ExtendedCell.java
@@ -162,17 +162,6 @@ public interface ExtendedCell extends RawCell, HeapSize, Cloneable {
    */
   int getTagsLength();
 
-  /**
-   * {@inheritDoc}
-   * <p>
-   * Note : This does not expose the internal types of Cells like {@link KeyValue.Type#Maximum} and
-   * {@link KeyValue.Type#Minimum}
-   */
-  @Override
-  default Type getType() {
-    return PrivateCellUtil.toType(getTypeByte());
-  }
-
   /**
    * @return The byte representation of the KeyValue.TYPE of this cell: one of Put, Delete, etc
    */
diff --git a/hbase-common/src/test/java/org/apache/hadoop/hbase/TestCellUtil.java b/hbase-common/src/test/java/org/apache/hadoop/hbase/TestCellUtil.java
index 60a1d55cd8..ae53948271 100644
--- a/hbase-common/src/test/java/org/apache/hadoop/hbase/TestCellUtil.java
+++ b/hbase-common/src/test/java/org/apache/hadoop/hbase/TestCellUtil.java
@@ -18,6 +18,7 @@
 
 package org.apache.hadoop.hbase;
 
+import static junit.framework.TestCase.fail;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -36,6 +37,7 @@ import org.apache.hadoop.hbase.util.Bytes;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
+import org.mockito.Mockito;
 
 @Category({MiscTests.class, SmallTests.class})
 public class TestCellUtil {
@@ -195,11 +197,6 @@ public class TestCellUtil {
       // TODO Auto-generated method stub
       return 0;
     }
-
-    @Override
-    public Type getType() {
-      return PrivateCellUtil.toType(getTypeByte());
-    }
   }
 
   /**
@@ -382,7 +379,7 @@ public class TestCellUtil {
         HConstants.EMPTY_BYTE_ARRAY);
     cellToString = CellUtil.getCellKeyAsString(cell);
     assertEquals(kv.toString(), cellToString);
-    
+
   }
 
   @Test
@@ -522,6 +519,29 @@ public class TestCellUtil {
     assertTrue(CellUtil.equals(kv, res));
   }
 
+  @Test
+  public void testGetType() throws IOException {
+    Cell c = Mockito.mock(Cell.class);
+    for (Cell.Type type : Cell.Type.values()) {
+      Mockito.when(c.getTypeByte()).thenReturn(type.getCode());
+      assertEquals(type, c.getType());
+    }
+
+    try {
+      Mockito.when(c.getTypeByte()).thenReturn(KeyValue.Type.Maximum.getCode());
+      c.getType();
+      fail("The code of Maximum can't be handled by Cell.Type");
+    } catch(UnsupportedOperationException e) {
+    }
+
+    try {
+      Mockito.when(c.getTypeByte()).thenReturn(KeyValue.Type.Minimum.getCode());
+      c.getType();
+      fail("The code of Maximum can't be handled by Cell.Type");
+    } catch(UnsupportedOperationException e) {
+    }
+  }
+
   private static class NonExtendedCell implements Cell {
     private KeyValue kv;
 
@@ -618,10 +638,5 @@ public class TestCellUtil {
     public int getTagsLength() {
       return this.kv.getTagsLength();
     }
-
-    @Override
-    public Type getType() {
-      return PrivateCellUtil.toType(getTypeByte());
-    }
   }
 }
diff --git a/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java b/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java
index bd45a09276..7c33ff82a2 100644
--- a/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java
+++ b/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java
@@ -737,10 +737,5 @@ public class TestKeyValue extends TestCase {
     public byte[] getTagsArray() {
       return this.kv.getTagsArray();
     }
-
-    @Override
-    public Type getType() {
-      return PrivateCellUtil.toType(getTypeByte());
-    }
   }
 }
