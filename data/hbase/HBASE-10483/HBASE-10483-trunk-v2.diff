diff --git hbase-client/src/main/java/org/apache/hadoop/hbase/ServerName.java hbase-client/src/main/java/org/apache/hadoop/hbase/ServerName.java
index acd6ee7..6f8a5c8 100644
--- hbase-client/src/main/java/org/apache/hadoop/hbase/ServerName.java
+++ hbase-client/src/main/java/org/apache/hadoop/hbase/ServerName.java
@@ -88,7 +88,7 @@ public class ServerName implements Comparable<ServerName>, Serializable {
   private final String hostnameOnly;
   private final int port;
   private final long startcode;
-
+  private int infoPort = 0;
   /**
    * Cached versioned bytes of this ServerName instance.
    * @see #getVersionedBytes()
@@ -197,6 +197,14 @@ public class ServerName implements Comparable<ServerName>, Serializable {
     return port;
   }
 
+  public void setInfoPort(int infoPort) {
+    this.infoPort = infoPort;
+  }
+
+  public int getInfoPort() {
+    return infoPort;
+  }
+
   public long getStartcode() {
     return startcode;
   }
@@ -271,6 +279,8 @@ public class ServerName implements Comparable<ServerName>, Serializable {
     if (compare != 0) return compare;
     compare = this.getPort() - other.getPort();
     if (compare != 0) return compare;
+    compare = this.getInfoPort() - other.getInfoPort();
+    if (compare != 0) return compare;
     return (int)(this.getStartcode() - other.getStartcode());
   }
 
@@ -358,7 +368,11 @@ public class ServerName implements Comparable<ServerName>, Serializable {
         MetaRegionServer rss =
           MetaRegionServer.PARSER.parseFrom(data, prefixLen, data.length - prefixLen);
         org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName sn = rss.getServer();
-        return valueOf(sn.getHostName(), sn.getPort(), sn.getStartCode());
+        ServerName serverName =  valueOf(sn.getHostName(), sn.getPort(), sn.getStartCode());
+        if (sn.hasInfoPort()) {
+          serverName.setInfoPort(sn.getInfoPort());
+        }
+        return serverName;
       } catch (InvalidProtocolBufferException e) {
         // A failed parse of the znode is pretty catastrophic. Rather than loop
         // retrying hoping the bad bytes will changes, and rather than change
diff --git hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
index 6eb0f5b..be4f1d1 100644
--- hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
+++ hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
@@ -140,6 +140,7 @@ import org.apache.hadoop.hbase.util.Addressing;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;
 import org.apache.hadoop.hbase.util.Pair;
+import org.apache.hadoop.hbase.zookeeper.MasterAddressTracker;
 import org.apache.hadoop.ipc.RemoteException;
 import org.apache.hadoop.util.StringUtils;
 import org.apache.zookeeper.KeeperException;
@@ -261,6 +262,21 @@ public class HBaseAdmin implements Abortable, Closeable {
     return connection;
   }
 
+  /**
+   * Get the address of the current master if one is available.  Returns null
+   * if no current master.
+   * @return Server name or null if timed out.
+   * @throws IOException 
+   * @throws KeeperException 
+   */
+  public ServerName getMasterAddress() throws IOException, KeeperException {
+    ConnectionManager.HConnectionImplementation connectionImpl =
+        (ConnectionManager.HConnectionImplementation) connection;
+
+    ZooKeeperKeepAliveConnection zkw = connectionImpl.getKeepAliveZooKeeperWatcher();
+    return MasterAddressTracker.getMasterAddress(zkw);
+  }
+
   /** @return - true if the master server is running. Throws an exception
    *  otherwise.
    * @throws ZooKeeperConnectionException
diff --git hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/MasterAddressTracker.java hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/MasterAddressTracker.java
index a177f50..b1baf32 100644
--- hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/MasterAddressTracker.java
+++ hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/MasterAddressTracker.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.hbase.zookeeper;
 
+import  org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.Abortable;
 import org.apache.hadoop.hbase.HConstants;
@@ -85,7 +86,13 @@ public class MasterAddressTracker extends ZooKeeperNodeTracker {
    */
   public ServerName getMasterAddress(final boolean refresh) {
     try {
-      return ServerName.parseFrom(super.getData(refresh));
+      ServerName sn = ServerName.parseFrom(super.getData(refresh));
+      if (sn != null && sn.getInfoPort() == 0) {
+        Configuration conf = this.watcher.getConfiguration();
+        sn.setInfoPort(conf.getInt(HConstants.MASTER_INFO_PORT,
+          HConstants.DEFAULT_MASTER_INFOPORT));
+      }
+      return sn;
     } catch (DeserializationException e) {
       LOG.warn("Failed parse", e);
       return null;
@@ -114,7 +121,13 @@ public class MasterAddressTracker extends ZooKeeperNodeTracker {
       throw new IOException("Can't get master address from ZooKeeper; znode data == null");
     }
     try {
-      return ServerName.parseFrom(data);
+      ServerName sn = ServerName.parseFrom(data);
+      if (sn != null && sn.getInfoPort() == 0) {
+        Configuration conf = zkw.getConfiguration();
+        sn.setInfoPort(conf.getInt(HConstants.MASTER_INFO_PORT,
+          HConstants.DEFAULT_MASTER_INFOPORT));
+      }
+      return sn;
     } catch (DeserializationException e) {
       KeeperException ke = new KeeperException.DataInconsistencyException();
       ke.initCause(e);
@@ -157,6 +170,7 @@ public class MasterAddressTracker extends ZooKeeperNodeTracker {
      HBaseProtos.ServerName.Builder snbuilder = HBaseProtos.ServerName.newBuilder();
      snbuilder.setHostName(sn.getHostname());
      snbuilder.setPort(sn.getPort());
+     snbuilder.setInfoPort(sn.getInfoPort());
      snbuilder.setStartCode(sn.getStartcode());
      mbuilder.setMaster(snbuilder.build());
      mbuilder.setRpcVersion(HConstants.RPC_CURRENT_VERSION);
diff --git hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/HBaseProtos.java hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/HBaseProtos.java
index 7acf1d3..dae9f84 100644
--- hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/HBaseProtos.java
+++ hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/HBaseProtos.java
@@ -6630,6 +6630,16 @@ public final class HBaseProtos {
      * <code>optional uint64 start_code = 3;</code>
      */
     long getStartCode();
+
+    // optional uint32 info_port = 4;
+    /**
+     * <code>optional uint32 info_port = 4;</code>
+     */
+    boolean hasInfoPort();
+    /**
+     * <code>optional uint32 info_port = 4;</code>
+     */
+    int getInfoPort();
   }
   /**
    * Protobuf type {@code ServerName}
@@ -6702,6 +6712,11 @@ public final class HBaseProtos {
               startCode_ = input.readUInt64();
               break;
             }
+            case 32: {
+              bitField0_ |= 0x00000008;
+              infoPort_ = input.readUInt32();
+              break;
+            }
           }
         }
       } catch (com.google.protobuf.InvalidProtocolBufferException e) {
@@ -6817,10 +6832,27 @@ public final class HBaseProtos {
       return startCode_;
     }
 
+    // optional uint32 info_port = 4;
+    public static final int INFO_PORT_FIELD_NUMBER = 4;
+    private int infoPort_;
+    /**
+     * <code>optional uint32 info_port = 4;</code>
+     */
+    public boolean hasInfoPort() {
+      return ((bitField0_ & 0x00000008) == 0x00000008);
+    }
+    /**
+     * <code>optional uint32 info_port = 4;</code>
+     */
+    public int getInfoPort() {
+      return infoPort_;
+    }
+
     private void initFields() {
       hostName_ = "";
       port_ = 0;
       startCode_ = 0L;
+      infoPort_ = 0;
     }
     private byte memoizedIsInitialized = -1;
     public final boolean isInitialized() {
@@ -6847,6 +6879,9 @@ public final class HBaseProtos {
       if (((bitField0_ & 0x00000004) == 0x00000004)) {
         output.writeUInt64(3, startCode_);
       }
+      if (((bitField0_ & 0x00000008) == 0x00000008)) {
+        output.writeUInt32(4, infoPort_);
+      }
       getUnknownFields().writeTo(output);
     }
 
@@ -6868,6 +6903,10 @@ public final class HBaseProtos {
         size += com.google.protobuf.CodedOutputStream
           .computeUInt64Size(3, startCode_);
       }
+      if (((bitField0_ & 0x00000008) == 0x00000008)) {
+        size += com.google.protobuf.CodedOutputStream
+          .computeUInt32Size(4, infoPort_);
+      }
       size += getUnknownFields().getSerializedSize();
       memoizedSerializedSize = size;
       return size;
@@ -6906,6 +6945,11 @@ public final class HBaseProtos {
         result = result && (getStartCode()
             == other.getStartCode());
       }
+      result = result && (hasInfoPort() == other.hasInfoPort());
+      if (hasInfoPort()) {
+        result = result && (getInfoPort()
+            == other.getInfoPort());
+      }
       result = result &&
           getUnknownFields().equals(other.getUnknownFields());
       return result;
@@ -6931,6 +6975,10 @@ public final class HBaseProtos {
         hash = (37 * hash) + START_CODE_FIELD_NUMBER;
         hash = (53 * hash) + hashLong(getStartCode());
       }
+      if (hasInfoPort()) {
+        hash = (37 * hash) + INFO_PORT_FIELD_NUMBER;
+        hash = (53 * hash) + getInfoPort();
+      }
       hash = (29 * hash) + getUnknownFields().hashCode();
       memoizedHashCode = hash;
       return hash;
@@ -7051,6 +7099,8 @@ public final class HBaseProtos {
         bitField0_ = (bitField0_ & ~0x00000002);
         startCode_ = 0L;
         bitField0_ = (bitField0_ & ~0x00000004);
+        infoPort_ = 0;
+        bitField0_ = (bitField0_ & ~0x00000008);
         return this;
       }
 
@@ -7091,6 +7141,10 @@ public final class HBaseProtos {
           to_bitField0_ |= 0x00000004;
         }
         result.startCode_ = startCode_;
+        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
+          to_bitField0_ |= 0x00000008;
+        }
+        result.infoPort_ = infoPort_;
         result.bitField0_ = to_bitField0_;
         onBuilt();
         return result;
@@ -7118,6 +7172,9 @@ public final class HBaseProtos {
         if (other.hasStartCode()) {
           setStartCode(other.getStartCode());
         }
+        if (other.hasInfoPort()) {
+          setInfoPort(other.getInfoPort());
+        }
         this.mergeUnknownFields(other.getUnknownFields());
         return this;
       }
@@ -7289,6 +7346,39 @@ public final class HBaseProtos {
         return this;
       }
 
+      // optional uint32 info_port = 4;
+      private int infoPort_ ;
+      /**
+       * <code>optional uint32 info_port = 4;</code>
+       */
+      public boolean hasInfoPort() {
+        return ((bitField0_ & 0x00000008) == 0x00000008);
+      }
+      /**
+       * <code>optional uint32 info_port = 4;</code>
+       */
+      public int getInfoPort() {
+        return infoPort_;
+      }
+      /**
+       * <code>optional uint32 info_port = 4;</code>
+       */
+      public Builder setInfoPort(int value) {
+        bitField0_ |= 0x00000008;
+        infoPort_ = value;
+        onChanged();
+        return this;
+      }
+      /**
+       * <code>optional uint32 info_port = 4;</code>
+       */
+      public Builder clearInfoPort() {
+        bitField0_ = (bitField0_ & ~0x00000008);
+        infoPort_ = 0;
+        onChanged();
+        return this;
+      }
+
       // @@protoc_insertion_point(builder_scope:ServerName)
     }
 
@@ -15787,32 +15877,33 @@ public final class HBaseProtos {
       "gionSpecifierType\022\r\n\005value\030\002 \002(\014\"?\n\023Regi" +
       "onSpecifierType\022\017\n\013REGION_NAME\020\001\022\027\n\023ENCO" +
       "DED_REGION_NAME\020\002\"%\n\tTimeRange\022\014\n\004from\030\001" +
-      " \001(\004\022\n\n\002to\030\002 \001(\004\"A\n\nServerName\022\021\n\thost_n" +
+      " \001(\004\022\n\n\002to\030\002 \001(\004\"T\n\nServerName\022\021\n\thost_n" +
       "ame\030\001 \002(\t\022\014\n\004port\030\002 \001(\r\022\022\n\nstart_code\030\003 ",
-      "\001(\004\"\033\n\013Coprocessor\022\014\n\004name\030\001 \002(\t\"-\n\016Name" +
-      "StringPair\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"" +
-      ",\n\rNameBytesPair\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030" +
-      "\002 \001(\014\"/\n\016BytesBytesPair\022\r\n\005first\030\001 \002(\014\022\016" +
-      "\n\006second\030\002 \002(\014\",\n\rNameInt64Pair\022\014\n\004name\030" +
-      "\001 \001(\t\022\r\n\005value\030\002 \001(\003\"\256\001\n\023SnapshotDescrip" +
-      "tion\022\014\n\004name\030\001 \002(\t\022\r\n\005table\030\002 \001(\t\022\030\n\rcre" +
-      "ation_time\030\003 \001(\003:\0010\022.\n\004type\030\004 \001(\0162\031.Snap" +
-      "shotDescription.Type:\005FLUSH\022\017\n\007version\030\005" +
-      " \001(\005\"\037\n\004Type\022\014\n\010DISABLED\020\000\022\t\n\005FLUSH\020\001\"}\n",
-      "\024ProcedureDescription\022\021\n\tsignature\030\001 \002(\t" +
-      "\022\020\n\010instance\030\002 \001(\t\022\030\n\rcreation_time\030\003 \001(" +
-      "\003:\0010\022&\n\rconfiguration\030\004 \003(\0132\017.NameString" +
-      "Pair\"\n\n\010EmptyMsg\"\033\n\007LongMsg\022\020\n\010long_msg\030" +
-      "\001 \002(\003\"\'\n\rBigDecimalMsg\022\026\n\016bigdecimal_msg" +
-      "\030\001 \002(\014\"5\n\004UUID\022\026\n\016least_sig_bits\030\001 \002(\004\022\025" +
-      "\n\rmost_sig_bits\030\002 \002(\004\"K\n\023NamespaceDescri" +
-      "ptor\022\014\n\004name\030\001 \002(\014\022&\n\rconfiguration\030\002 \003(" +
-      "\0132\017.NameStringPair\"$\n\020RegionServerInfo\022\020" +
-      "\n\010infoPort\030\001 \001(\005*r\n\013CompareType\022\010\n\004LESS\020",
-      "\000\022\021\n\rLESS_OR_EQUAL\020\001\022\t\n\005EQUAL\020\002\022\r\n\tNOT_E" +
-      "QUAL\020\003\022\024\n\020GREATER_OR_EQUAL\020\004\022\013\n\007GREATER\020" +
-      "\005\022\t\n\005NO_OP\020\006B>\n*org.apache.hadoop.hbase." +
-      "protobuf.generatedB\013HBaseProtosH\001\240\001\001"
+      "\001(\004\022\021\n\tinfo_port\030\004 \001(\r\"\033\n\013Coprocessor\022\014\n" +
+      "\004name\030\001 \002(\t\"-\n\016NameStringPair\022\014\n\004name\030\001 " +
+      "\002(\t\022\r\n\005value\030\002 \002(\t\",\n\rNameBytesPair\022\014\n\004n" +
+      "ame\030\001 \002(\t\022\r\n\005value\030\002 \001(\014\"/\n\016BytesBytesPa" +
+      "ir\022\r\n\005first\030\001 \002(\014\022\016\n\006second\030\002 \002(\014\",\n\rNam" +
+      "eInt64Pair\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\003\"" +
+      "\256\001\n\023SnapshotDescription\022\014\n\004name\030\001 \002(\t\022\r\n" +
+      "\005table\030\002 \001(\t\022\030\n\rcreation_time\030\003 \001(\003:\0010\022." +
+      "\n\004type\030\004 \001(\0162\031.SnapshotDescription.Type:" +
+      "\005FLUSH\022\017\n\007version\030\005 \001(\005\"\037\n\004Type\022\014\n\010DISAB",
+      "LED\020\000\022\t\n\005FLUSH\020\001\"}\n\024ProcedureDescription" +
+      "\022\021\n\tsignature\030\001 \002(\t\022\020\n\010instance\030\002 \001(\t\022\030\n" +
+      "\rcreation_time\030\003 \001(\003:\0010\022&\n\rconfiguration" +
+      "\030\004 \003(\0132\017.NameStringPair\"\n\n\010EmptyMsg\"\033\n\007L" +
+      "ongMsg\022\020\n\010long_msg\030\001 \002(\003\"\'\n\rBigDecimalMs" +
+      "g\022\026\n\016bigdecimal_msg\030\001 \002(\014\"5\n\004UUID\022\026\n\016lea" +
+      "st_sig_bits\030\001 \002(\004\022\025\n\rmost_sig_bits\030\002 \002(\004" +
+      "\"K\n\023NamespaceDescriptor\022\014\n\004name\030\001 \002(\014\022&\n" +
+      "\rconfiguration\030\002 \003(\0132\017.NameStringPair\"$\n" +
+      "\020RegionServerInfo\022\020\n\010infoPort\030\001 \001(\005*r\n\013C",
+      "ompareType\022\010\n\004LESS\020\000\022\021\n\rLESS_OR_EQUAL\020\001\022" +
+      "\t\n\005EQUAL\020\002\022\r\n\tNOT_EQUAL\020\003\022\024\n\020GREATER_OR_" +
+      "EQUAL\020\004\022\013\n\007GREATER\020\005\022\t\n\005NO_OP\020\006B>\n*org.a" +
+      "pache.hadoop.hbase.protobuf.generatedB\013H" +
+      "BaseProtosH\001\240\001\001"
     };
     com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
       new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
@@ -15866,7 +15957,7 @@ public final class HBaseProtos {
           internal_static_ServerName_fieldAccessorTable = new
             com.google.protobuf.GeneratedMessage.FieldAccessorTable(
               internal_static_ServerName_descriptor,
-              new java.lang.String[] { "HostName", "Port", "StartCode", });
+              new java.lang.String[] { "HostName", "Port", "StartCode", "InfoPort", });
           internal_static_Coprocessor_descriptor =
             getDescriptor().getMessageTypes().get(8);
           internal_static_Coprocessor_fieldAccessorTable = new
diff --git hbase-protocol/src/main/protobuf/HBase.proto hbase-protocol/src/main/protobuf/HBase.proto
index a966c40..63706fd 100644
--- hbase-protocol/src/main/protobuf/HBase.proto
+++ hbase-protocol/src/main/protobuf/HBase.proto
@@ -121,6 +121,7 @@ message ServerName {
   required string host_name = 1;
   optional uint32 port = 2;
   optional uint64 start_code = 3;
+  optional uint32 info_port = 4;
 }
 
 // Comment data structures
diff --git hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/master/BackupMasterStatusTmpl.jamon hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/master/BackupMasterStatusTmpl.jamon
index d4a5408..c222e3c 100644
--- hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/master/BackupMasterStatusTmpl.jamon
+++ hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/master/BackupMasterStatusTmpl.jamon
@@ -44,10 +44,9 @@ ServerName [] serverNames = masters.toArray(new ServerName[masters.size()]);
 <%if (!master.isActiveMaster()) %>
     <%if serverNames[0] != null %>
         <h2>Master</h2>
-        <a href="//<% serverNames[0].getHostname() %>:
-	   <% master.getConfiguration().getInt("hbase.master.info.port", 16010) %>/master-status"
+        <a href="//<% serverNames[0].getHostname() %>:<% serverNames[0].getInfoPort() %>/master-status"
 	     target="_blank">
-	   <% serverNames[0].getHostname() %>
+	   <% serverNames[0].getHostAndPort() %>
 	</a>
     <%else>
         Unable to parse master hostname.
@@ -66,8 +65,7 @@ ServerName [] serverNames = masters.toArray(new ServerName[masters.size()]);
     for (ServerName serverName : serverNames) {
     </%java>
     <tr>
-        <td><a href="//<% serverName.getHostname() %>:
-	  <% master.getConfiguration().getInt("hbase.master.info.port", 16010) %>/master-status"
+        <td><a href="//<% serverName.getHostname() %>:<% serverName.getInfoPort() %>/master-status"
 	     target="_blank">
 	  <% serverName.getHostname() %></a>
 	</td>
diff --git hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/regionserver/RSStatusTmpl.jamon hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/regionserver/RSStatusTmpl.jamon
index bd51662..c10a642 100644
--- hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/regionserver/RSStatusTmpl.jamon
+++ hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/regionserver/RSStatusTmpl.jamon
@@ -40,7 +40,7 @@ org.apache.hadoop.hbase.protobuf.generated.ClusterStatusProtos.RegionLoad;
   ServerInfo serverInfo = ProtobufUtil.getServerInfo(regionServer);
   ServerName serverName = ProtobufUtil.toServerName(serverInfo.getServerName());
   List<HRegionInfo> onlineRegions = ProtobufUtil.getOnlineRegions(regionServer);
-  int masterInfoPort = regionServer.getConfiguration().getInt("hbase.master.info.port", 16010);
+  int masterInfoPort = regionServer.getMasterAddressManager().getMasterAddress().getInfoPort();
 </%java>
 <!--[if IE]>
 <!DOCTYPE html>
diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
index 0104c01..7b794ae 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
@@ -596,6 +596,9 @@ MasterServices, Server {
         this.infoServer.addServlet("dump", "/dump", MasterDumpServlet.class);
         this.infoServer.setAttribute(MASTER, this);
         this.infoServer.start();
+        this.serverName.setInfoPort(this.infoServer.getPort());
+      } else {
+        this.serverName.setInfoPort(port);
       }
 
       this.registeredZKListenersBeforeRecovery = this.zooKeeper.getListeners();
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin.java hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin.java
index ea56574..7109f53 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin.java
@@ -71,6 +71,7 @@ import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.Pair;
 import org.apache.hadoop.hbase.zookeeper.ZKTableReadOnly;
 import org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher;
+import org.apache.zookeeper.KeeperException;
 import org.junit.*;
 import org.junit.experimental.categories.Category;
 
@@ -113,6 +114,12 @@ public class TestAdmin {
   public void tearDown() throws Exception {
   }
 
+  @Test
+  public void testgetMasterAddress() throws IOException, KeeperException {
+    ServerName sn = this.admin.getMasterAddress();
+    assertEquals(TEST_UTIL.getHBaseCluster().getMaster().getServerName(), sn);
+  }
+
   @Test (timeout=300000)
   public void testSplitFlushCompactUnknownTable() throws InterruptedException {
     final String unknowntable = "fubar";
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestActiveMasterManager.java hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestActiveMasterManager.java
index bbb9337..8fab0a4 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestActiveMasterManager.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestActiveMasterManager.java
@@ -74,6 +74,7 @@ public class TestActiveMasterManager {
 
     // Create the master node with a dummy address
     ServerName master = ServerName.valueOf("localhost", 1, System.currentTimeMillis());
+    master.setInfoPort(2);
     // Should not have a master yet
     DummyMaster dummyMaster = new DummyMaster(zk,master);
     ClusterStatusTracker clusterStatusTracker =
@@ -117,8 +118,10 @@ public class TestActiveMasterManager {
     // Create the master node with a dummy address
     ServerName firstMasterAddress =
         ServerName.valueOf("localhost", 1, System.currentTimeMillis());
+    firstMasterAddress.setInfoPort(3);
     ServerName secondMasterAddress =
         ServerName.valueOf("localhost", 2, System.currentTimeMillis());
+    secondMasterAddress.setInfoPort(4);
 
     // Should not have a master yet
     DummyMaster ms1 = new DummyMaster(zk,firstMasterAddress);
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMasterAddressManager.java hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMasterAddressManager.java
index 9fd8260..7bd68fa 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMasterAddressManager.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMasterAddressManager.java
@@ -76,6 +76,7 @@ public class TestMasterAddressManager {
     String host = "localhost";
     int port = 1234;
     ServerName sn = ServerName.valueOf(host, port, System.currentTimeMillis());
+    sn.setInfoPort(port + 1);
     LOG.info("Creating master node");
     MasterAddressTracker.setMasterAddress(zk, zk.getMasterAddressZNode(), sn);
 
