Index: src/test/java/org/apache/hadoop/hbase/TestServerName.java
===================================================================
--- src/test/java/org/apache/hadoop/hbase/TestServerName.java	(revision 1538857)
+++ src/test/java/org/apache/hadoop/hbase/TestServerName.java	(working copy)
@@ -82,6 +82,24 @@
       ServerName.getServerStartcodeFromServerName(sn.toString()));
   }
 
+  @Test
+  public void getServerInfoPort() {
+    ServerName sn = new ServerName("www.example.org", 1234, 5678);
+    assertEquals(0, sn.getInfoPort());
+
+    sn = new ServerName("www.example.org", 1234, 1235, 5678);
+    assertEquals(1235, sn.getInfoPort());
+
+    sn = new ServerName("www.example.org,1234,5678");
+    assertEquals(0, sn.getInfoPort());
+
+    sn = new ServerName("www.example.org,1234-1235,5678");
+    assertEquals(1235, sn.getInfoPort());
+    
+    assertTrue(ServerName.SERVERNAME_PATTERN_V2
+        .matcher("localhost,52139-46996,1383569599315").matches());
+  }
+
   @org.junit.Rule
   public org.apache.hadoop.hbase.ResourceCheckerJUnitRule cu =
     new org.apache.hadoop.hbase.ResourceCheckerJUnitRule();
Index: src/test/java/org/apache/hadoop/hbase/master/TestClockSkewDetection.java
===================================================================
--- src/test/java/org/apache/hadoop/hbase/master/TestClockSkewDetection.java	(revision 1538857)
+++ src/test/java/org/apache/hadoop/hbase/master/TestClockSkewDetection.java	(working copy)
@@ -82,7 +82,7 @@
 
     LOG.debug("regionServerStartup 1");
     InetAddress ia1 = InetAddress.getLocalHost();
-    sm.regionServerStartup(ia1, 1234, -1, System.currentTimeMillis());
+    sm.regionServerStartup(ia1, 1234, -1 , -1, System.currentTimeMillis());
 
     final Configuration c = HBaseConfiguration.create();
     long maxSkew = c.getLong("hbase.master.maxclockskew", 30000);
@@ -91,7 +91,7 @@
     try {
       LOG.debug("regionServerStartup 2");
       InetAddress ia2 = InetAddress.getLocalHost();
-      sm.regionServerStartup(ia2, 1235, -1, System.currentTimeMillis() - maxSkew * 2);
+      sm.regionServerStartup(ia2, 1235, -1, -1, System.currentTimeMillis() - maxSkew * 2);
       fail("HMaster should have thrown an ClockOutOfSyncException but didn't.");
     } catch(ClockOutOfSyncException e) {
       //we want an exception
@@ -101,7 +101,7 @@
     // make sure values above warning threshold but below max threshold don't kill
     LOG.debug("regionServerStartup 3");
     InetAddress ia3 = InetAddress.getLocalHost();
-    sm.regionServerStartup(ia3, 1236, -1, System.currentTimeMillis() - warningSkew * 2);
+    sm.regionServerStartup(ia3, 1236, -1, -1, System.currentTimeMillis() - warningSkew * 2);
     
   }
 
Index: src/main/resources/hbase-webapps/master/table.jsp
===================================================================
--- src/main/resources/hbase-webapps/master/table.jsp	(revision 1538857)
+++ src/main/resources/hbase-webapps/master/table.jsp	(working copy)
@@ -18,7 +18,7 @@
  */
 --%>
 <%@ page contentType="text/html;charset=UTF-8"
-  import="java.util.HashMap"
+  import="java.util.TreeMap"
   import="org.apache.hadoop.io.Writable"
   import="org.apache.hadoop.conf.Configuration"
   import="org.apache.hadoop.hbase.client.HTable"
@@ -50,9 +50,6 @@
   if (showFragmentation) {
       frags = FSUtils.getTableFragmentation(master);
   }
-  // HARDCODED FOR NOW TODO: FIX GET FROM ZK
-  // This port might be wrong if RS actually ended up using something else.
-  int infoPort = conf.getInt("hbase.regionserver.info.port", 60030);
 %>
 
 <?xml version="1.0" encoding="UTF-8" ?>
@@ -114,7 +111,7 @@
 %>
 <%= tableHeader %>
 <%
-  String url = "http://" + rl.getHostname() + ":" + infoPort + "/";
+  String url = "http://" + rl.getHostname() + ":" + rl.getInfoPort() + "/";
 %>
 <tr>
   <td><%= tableName %></td>
@@ -133,11 +130,11 @@
   HRegionInfo meta = HRegionInfo.FIRST_META_REGIONINFO;
   ServerName metaLocation = master.getCatalogTracker().waitForMeta(1);
   for (int i = 0; i < 1; i++) {
-    String url = "http://" + metaLocation.getHostname() + ":" + infoPort + "/";
+    String url = "http://" + metaLocation.getHostname() + ":" + metaLocation.getInfoPort() + "/";
 %>
 <tr>
   <td><%= meta.getRegionNameAsString() %></td>
-    <td><a href="<%= url %>"><%= metaLocation.getHostname().toString() + ":" + infoPort %></a></td>
+    <td><a href="<%= url %>"><%= metaLocation.getHostname().toString() + ":" + metaLocation.getPort() %></a></td>
     <td>-</td><td><%= Bytes.toString(meta.getStartKey()) %></td><td><%= Bytes.toString(meta.getEndKey()) %></td>
 </tr>
 <%  } %>
@@ -169,7 +166,7 @@
 <%  } %>
 </table>
 <%
-  Map<String, Integer> regDistribution = new HashMap<String, Integer>();
+  Map<ServerName, Integer> regDistribution = new TreeMap<ServerName, Integer>();
   Map<HRegionInfo, ServerName> regions = table.getRegionLocations();
   if(regions != null && regions.size() > 0) { %>
 <%=     tableHeader %>
@@ -188,22 +185,20 @@
         if (map.containsKey(regionInfo.getRegionName())) {
           req = map.get(regionInfo.getRegionName()).getRequestsCount();
         }
-        // This port might be wrong if RS actually ended up using something else.
-        urlRegionServer =
-            "http://" + addr.getHostname().toString() + ":" + infoPort + "/";
-        Integer i = regDistribution.get(urlRegionServer);
+        Integer i = regDistribution.get(addr);
         if (null == i) i = new Integer(0);
-        regDistribution.put(urlRegionServer, i+1);
+        regDistribution.put(addr, i+1);
       }
     }
 %>
 <tr>
   <td><%= Bytes.toStringBinary(regionInfo.getRegionName())%></td>
   <%
-  if (urlRegionServer != null) {
+  if (addr != null) {
+      String url = "http://" + addr.getHostname() + ":" + addr.getInfoPort() + "/";
   %>
   <td>
-    <a href="<%= urlRegionServer %>"><%= addr.getHostname().toString() + ":" + infoPort %></a>
+    <a href="<%= url %>"><%= addr.getHostname().toString() + ":" + addr.getPort() %></a>
   </td>
   <%
   } else {
@@ -221,10 +216,12 @@
 <h2>Regions by Region Server</h2>
 <table><tr><th>Region Server</th><th>Region Count</th></tr>
 <%
-  for (Map.Entry<String, Integer> rdEntry : regDistribution.entrySet()) {
+  for (Map.Entry<ServerName, Integer> rdEntry : regDistribution.entrySet()) {
+      ServerName addr = rdEntry.getKey();
+      String url = "http://" + addr.getHostname() + ":" + addr.getInfoPort() + "/";
 %>
 <tr>
-  <td><%= rdEntry.getKey()%></td>
+  <td><a href="<%= url %>"><%= addr.getHostname().toString() + ":" + addr.getPort() %></a></td>
   <td><%= rdEntry.getValue()%></td>
 </tr>
 <% } %>
Index: src/main/java/org/apache/hadoop/hbase/HConstants.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/HConstants.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/HConstants.java	(working copy)
@@ -167,6 +167,9 @@
   /** Parameter name for port region server listens on. */
   public static final String REGIONSERVER_PORT = "hbase.regionserver.port";
 
+  /** Parameter name for port region server's info server listens on. */
+  public static final String REGIONSERVER_INFO_PORT = "hbase.regionserver.info.port";
+  
   /** Default port region server listens on. */
   public static final int DEFAULT_REGIONSERVER_PORT = 60020;
 
@@ -318,6 +321,9 @@
   /** The server column qualifier */
   public static final byte [] SERVER_QUALIFIER = Bytes.toBytes("server");
 
+  /** The info port column qualifier */
+  public static final byte [] INFOPORT_QUALIFIER = Bytes.toBytes("infoport");
+  
   /** The startcode column qualifier */
   public static final byte [] STARTCODE_QUALIFIER = Bytes.toBytes("serverstartcode");
 
Index: src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java	(working copy)
@@ -36,6 +36,7 @@
 import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.TableNotFoundException;
 import org.apache.hadoop.hbase.errorhandling.TimeoutException;
+import org.apache.hadoop.hbase.util.Addressing;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.Writables;
 
@@ -306,10 +307,17 @@
           HConstants.STARTCODE_QUALIFIER);
         long startcode = -1L;
         if (value != null && value.length > 0) startcode = Bytes.toLong(value);
+        
+        value = rowResult.getValue(HConstants.CATALOG_FAMILY,
+          HConstants.INFOPORT_QUALIFIER);
+        int infoPort = -1;
+        if (value != null && value.length > 0) infoPort = Bytes.toInt(value);
+
         if (!(info.isOffline() || info.isSplit())) {
           ServerName sn = null;
           if (hostAndPort != null && hostAndPort.length() > 0) {
-            sn = new ServerName(hostAndPort, startcode);
+            sn = new ServerName(Addressing.parseHostname(hostAndPort),
+                Addressing.parsePort(hostAndPort), infoPort, startcode);
           }
           regions.put(new UnmodifyableHRegionInfo(info), sn);
         }
Index: src/main/java/org/apache/hadoop/hbase/master/ServerManager.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/master/ServerManager.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/master/ServerManager.java	(working copy)
@@ -150,13 +150,14 @@
    * Let the server manager know a new regionserver has come online
    * @param ia The remote address
    * @param port The remote port
+   * @param infoPort The remote info port
    * @param serverStartcode
    * @param serverCurrentTime The current time of the region server in ms
    * @return The ServerName we know this server as.
    * @throws IOException
    */
   ServerName regionServerStartup(final InetAddress ia, final int port,
-    final long serverStartcode, long serverCurrentTime)
+      final int infoPort, final long serverStartcode, long serverCurrentTime)
   throws IOException {
     // Test for case where we get a region startup message from a regionserver
     // that has been quickly restarted but whose znode expiration handler has
@@ -165,7 +166,7 @@
     // is, reject the server and trigger its expiration. The next time it comes
     // in, it should have been removed from serverAddressToServerInfo and queued
     // for processing by ProcessServerShutdown.
-    ServerName sn = new ServerName(ia.getHostName(), port, serverStartcode);
+    ServerName sn = new ServerName(ia.getHostName(), port, infoPort, serverStartcode);
     checkClockSkew(sn, serverCurrentTime);
     checkIsDead(sn, "STARTUP");
     checkAlreadySameHostPort(sn);
Index: src/main/java/org/apache/hadoop/hbase/master/HMaster.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/master/HMaster.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/master/HMaster.java	(working copy)
@@ -1079,9 +1079,18 @@
   public MapWritable regionServerStartup(final int port,
     final long serverStartCode, final long serverCurrentTime)
   throws IOException {
+    int infoPort = conf.getInt("hbase.regionserver.info.port", 60030);
+    return regionServerStartup(port, infoPort, serverStartCode,
+      serverCurrentTime);
+  }
+  
+  @Override
+  public MapWritable regionServerStartup(final int port, final int infoPort, 
+    final long serverStartCode, final long serverCurrentTime)
+  throws IOException {
     // Register with server manager
     InetAddress ia = HBaseServer.getRemoteIp();
-    ServerName rs = this.serverManager.regionServerStartup(ia, port,
+    ServerName rs = this.serverManager.regionServerStartup(ia, port, infoPort,
       serverStartCode, serverCurrentTime);
     // Send back some config info
     MapWritable mw = createConfigurationSubset();
Index: src/main/java/org/apache/hadoop/hbase/master/HMasterCommandLine.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/master/HMasterCommandLine.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/master/HMasterCommandLine.java	(working copy)
@@ -143,7 +143,7 @@
                  Integer.toString(clientPort));
         // Need to have the zk cluster shutdown when master is shutdown.
         // Run a subclass that does the zk cluster shutdown on its way out.
-        LocalHBaseCluster cluster = new LocalHBaseCluster(conf, 1, 1,
+        LocalHBaseCluster cluster = new LocalHBaseCluster(conf, 1, 3,
                                                           LocalHMaster.class, HRegionServer.class);
         ((LocalHMaster)cluster.getMaster(0)).setZKCluster(zooKeeperCluster);
         cluster.startup();
Index: src/main/java/org/apache/hadoop/hbase/ServerName.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/ServerName.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/ServerName.java	(working copy)
@@ -63,11 +63,22 @@
    * startcode.
    */
   public static final String SERVERNAME_SEPARATOR = ",";
+  
+	/**
+   * This character is used as separator between port and infoprt.
+   */
+  public static final String PORT_SEPARATOR = "-";
 
   public static Pattern SERVERNAME_PATTERN =
     Pattern.compile("[^" + SERVERNAME_SEPARATOR + "]+" +
       SERVERNAME_SEPARATOR + Addressing.VALID_PORT_REGEX +
       SERVERNAME_SEPARATOR + Addressing.VALID_PORT_REGEX + "$");
+  
+	public static Pattern SERVERNAME_PATTERN_V2 = Pattern.compile("[^"
+      + SERVERNAME_SEPARATOR + "]+" + SERVERNAME_SEPARATOR
+      + Addressing.VALID_PORT_REGEX + PORT_SEPARATOR
+      + Addressing.VALID_PORT_REGEX + SERVERNAME_SEPARATOR
+      + Addressing.VALID_PORT_REGEX + "$");
 
   /**
    * What to use if server name is unknown.
@@ -76,6 +87,7 @@
 
   private final String servername;
   private final String hostname;
+  private final int infoPort;
   private final int port;
   private final long startcode;
 
@@ -86,20 +98,26 @@
   private byte [] bytes;
 
   public ServerName(final String hostname, final int port, final long startcode) {
+    this(hostname, port, 0, startcode);
+  }
+
+  public ServerName(final String hostname, final int port, final int infoPort,
+      final long startcode) {
     this.hostname = hostname;
     this.port = port;
+    this.infoPort = infoPort;
     this.startcode = startcode;
     this.servername = getServerName(hostname, port, startcode);
   }
 
   public ServerName(final String serverName) {
     this(parseHostname(serverName), parsePort(serverName),
-      parseStartcode(serverName));
+        parseInfoPort(serverName), parseStartcode(serverName));
   }
 
   public ServerName(final String hostAndPort, final long startCode) {
-    this(Addressing.parseHostname(hostAndPort),
-      Addressing.parsePort(hostAndPort), startCode);
+    this(Addressing.parseHostname(hostAndPort), Addressing
+        .parsePort(hostAndPort), 0, startCode);
   }
 
   public static String parseHostname(final String serverName) {
@@ -111,10 +129,18 @@
   }
 
   public static int parsePort(final String serverName) {
-    String [] split = serverName.split(SERVERNAME_SEPARATOR);
-    return Integer.parseInt(split[1]);
+    String[] split = serverName.split(SERVERNAME_SEPARATOR);
+    String[] ports = split[1].split(PORT_SEPARATOR);
+    return Integer.parseInt(ports[0]);
   }
 
+  public static int parseInfoPort(final String serverName) {
+    String[] split = serverName.split(SERVERNAME_SEPARATOR);
+    String[] ports = split[1].split(PORT_SEPARATOR);
+    if (ports.length < 2) return 0;
+    return Integer.parseInt(ports[1]);
+  }
+
   public static long parseStartcode(final String serverName) {
     int index = serverName.lastIndexOf(SERVERNAME_SEPARATOR);
     return Long.parseLong(serverName.substring(index + 1));
@@ -140,6 +166,19 @@
     return servername;
   }
 
+  public String getHostnameWithInfoPort() {
+    final StringBuilder name = new StringBuilder(hostname.length() + 1 + 5 + 1
+        + 5 + 1 + 13);
+    name.append(hostname);
+    name.append(SERVERNAME_SEPARATOR);
+    name.append(port);
+    name.append(PORT_SEPARATOR);
+    name.append(infoPort);
+    name.append(SERVERNAME_SEPARATOR);
+    name.append(startcode);
+    return name.toString();
+  }
+
   public String getHostname() {
     return hostname;
   }
@@ -148,6 +187,10 @@
     return port;
   }
 
+  public int getInfoPort() {
+    return infoPort;
+  }
+
   public long getStartcode() {
     return startcode;
   }
@@ -289,7 +332,10 @@
    * @return A ServerName instance.
    */
   public static ServerName parseServerName(final String str) {
-    return SERVERNAME_PATTERN.matcher(str).matches()? new ServerName(str):
-      new ServerName(str, NON_STARTCODE);
+    if (SERVERNAME_PATTERN_V2.matcher(str).matches()
+        || SERVERNAME_PATTERN.matcher(str).matches()) {
+      return new ServerName(str);
+    }
+    return new ServerName(str, NON_STARTCODE);
   }
 }
Index: src/main/java/org/apache/hadoop/hbase/regionserver/RSStatusServlet.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/regionserver/RSStatusServlet.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/regionserver/RSStatusServlet.java	(working copy)
@@ -40,6 +40,13 @@
     assert hrs != null : "No RS in context!";
     
     resp.setContentType("text/html");
+    
+    if (!hrs.isOnline()) {
+      resp.getWriter().write("The RegionServer is initializing!");
+      resp.getWriter().close();
+      return;
+    }
+    
     RSStatusTmpl tmpl = new RSStatusTmpl();
     if (req.getParameter("format") != null)
       tmpl.setFormat(req.getParameter("format"));
Index: src/main/java/org/apache/hadoop/hbase/regionserver/RSDumpServlet.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/regionserver/RSDumpServlet.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/regionserver/RSDumpServlet.java	(working copy)
@@ -50,9 +50,16 @@
     assert hrsconf != null : "No RS conf in context";
 
     response.setContentType("text/plain");
+    
+    if (!hrs.isOnline()) {
+      response.getWriter().write("The RegionServer is initializing!");
+      response.getWriter().close();
+      return;
+    }
+    
     OutputStream os = response.getOutputStream();
     PrintWriter out = new PrintWriter(os);
-    
+
     out.println("Master status for " + hrs.getServerName()
         + " as of " + new Date());
     
Index: src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java	(working copy)
@@ -448,7 +448,7 @@
     if (initialIsa.getAddress() == null) {
       throw new IllegalArgumentException("Failed resolve of " + initialIsa);
     }
-
+    
     this.rand = new Random(initialIsa.hashCode());
     this.rpcServer = HBaseRPC.getServer(this,
       new Class<?>[]{HRegionInterface.class, HBaseRPCErrorHandler.class,
@@ -484,6 +484,10 @@
         abort("Uncaught exception in service thread " + t.getName(), e);
       }
     };
+
+    // Put up the webui.  Webui may come up on port other than configured if
+    // that port is occupied. Adjust serverInfo if this is the case.
+    this.webuiport = putUpWebUI();
   }
 
   /** Handle all the snapshot requests to this server */
@@ -1068,7 +1072,7 @@
         if (key.equals(HConstants.KEY_FOR_HOSTNAME_SEEN_BY_MASTER)) {
           String hostnameFromMasterPOV = e.getValue().toString();
           this.serverNameFromMasterPOV = new ServerName(hostnameFromMasterPOV,
-            this.isa.getPort(), this.startcode);
+            this.isa.getPort(), this.webuiport, this.startcode);
           LOG.info("Master passed us hostname to use. Was=" +
             this.isa.getHostName() + ", Now=" +
             this.serverNameFromMasterPOV.getHostname());
@@ -1706,10 +1710,6 @@
     this.leases.setName(n + ".leaseChecker");
     this.leases.start();
 
-    // Put up the webui.  Webui may come up on port other than configured if
-    // that port is occupied. Adjust serverInfo if this is the case.
-    this.webuiport = putUpWebUI();
-
     if (this.replicationSourceHandler == this.replicationSinkHandler &&
         this.replicationSourceHandler != null) {
       this.replicationSourceHandler.startReplicationService();
@@ -1736,7 +1736,7 @@
    * @throws IOException
    */
   private int putUpWebUI() throws IOException {
-    int port = this.conf.getInt("hbase.regionserver.info.port", 60030);
+    int port = this.conf.getInt(HConstants.REGIONSERVER_INFO_PORT, 60030);
     // -1 is for disabling info server
     if (port < 0) return port;
     String addr = this.conf.get("hbase.regionserver.info.bindAddress", "0.0.0.0");
@@ -1762,7 +1762,7 @@
         port++;
       }
     }
-    return port;
+    return this.infoServer.getPort();
   }
 
   /*
@@ -2084,7 +2084,7 @@
         "with port=" + this.isa.getPort() + ", startcode=" + this.startcode);
       long now = EnvironmentEdgeManager.currentTimeMillis();
       int port = this.isa.getPort();
-      result = this.hbaseMaster.regionServerStartup(port, this.startcode, now);
+      result = this.hbaseMaster.regionServerStartup(port, this.webuiport, this.startcode, now);
     } catch (RemoteException e) {
       IOException ioe = e.unwrapRemoteException();
       if (ioe instanceof ClockOutOfSyncException) {
@@ -3946,7 +3946,7 @@
   public ServerName getServerName() {
     // Our servername could change after we talk to the master.
     return this.serverNameFromMasterPOV == null?
-      new ServerName(this.isa.getHostName(), this.isa.getPort(), this.startcode):
+      new ServerName(this.isa.getHostName(), this.isa.getPort(), this.webuiport, this.startcode):
         this.serverNameFromMasterPOV;
   }
 
Index: src/main/java/org/apache/hadoop/hbase/catalog/MetaReader.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/catalog/MetaReader.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/catalog/MetaReader.java	(working copy)
@@ -38,6 +38,7 @@
 import org.apache.hadoop.hbase.client.ResultScanner;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.ipc.HRegionInterface;
+import org.apache.hadoop.hbase.util.Addressing;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.Pair;
 import org.apache.hadoop.hbase.util.PairOfSameType;
@@ -362,10 +363,18 @@
       HConstants.SERVER_QUALIFIER);
     if (value == null || value.length == 0) return null;
     String hostAndPort = Bytes.toString(value);
+
+    value = r
+        .getValue(HConstants.CATALOG_FAMILY, HConstants.INFOPORT_QUALIFIER);
+    int infoPort = -1;
+    if (value != null && value.length > 0) infoPort = Bytes.toInt(value);
+    
     value = r.getValue(HConstants.CATALOG_FAMILY,
       HConstants.STARTCODE_QUALIFIER);
     if (value == null || value.length == 0) return null;
-    return new ServerName(hostAndPort, Bytes.toLong(value));
+    
+    return new ServerName(Addressing.parseHostname(hostAndPort),
+        Addressing.parsePort(hostAndPort), infoPort, Bytes.toLong(value));
   }
 
   /**
Index: src/main/java/org/apache/hadoop/hbase/catalog/MetaEditor.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/catalog/MetaEditor.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/catalog/MetaEditor.java	(working copy)
@@ -389,6 +389,8 @@
   private static Put addLocation(final Put p, final ServerName sn) {
     p.add(HConstants.CATALOG_FAMILY, HConstants.SERVER_QUALIFIER,
       Bytes.toBytes(sn.getHostAndPort()));
+    p.add(HConstants.CATALOG_FAMILY, HConstants.INFOPORT_QUALIFIER,
+      Bytes.toBytes(sn.getInfoPort()));
     p.add(HConstants.CATALOG_FAMILY, HConstants.STARTCODE_QUALIFIER,
       Bytes.toBytes(sn.getStartcode()));
     return p;
Index: src/main/java/org/apache/hadoop/hbase/catalog/RootLocationEditor.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/catalog/RootLocationEditor.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/catalog/RootLocationEditor.java	(working copy)
@@ -62,7 +62,7 @@
     LOG.info("Setting ROOT region location in ZooKeeper as " + location);
     try {
       ZKUtil.createAndWatch(zookeeper, zookeeper.rootServerZNode,
-        Bytes.toBytes(location.toString()));
+        Bytes.toBytes(location.getHostnameWithInfoPort()));
     } catch(KeeperException.NodeExistsException nee) {
       LOG.debug("ROOT region location already existed, updated location");
       ZKUtil.setData(zookeeper, zookeeper.rootServerZNode,
Index: src/main/java/org/apache/hadoop/hbase/ipc/HMasterRegionInterface.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/ipc/HMasterRegionInterface.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/ipc/HMasterRegionInterface.java	(working copy)
@@ -59,6 +59,21 @@
   throws IOException;
 
   /**
+   * Called when a region server first starts.
+   * @param port Port number this regionserver is up on.
+   * @param infoPort Port number this regionserver's info server is up on.
+   * @param serverStartcode This servers' startcode.
+   * @param serverCurrentTime The current time of the region server in ms
+   * @throws IOException e
+   * @return Configuration for the regionserver to use: e.g. filesystem,
+   * hbase rootdir, the hostname to use creating the RegionServer ServerName,
+   * etc.
+   */
+  public MapWritable regionServerStartup(final int port, final int infoPort,
+      final long serverStartcode, final long serverCurrentTime)
+  throws IOException;
+  
+  /**
    * @param sn {@link ServerName#getVersionedBytes()}
    * @param hsl Server load.
    * @throws IOException
Index: src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java	(revision 1538857)
+++ src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java	(working copy)
@@ -140,6 +140,8 @@
     // clash over default ports.
     conf.set(HConstants.MASTER_PORT, "0");
     conf.set(HConstants.REGIONSERVER_PORT, "0");
+    conf.set(HConstants.REGIONSERVER_INFO_PORT, "0");
+
     this.masterClass = (Class<? extends HMaster>)
       conf.getClass(HConstants.MASTER_IMPL, masterClass);
     // Start the HMasters.
Index: src/main/jamon/org/apache/hadoop/hbase/tmpl/master/MasterStatusTmpl.jamon
===================================================================
--- src/main/jamon/org/apache/hadoop/hbase/tmpl/master/MasterStatusTmpl.jamon	(revision 1538857)
+++ src/main/jamon/org/apache/hadoop/hbase/tmpl/master/MasterStatusTmpl.jamon	(working copy)
@@ -253,9 +253,10 @@
    ServerName [] serverNames = servers.toArray(new ServerName[servers.size()]);
      Arrays.sort(serverNames);
      for (ServerName serverName: serverNames) {
-       // TODO: this is incorrect since this conf might differ from RS to RS
-       // or be set to 0 to get ephemeral ports
-       int infoPort = master.getConfiguration().getInt("hbase.regionserver.info.port", 60030);
+	   int infoPort = serverName.getInfoPort();
+	   if (infoPort == -1) {
+	   	 infoPort = master.getConfiguration().getInt("hbase.regionserver.info.port", 60030);
+	   }
        String url = "http://" + serverName.getHostname() + ":" + infoPort + "/";
        HServerLoad hsl = master.getServerManager().getLoad(serverName);
        String loadStr = hsl == null? "-": hsl.toString();
@@ -286,7 +287,6 @@
    ServerName [] deadServerNames = deadServers.toArray(new ServerName[deadServers.size()]);
      Arrays.sort(deadServerNames);
      for (ServerName deadServerName: deadServerNames) {
-       int infoPort = master.getConfiguration().getInt("hbase.regionserver.info.port", 60030);
 </%java>
 <tr><td><% deadServerName %></td></tr>
 <%java>
