diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java
index 4398794..aebffd6 100644
--- a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java
@@ -233,5 +233,35 @@
   String MAJOR_COMPACTED_CELLS_SIZE = "majorCompactedCellsSize";
   String MAJOR_COMPACTED_CELLS_SIZE_DESC =
       "The total amount of data processed during major compactions, in bytes";
+  String CELL_COUNT_MOVE_TO_MOB = "cellCountMoveToMob";
+  String CELL_COUNT_MOVE_TO_MOB_DESC = "The number of cells moved to mob during compaction";
+  String CELL_COUNT_MOVE_FROM_MOB = "cellCountMoveFromMob";
+  String CELL_COUNT_MOVE_FROM_MOB_DESC = "The number of cells moved from mob during compaction";
+  String CELL_SIZE_MOVE_TO_MOB = "cellSizeMoveToMob";
+  String CELL_SIZE_MOVE_TO_MOB_DESC =
+      "The total amount of cells move to mob during compaction, in bytes";
+  String CELL_SIZE_MOVE_FROM_MOB = "cellSizeMoveFromMob";
+  String CELL_SIZE_MOVE_FROM_MOB_DESC =
+      "The total amount of cells move from mob during compaction, in bytes";
+  String MOB_FLUSH_COUNT = "mobFlushCount";
+  String MOB_FLUSH_COUNT_DESC = "The number of the flushes in mob-enabled stores";
+  String FLUSHED_MOB_CELL_COUNT = "flushedMobCellCount";
+  String FLUSHED_MOB_CELL_COUNT_DESC = "The number of mob cells flushed to disk";
+  String FLUSHED_MOB_CELL_SIZE = "flushedMobCellSize";
+  String FLUSHED_MOB_CELL_SIZE_DESC = "The total amount of mob cells flushed to disk, in bytes";
+  String SCAN_MOB_CELL_COUNT = "scanMobCellCount";
+  String SCAN_MOB_CELL_COUNT_DESC = "The number of scanned mob cells";
+  String SCAN_MOB_CELL_SIZE = "scanMobCellSize";
+  String SCAN_MOB_CELL_SIZE_DESC = "The total amount of scanned mob cells, in bytes";
+  String MOB_FILE_CACHE_ACCESS_COUNT = "mobFileCacheAccessCount";
+  String MOB_FILE_CACHE_ACCESS_COUNT_DESC = "The count of accesses to the mob file cache";
+  String MOB_FILE_CACHE_MISS_COUNT = "mobFileCacheMissCount";
+  String MOB_FILE_CACHE_MISS_COUNT_DESC = "The count of misses to the mob file cache";
+  String MOB_FILE_CACHE_HIT_RATIO = "mobFileCacheHitRatio";
+  String MOB_FILE_CACHE_HIT_RATIO_DESC = "The hit ratio to the mob file cache";
+  String MOB_FILE_CACHE_EVICTED_COUNT = "mobFileCacheEvictedCount";
+  String MOB_FILE_CACHE_EVICTED_COUNT_DESC = "The number of items evicted from the mob file cache";
+  String MOB_FILE_CACHE_COUNT = "mobFileCacheCount";
+  String MOB_FILE_CACHE_COUNT_DESC = "The count of cached mob files";
 
 }
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerWrapper.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerWrapper.java
index 998bd17..1322fe6 100644
--- a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerWrapper.java
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerWrapper.java
@@ -246,4 +246,74 @@
    * Get the total amount of data processed during major compactions, in bytes.
    */
   long getMajorCompactedCellsSize();
+
+  /**
+   * Gets the number of cells move to mob during compaction.
+   */
+  long getCellCountMoveToMob();
+
+  /**
+   * Gets the number of cells move from mob during compaction.
+   */
+  long getCellCountMoveFromMob();
+
+  /**
+   * Gets the total amount of cells move to mob during compaction, in bytes.
+   */
+  long getCellSizeMoveToMob();
+
+  /**
+   * Gets the total amount of cells move from mob during compaction, in bytes.
+   */
+  long getCellSizeMoveFromMob();
+
+  /**
+   * Gets the number of the flushes in mob-enabled stores.
+   */
+  long getMobFlushCount();
+
+  /**
+   * Gets the number of mob cells flushed to disk.
+   */
+  long getFlushedMobCellCount();
+
+  /**
+   * Gets the total amount of mob cells flushed to disk, in bytes.
+   */
+  long getFlushedMobCellSize();
+
+  /**
+   * Gets the number of scanned mob cells.
+   */
+  long getScanMobCellCount();
+
+  /**
+   * Gets the total amount of scanned mob cells, in bytes.
+   */
+  long getScanMobCellSize();
+
+  /**
+   * Gets the count of accesses to the mob file cache.
+   */
+  long getMobFileCacheAccessCount();
+
+  /**
+   * Gets the count of misses to the mob file cache.
+   */
+  long getMobFileCacheMissCount();
+
+  /**
+   * Gets the number of items evicted from the mob file cache.
+   */
+  long getMobFileCacheEvictedCount();
+
+  /**
+   * Gets the count of cached mob files.
+   */
+  long getMobFileCacheCount();
+
+  /**
+   * Gets the hit ratio to the mob file cache.
+   */
+  double getMobFileCacheHitRatio();
 }
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSourceImpl.java
index 365d2b2..e416c5f 100644
--- a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSourceImpl.java
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSourceImpl.java
@@ -219,6 +219,35 @@ public void getMetrics(MetricsCollector metricsCollector, boolean all) {
               rsWrap.getCompactedCellsSize())
           .addCounter(Interns.info(MAJOR_COMPACTED_CELLS_SIZE, MAJOR_COMPACTED_CELLS_SIZE_DESC),
               rsWrap.getMajorCompactedCellsSize())
+          .addCounter(Interns.info(CELL_COUNT_MOVE_FROM_MOB, CELL_COUNT_MOVE_FROM_MOB_DESC),
+              rsWrap.getCellCountMoveFromMob())
+          .addCounter(Interns.info(CELL_COUNT_MOVE_TO_MOB, CELL_COUNT_MOVE_TO_MOB_DESC),
+              rsWrap.getCellCountMoveToMob())
+          .addCounter(Interns.info(CELL_SIZE_MOVE_FROM_MOB, CELL_SIZE_MOVE_FROM_MOB_DESC),
+              rsWrap.getCellSizeMoveFromMob())
+          .addCounter(Interns.info(CELL_SIZE_MOVE_TO_MOB, CELL_SIZE_MOVE_TO_MOB_DESC),
+              rsWrap.getCellSizeMoveToMob())
+          .addCounter(Interns.info(MOB_FLUSH_COUNT, MOB_FLUSH_COUNT_DESC),
+              rsWrap.getMobFlushCount())
+          .addCounter(Interns.info(FLUSHED_MOB_CELL_COUNT, FLUSHED_MOB_CELL_COUNT_DESC),
+              rsWrap.getFlushedMobCellCount())
+          .addCounter(Interns.info(FLUSHED_MOB_CELL_SIZE, FLUSHED_MOB_CELL_SIZE_DESC),
+              rsWrap.getFlushedMobCellSize())
+          .addCounter(Interns.info(SCAN_MOB_CELL_COUNT, SCAN_MOB_CELL_COUNT_DESC),
+              rsWrap.getScanMobCellCount())
+          .addCounter(Interns.info(SCAN_MOB_CELL_SIZE, SCAN_MOB_CELL_SIZE_DESC),
+              rsWrap.getScanMobCellSize())
+          .addGauge(Interns.info(MOB_FILE_CACHE_COUNT, MOB_FILE_CACHE_COUNT_DESC),
+              rsWrap.getMobFileCacheCount())
+          .addCounter(Interns.info(MOB_FILE_CACHE_ACCESS_COUNT, MOB_FILE_CACHE_ACCESS_COUNT_DESC),
+              rsWrap.getMobFileCacheAccessCount())
+          .addCounter(Interns.info(MOB_FILE_CACHE_MISS_COUNT, MOB_FILE_CACHE_MISS_COUNT_DESC),
+              rsWrap.getMobFileCacheAccessCount())
+          .addCounter(
+              Interns.info(MOB_FILE_CACHE_EVICTED_COUNT, MOB_FILE_CACHE_EVICTED_COUNT_DESC),
+              rsWrap.getMobFileCacheEvictedCount())
+          .addGauge(Interns.info(MOB_FILE_CACHE_HIT_RATIO, MOB_FILE_CACHE_HIT_RATIO_DESC),
+              rsWrap.getMobFileCacheHitRatio())
           .tag(Interns.info(ZOOKEEPER_QUORUM_NAME, ZOOKEEPER_QUORUM_DESC),
               rsWrap.getZookeeperQuorum())
           .tag(Interns.info(SERVER_NAME_NAME, SERVER_NAME_DESC), rsWrap.getServerName())
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java
index cf70bd3..2006537 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java
@@ -128,6 +128,10 @@ protected boolean performCompaction(FileDetails fd, InternalScanner scanner, Cel
     long mobCells = 0;
     Tag tableNameTag = new Tag(TagType.MOB_TABLE_NAME_TAG_TYPE, store.getTableName()
             .getName());
+    long countMoveToMob = 0;
+    long countMoveFromMob = 0;
+    long sizeMoveToMob = 0;
+    long sizeMoveFromMob = 0;
     try {
       try {
         // If the mob file writer could not be created, directly write the cell to the store file.
@@ -173,6 +177,8 @@ protected boolean performCompaction(FileDetails fd, InternalScanner scanner, Cel
                   // next compaction.
                   writer.append(kv);
                 }
+                countMoveFromMob++;
+                sizeMoveFromMob += cell.getValueLength();
               }
             } else {
               LOG.warn("The value format of the KeyValue " + kv
@@ -192,6 +198,8 @@ protected boolean performCompaction(FileDetails fd, InternalScanner scanner, Cel
             KeyValue reference = MobUtils.createMobRefKeyValue(kv, fileName, tableNameTag);
             // write the cell whose value is the path of a mob file to the store file.
             writer.append(reference);
+            countMoveToMob++;
+            sizeMoveToMob += kv.getValueLength();
           }
           ++progress.currentCompactedKVs;
 
@@ -227,6 +235,10 @@ protected boolean performCompaction(FileDetails fd, InternalScanner scanner, Cel
         }
       }
     }
+    mobStore.updateCellCountMoveFromMob(countMoveFromMob);
+    mobStore.updateCellCountMoveToMob(countMoveToMob);
+    mobStore.updateCellSizeMoveFromMob(sizeMoveFromMob);
+    mobStore.updateCellSizeMoveToMob(sizeMoveToMob);
     progress.complete();
     return true;
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java
index aba81ff..a7f1697 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java
@@ -155,7 +155,8 @@ protected void performMobFlush(MemStoreSnapshot snapshot, long cacheFlushId,
     StoreFile.Writer mobFileWriter = null;
     int compactionKVMax = conf.getInt(HConstants.COMPACTION_KV_MAX,
         HConstants.COMPACTION_KV_MAX_DEFAULT);
-    long mobKVCount = 0;
+    long mobCount = 0;
+    long mobSize = 0;
     long time = snapshot.getTimeRangeTracker().getMaximumTimestamp();
     mobFileWriter = mobStore.createWriterInTmp(new Date(time), snapshot.getCellsCount(),
         store.getFamily().getCompression(), store.getRegionInfo().getStartKey());
@@ -181,7 +182,8 @@ protected void performMobFlush(MemStoreSnapshot snapshot, long cacheFlushId,
             } else {
               // append the original keyValue in the mob file.
               mobFileWriter.append(kv);
-              mobKVCount++;
+              mobSize += kv.getValueLength();
+              mobCount++;
 
               // append the tags to the KeyValue.
               // The key is same, the value is the filename of the mob file
@@ -199,12 +201,15 @@ protected void performMobFlush(MemStoreSnapshot snapshot, long cacheFlushId,
       mobFileWriter.close();
     }
 
-    if (mobKVCount > 0) {
+    if (mobCount > 0) {
       // commit the mob file from temp folder to target folder.
       // If the mob file is committed successfully but the store file is not,
       // the committed mob file will be handled by the sweep tool as an unused
       // file.
       mobStore.commitFile(mobFileWriter.getPath(), targetPath);
+      mobStore.updateMobFlushCount();
+      mobStore.updateFlushedMobCellCount(mobCount);
+      mobStore.updateFlushedMobCellSize(mobSize);
     } else {
       try {
         // If the mob file is empty, delete it instead of committing.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobCacheConfig.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobCacheConfig.java
index b160010..35d5f92 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobCacheConfig.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobCacheConfig.java
@@ -36,14 +36,21 @@ public MobCacheConfig(Configuration conf, HColumnDescriptor family) {
     instantiateMobFileCache(conf);
   }
 
+  public MobCacheConfig(Configuration conf) {
+    super(conf);
+    instantiateMobFileCache(conf);
+  }
+
   /**
    * Instantiates the MobFileCache.
    * @param conf The current configuration.
+   * @return The current instance of MobFileCache.
    */
-  public static synchronized void instantiateMobFileCache(Configuration conf) {
+  public static synchronized MobFileCache instantiateMobFileCache(Configuration conf) {
     if (mobFileCache == null) {
       mobFileCache = new MobFileCache(conf);
     }
+    return mobFileCache;
   }
 
   /**
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java
index 97530b1..cd08a98 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java
@@ -74,10 +74,12 @@ public void run() {
   // a ConcurrentHashMap, accesses to this map are synchronized.
   private Map<String, CachedMobFile> map = null;
   // caches access count
-  private final AtomicLong count;
-  private long lastAccess;
-  private final AtomicLong miss;
-  private long lastMiss;
+  private final AtomicLong count = new AtomicLong(0);
+  private long lastAccess = 0;
+  private final AtomicLong miss = new AtomicLong(0);
+  private long lastMiss = 0;
+  private final AtomicLong evictedFileCount = new AtomicLong(0);
+  private long lastEvictedFileCount = 0;
 
   // a lock to sync the evict to guarantee the eviction occurs in sequence.
   // the method evictFile is not sync by this lock, the ConcurrentHashMap does the sync there.
@@ -101,10 +103,6 @@ public MobFileCache(Configuration conf) {
         MobConstants.DEFAULT_MOB_FILE_CACHE_SIZE);
     isCacheEnabled = (mobFileMaxCacheSize > 0);
     map = new ConcurrentHashMap<String, CachedMobFile>(mobFileMaxCacheSize);
-    this.count = new AtomicLong(0);
-    this.miss = new AtomicLong(0);
-    this.lastAccess = 0;
-    this.lastMiss = 0;
     if (isCacheEnabled) {
       long period = conf.getLong(MobConstants.MOB_CACHE_EVICT_PERIOD,
           MobConstants.DEFAULT_MOB_CACHE_EVICT_PERIOD); // in seconds
@@ -159,6 +157,7 @@ public void evict() {
       for (CachedMobFile evictedFile : evictedFiles) {
         closeFile(evictedFile);
       }
+      evictedFileCount.addAndGet(evictedFiles.size());
     }
   }
 
@@ -175,6 +174,7 @@ public void evictFile(String fileName) {
         CachedMobFile evictedFile = map.remove(fileName);
         if (evictedFile != null) {
           evictedFile.close();
+          evictedFileCount.incrementAndGet();
         }
       } catch (IOException e) {
         LOG.error("Fail to evict the file " + fileName, e);
@@ -245,6 +245,26 @@ public void closeFile(MobFile file) {
     }
   }
 
+  public void shutdown() {
+    this.scheduleThreadPool.shutdown();
+    for (int i = 0; i < 10; i++) {
+      if (!this.scheduleThreadPool.isShutdown()) {
+        try {
+          Thread.sleep(10);
+        } catch (InterruptedException e) {
+          LOG.warn("Interrupted while sleeping");
+          Thread.currentThread().interrupt();
+          break;
+        }
+      }
+    }
+
+    if (!this.scheduleThreadPool.isShutdown()) {
+      List<Runnable> runnables = this.scheduleThreadPool.shutdownNow();
+      LOG.debug("Still running " + runnables);
+    }
+  }
+
   /**
    * Gets the count of cached mob files.
    * @return The count of the cached mob files.
@@ -254,17 +274,50 @@ public int getCacheSize() {
   }
 
   /**
+   * Gets the count of accesses to the mob file cache.
+   * @return The count of accesses to the mob file cache.
+   */
+  public long getAccessCount() {
+    return count.get();
+  }
+
+  /**
+   * Gets the count of misses to the mob file cache.
+   * @return The count of misses to the mob file cache.
+   */
+  public long getMissCount() {
+    return miss.get();
+  }
+
+  /**
+   * Gets the number of items evicted from the mob file cache.
+   * @return The number of items evicted from the mob file cache.
+   */
+  public long getEvictedFileCount() {
+    return evictedFileCount.get();
+  }
+
+  /**
+   * Gets the hit ratio to the mob file cache.
+   * @return The hit ratio to the mob file cache.
+   */
+  public double getHitRatio() {
+    return count.get() == 0 ? 0 : ((float) (count.get() - miss.get())) / (float) count.get();
+  }
+
+  /**
    * Prints the statistics.
    */
   public void printStatistics() {
     long access = count.get() - lastAccess;
     long missed = miss.get() - lastMiss;
-    long hitRate = (access - missed) * 100 / access;
+    long evicted = evictedFileCount.get() - lastEvictedFileCount;
+    int hitRatio = access == 0 ? 0 : (int) (((float) (access - missed)) / (float) access * 100);
     LOG.info("MobFileCache Statistics, access: " + access + ", miss: " + missed + ", hit: "
-        + (access - missed) + ", hit rate: "
-        + ((access == 0) ? 0 : hitRate) + "%");
+        + (access - missed) + ", hit ratio: " + hitRatio + "%, evicted files: " + evicted);
     lastAccess += access;
     lastMiss += missed;
+    lastEvictedFileCount += evicted;
   }
 
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
index f8c9e4b..7fc381c 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
@@ -80,6 +80,15 @@
   private MobCacheConfig mobCacheConfig;
   private Path homePath;
   private Path mobFamilyPath;
+  private volatile long cellCountMoveToMob = 0;
+  private volatile long cellCountMoveFromMob = 0;
+  private volatile long cellSizeMoveToMob = 0;
+  private volatile long cellSizeMoveFromMob = 0;
+  private volatile long mobFlushCount = 0;
+  private volatile long flushedMobCellCount = 0;
+  private volatile long flushedMobCellSize = 0;
+  private volatile long scanMobCellCount;
+  private volatile long scanMobCellSize;
   private List<Path> mobDirLocations;
   private HColumnDescriptor family;
 
@@ -438,4 +447,76 @@ public Path getPath() {
       return super.compact(compaction);
     }
   }
+
+  public void updateCellCountMoveToMob(long count) {
+    cellCountMoveToMob += count;
+  }
+
+  public long getCellCountMoveToMob() {
+    return cellCountMoveToMob;
+  }
+
+  public void updateCellCountMoveFromMob(long count) {
+    cellCountMoveFromMob += count;
+  }
+
+  public long getCellCountMoveFromMob() {
+    return cellCountMoveFromMob;
+  }
+
+  public void updateCellSizeMoveToMob(long size) {
+    cellSizeMoveToMob += size;
+  }
+
+  public long getCellSizeMoveToMob() {
+    return cellSizeMoveToMob;
+  }
+
+  public void updateCellSizeMoveFromMob(long size) {
+    cellSizeMoveFromMob += size;
+  }
+
+  public long getCellSizeMoveFromMob() {
+    return cellSizeMoveFromMob;
+  }
+
+  public void updateMobFlushCount() {
+    mobFlushCount++;
+  }
+
+  public long getMobFlushCount() {
+    return mobFlushCount;
+  }
+
+  public void updateFlushedMobCellCount(long count) {
+    flushedMobCellCount += count;
+  }
+
+  public long getFlushedMobCellCount() {
+    return flushedMobCellCount;
+  }
+
+  public void updateFlushedMobCellSize(long size) {
+    flushedMobCellSize += size;
+  }
+
+  public long getFlushedMobCellSize() {
+    return flushedMobCellSize;
+  }
+
+  public void updateScanMobCellCount(long count) {
+    scanMobCellCount += count;
+  }
+
+  public long getScanMobCellCount() {
+    return scanMobCellCount;
+  }
+
+  public void updateScanMobCellSize(long size) {
+    scanMobCellSize += size;
+  }
+
+  public long getScanMobCellSize() {
+    return scanMobCellSize;
+  }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
index 7947c4a..e11aac2 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
@@ -91,6 +91,7 @@
 import org.apache.hadoop.hbase.master.HMaster;
 import org.apache.hadoop.hbase.master.RegionState.State;
 import org.apache.hadoop.hbase.master.TableLockManager;
+import org.apache.hadoop.hbase.mob.MobCacheConfig;
 import org.apache.hadoop.hbase.procedure.RegionServerProcedureManagerHost;
 import org.apache.hadoop.hbase.protobuf.ProtobufUtil;
 import org.apache.hadoop.hbase.protobuf.RequestConverter;
@@ -347,6 +348,8 @@
 
   // Cache configuration and block cache reference
   final CacheConfig cacheConfig;
+  // Cache configuration for mob
+  final MobCacheConfig mobCacheConfig;
 
   /** The health check chore. */
   private HealthCheckChore healthCheckChore;
@@ -476,6 +479,7 @@ public HRegionServer(Configuration conf, CoordinatedStateManager csm)
 
     regionServerAccounting = new RegionServerAccounting();
     cacheConfig = new CacheConfig(conf);
+    mobCacheConfig = new MobCacheConfig(conf);
     uncaughtExceptionHandler = new UncaughtExceptionHandler() {
       @Override
       public void uncaughtException(Thread t, Throwable e) {
@@ -830,6 +834,7 @@ public void run() {
     if (cacheConfig.isBlockCacheEnabled()) {
       cacheConfig.getBlockCache().shutdown();
     }
+    mobCacheConfig.getMobFileCache().shutdown();
 
     if (movedRegionsCleaner != null) {
       movedRegionsCleaner.stop("Region Server stopping");
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerWrapperImpl.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerWrapperImpl.java
index ff39a1e..870548f 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerWrapperImpl.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerWrapperImpl.java
@@ -32,6 +32,8 @@
 import org.apache.hadoop.hbase.io.hfile.BlockCache;
 import org.apache.hadoop.hbase.io.hfile.CacheConfig;
 import org.apache.hadoop.hbase.io.hfile.CacheStats;
+import org.apache.hadoop.hbase.mob.MobCacheConfig;
+import org.apache.hadoop.hbase.mob.MobFileCache;
 import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;
 import org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher;
 import org.apache.hadoop.metrics2.MetricsExecutor;
@@ -48,6 +50,7 @@
   private final HRegionServer regionServer;
 
   private BlockCache blockCache;
+  private MobFileCache mobFileCache;
 
   private volatile long numStores = 0;
   private volatile long numHLogFiles = 0;
@@ -72,6 +75,20 @@
   private volatile long flushedCellsSize = 0;
   private volatile long compactedCellsSize = 0;
   private volatile long majorCompactedCellsSize = 0;
+  private volatile long cellCountMoveToMob = 0;
+  private volatile long cellCountMoveFromMob = 0;
+  private volatile long cellSizeMoveToMob = 0;
+  private volatile long cellSizeMoveFromMob = 0;
+  private volatile long mobFlushCount = 0;
+  private volatile long flushedMobCellCount = 0;
+  private volatile long flushedMobCellSize = 0;
+  private volatile long scanMobCellCount;
+  private volatile long scanMobCellSize;
+  private volatile long mobFileCacheAccessCount;
+  private volatile long mobFileCacheMissCount;
+  private volatile double mobFileCacheHitRatio;
+  private volatile long mobFileCacheEvictedCount;
+  private volatile long mobFileCacheCount;
 
   private CacheStats cacheStats;
   private ScheduledExecutorService executor;
@@ -81,6 +98,7 @@
   public MetricsRegionServerWrapperImpl(final HRegionServer regionServer) {
     this.regionServer = regionServer;
     initBlockCache();
+    initMobFileCache();
 
     this.period =
         regionServer.conf.getLong(HConstants.REGIONSERVER_METRICS_PERIOD,
@@ -112,6 +130,16 @@ private synchronized  void initBlockCache() {
     }
   }
 
+  /**
+   * Initializes the mob file cache.
+   */
+  private synchronized void initMobFileCache() {
+    MobCacheConfig mobCacheConfig = this.regionServer.mobCacheConfig;
+    if (mobCacheConfig != null && this.mobFileCache == null) {
+      this.mobFileCache = mobCacheConfig.getMobFileCache();
+    }
+  }
+
   @Override
   public String getClusterId() {
     return regionServer.getClusterId();
@@ -389,6 +417,76 @@ public long getMajorCompactedCellsSize() {
     return majorCompactedCellsSize;
   }
 
+  @Override
+  public long getCellCountMoveFromMob() {
+    return cellCountMoveFromMob;
+  }
+
+  @Override
+  public long getCellCountMoveToMob() {
+    return cellCountMoveToMob;
+  }
+
+  @Override
+  public long getCellSizeMoveFromMob() {
+    return cellSizeMoveFromMob;
+  }
+
+  @Override
+  public long getCellSizeMoveToMob() {
+    return cellSizeMoveToMob;
+  }
+
+  @Override
+  public long getMobFlushCount() {
+    return mobFlushCount;
+  }
+
+  @Override
+  public long getFlushedMobCellCount() {
+    return flushedMobCellCount;
+  }
+
+  @Override
+  public long getFlushedMobCellSize() {
+    return flushedMobCellSize;
+  }
+
+  @Override
+  public long getScanMobCellCount() {
+    return scanMobCellCount;
+  }
+
+  @Override
+  public long getScanMobCellSize() {
+    return scanMobCellSize;
+  }
+
+  @Override
+  public long getMobFileCacheAccessCount() {
+    return mobFileCacheAccessCount;
+  }
+
+  @Override
+  public long getMobFileCacheMissCount() {
+    return mobFileCacheMissCount;
+  }
+
+  @Override
+  public long getMobFileCacheCount() {
+    return mobFileCacheCount;
+  }
+
+  @Override
+  public long getMobFileCacheEvictedCount() {
+    return mobFileCacheEvictedCount;
+  }
+
+  @Override
+  public double getMobFileCacheHitRatio() {
+    return mobFileCacheHitRatio;
+  }
+
   /**
    * This is the runnable that will be executed on the executor every PERIOD number of seconds
    * It will take metrics/numbers from all of the regions and use them to compute point in
@@ -402,6 +500,7 @@ public long getMajorCompactedCellsSize() {
     @Override
     synchronized public void run() {
       initBlockCache();
+      initMobFileCache();
       cacheStats = blockCache.getStats();
 
       HDFSBlocksDistribution hdfsBlocksDistribution =
@@ -427,6 +526,15 @@ synchronized public void run() {
       long tempFlushedCellsSize = 0;
       long tempCompactedCellsSize = 0;
       long tempMajorCompactedCellsSize = 0;
+      long tempCellCountMoveToMob = 0;
+      long tempCellCountMoveFromMob = 0;
+      long tempCellSizeMoveToMob = 0;
+      long tempCellSizeMoveFromMob = 0;
+      long tempMobFlushCount = 0;
+      long tempFlushedMobCellCount = 0;
+      long tempFlushedMobCellSize = 0;
+      long tempScanMobCellCount = 0;
+      long tempScanMobCellSize = 0;
 
       for (HRegion r : regionServer.getOnlineRegionsLocalContext()) {
         tempNumMutationsWithoutWAL += r.numMutationsWithoutWAL.get();
@@ -449,6 +557,18 @@ synchronized public void run() {
           tempFlushedCellsSize += store.getFlushedCellsSize();
           tempCompactedCellsSize += store.getCompactedCellsSize();
           tempMajorCompactedCellsSize += store.getMajorCompactedCellsSize();
+          if (store instanceof HMobStore) {
+            HMobStore mobStore = (HMobStore) store;
+            tempCellCountMoveToMob += mobStore.getCellCountMoveToMob();
+            tempCellCountMoveFromMob += mobStore.getCellCountMoveFromMob();
+            tempCellSizeMoveToMob += mobStore.getCellSizeMoveToMob();
+            tempCellSizeMoveFromMob += mobStore.getCellSizeMoveFromMob();
+            tempMobFlushCount += mobStore.getMobFlushCount();
+            tempFlushedMobCellCount += mobStore.getFlushedMobCellCount();
+            tempFlushedMobCellSize += mobStore.getFlushedMobCellSize();
+            tempScanMobCellCount += mobStore.getScanMobCellCount();
+            tempScanMobCellSize += mobStore.getScanMobCellSize();
+          }
         }
 
         hdfsBlocksDistribution.add(r.getHDFSBlocksDistribution());
@@ -511,6 +631,20 @@ synchronized public void run() {
       flushedCellsSize = tempFlushedCellsSize;
       compactedCellsSize = tempCompactedCellsSize;
       majorCompactedCellsSize = tempMajorCompactedCellsSize;
+      cellCountMoveToMob = tempCellCountMoveToMob;
+      cellCountMoveFromMob = tempCellCountMoveFromMob;
+      cellSizeMoveToMob = tempCellSizeMoveToMob;
+      cellSizeMoveFromMob = tempCellSizeMoveFromMob;
+      mobFlushCount = tempMobFlushCount;
+      flushedMobCellCount = tempFlushedMobCellCount;
+      flushedMobCellSize = tempFlushedMobCellSize;
+      scanMobCellCount = tempScanMobCellCount;
+      scanMobCellSize = tempScanMobCellSize;
+      mobFileCacheAccessCount = mobFileCache.getAccessCount();
+      mobFileCacheMissCount = mobFileCache.getMissCount();
+      mobFileCacheHitRatio = mobFileCache.getHitRatio();
+      mobFileCacheEvictedCount = mobFileCache.getEvictedFileCount();
+      mobFileCacheCount = mobFileCache.getCacheSize();
     }
   }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java
index b4bcbe7..acb094f 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java
@@ -36,11 +36,16 @@
 public class MobStoreScanner extends StoreScanner {
 
   private boolean cacheMobBlocks = false;
+  private final HMobStore mobStore;
 
   public MobStoreScanner(Store store, ScanInfo scanInfo, Scan scan,
       final NavigableSet<byte[]> columns, long readPt) throws IOException {
     super(store, scanInfo, scan, columns, readPt);
     cacheMobBlocks = MobUtils.isCacheMobBlocks(scan);
+    if (!(store instanceof HMobStore)) {
+      throw new IllegalArgumentException("The store " + store + " is not a HMobStore");
+    }
+    mobStore = (HMobStore) store;
   }
 
   /**
@@ -56,13 +61,19 @@ public boolean next(List<Cell> outResult, int limit) throws IOException {
       if (outResult.isEmpty()) {
         return result;
       }
-      HMobStore mobStore = (HMobStore) store;
+      long mobKVCount = 0;
+      long mobKVSize = 0;
       for (int i = 0; i < outResult.size(); i++) {
         Cell cell = outResult.get(i);
         if (MobUtils.isMobReferenceCell(cell)) {
-          outResult.set(i, mobStore.resolve(cell, cacheMobBlocks));
+          Cell mobCell = mobStore.resolve(cell, cacheMobBlocks);
+          mobKVCount++;
+          mobKVSize += mobCell.getValueLength();
+          outResult.set(i, mobCell);
         }
       }
+      mobStore.updateScanMobCellCount(mobKVCount);
+      mobStore.updateScanMobCellSize(mobKVSize);
     }
     return result;
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java
index e384390..dc96824 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java
@@ -36,11 +36,16 @@
 public class ReversedMobStoreScanner extends ReversedStoreScanner {
 
   private boolean cacheMobBlocks = false;
+  protected final HMobStore mobStore;
 
   ReversedMobStoreScanner(Store store, ScanInfo scanInfo, Scan scan, NavigableSet<byte[]> columns,
       long readPt) throws IOException {
     super(store, scanInfo, scan, columns, readPt);
     cacheMobBlocks = MobUtils.isCacheMobBlocks(scan);
+    if (!(store instanceof HMobStore)) {
+      throw new IllegalArgumentException("The store " + store + " is not a HMobStore");
+    }
+    mobStore = (HMobStore) store;
   }
 
   /**
@@ -56,13 +61,19 @@ public boolean next(List<Cell> outResult, int limit) throws IOException {
       if (outResult.isEmpty()) {
         return result;
       }
-      HMobStore mobStore = (HMobStore) store;
+      long mobKVCount = 0;
+      long mobKVSize = 0;
       for (int i = 0; i < outResult.size(); i++) {
         Cell cell = outResult.get(i);
         if (MobUtils.isMobReferenceCell(cell)) {
-          outResult.set(i, mobStore.resolve(cell, cacheMobBlocks));
+          Cell mobCell = mobStore.resolve(cell, cacheMobBlocks);
+          mobKVCount++;
+          mobKVSize += mobCell.getValueLength();
+          outResult.set(i, mobCell);
         }
       }
+      mobStore.updateScanMobCellCount(mobKVCount);
+      mobStore.updateScanMobCellSize(mobKVSize);
     }
     return result;
   }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerWrapperStub.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerWrapperStub.java
index 036af48..1fdfd04 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerWrapperStub.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerWrapperStub.java
@@ -241,4 +241,74 @@ public long getMajorCompactedCellsSize() {
     return 10240000;
   }
 
+  @Override
+  public long getCellCountMoveToMob() {
+    return 20;
+  }
+
+  @Override
+  public long getCellCountMoveFromMob() {
+    return 10;
+  }
+
+  @Override
+  public long getCellSizeMoveToMob() {
+    return 200;
+  }
+
+  @Override
+  public long getCellSizeMoveFromMob() {
+    return 100;
+  }
+
+  @Override
+  public long getMobFlushCount() {
+    return 1;
+  }
+
+  @Override
+  public long getFlushedMobCellCount() {
+    return 10;
+  }
+
+  @Override
+  public long getFlushedMobCellSize() {
+    return 1000;
+  }
+
+  @Override
+  public long getScanMobCellCount() {
+    return 10;
+  }
+
+  @Override
+  public long getScanMobCellSize() {
+    return 1000;
+  }
+
+  @Override
+  public long getMobFileCacheAccessCount() {
+    return 100;
+  }
+
+  @Override
+  public long getMobFileCacheMissCount() {
+    return 50;
+  }
+
+  @Override
+  public long getMobFileCacheEvictedCount() {
+    return 0;
+  }
+
+  @Override
+  public long getMobFileCacheCount() {
+    return 100;
+  }
+
+  @Override
+  public double getMobFileCacheHitRatio() {
+    return 0.5;
+  }
+
 }
\ No newline at end of file
