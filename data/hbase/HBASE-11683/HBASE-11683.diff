diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherAggregateSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherAggregateSource.java
new file mode 100644
index 0000000..4fa8419
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherAggregateSource.java
@@ -0,0 +1,64 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.metrics.BaseSource;
+
+/**
+ * This interface will be implemented by a MetricsSource that will export metrics from multiple mob
+ * store flusher into the hadoop metrics system.
+ */
+public interface MetricsMobStoreFlusherAggregateSource extends BaseSource {
+
+  /**
+   * The name of the metrics
+   */
+  String METRICS_NAME = "MobStoreFlusher";
+
+  /**
+   * The context metrics will be under.
+   */
+  String METRICS_CONTEXT = "regionserver";
+
+  /**
+   * The name of the metrics context that metrics will be under in jmx
+   */
+  String METRICS_JMX_CONTEXT = "RegionServer,sub=" + METRICS_NAME;
+
+  /**
+   * Description
+   */
+  String METRICS_DESCRIPTION = "Metrics about MobStoreFlusher";
+
+  /**
+   * Register a MobStoreFlusherSource as being open.
+   * 
+   * @param source
+   *          the source for the flusher being opened.
+   */
+  void register(MetricsMobStoreFlusherSource source);
+
+  /**
+   * Remove a flusher's source. This is called when a store is closed.
+   * 
+   * @param source
+   *          The region to remove.
+   */
+  void deregister(MetricsMobStoreFlusherSource source);
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSource.java
new file mode 100644
index 0000000..c61faa3
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSource.java
@@ -0,0 +1,60 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * Interface that classes that expose metrics about the mob store flusher will implement.
+ */
+public interface MetricsMobStoreFlusherSource extends Comparable<MetricsMobStoreFlusherSource> {
+
+  String FLUSH_COUNT_KEY = "flushCount";
+  String MOB_CELL_COUNT_KEY = "mobCellCount";
+  String MOB_CELL_SIZE_KEY = "mobCellSize";
+
+  /**
+   * Close the region's metrics as this region is closing.
+   */
+  void close();
+
+  /**
+   * Update related counts of flushing.
+   */
+  void updateFlush();
+
+  /**
+   * Update related counts of mob cell.
+   * 
+   * @param count
+   *          the cell count
+   */
+  void updateMobCellCount(long count);
+
+  /**
+   * Update related size of mob cell.
+   * 
+   * @param size
+   *          the size of flushed mob cells
+   */
+  void updateMobCellSize(long size);
+
+  /**
+   * Get the aggregate source to which this reports.
+   */
+  MetricsMobStoreFlusherAggregateSource getAggregateSource();
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceFactory.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceFactory.java
new file mode 100644
index 0000000..cac4d7d
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceFactory.java
@@ -0,0 +1,35 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+
+/**
+ * Interface of a factory to create MobStoreFlusherSource when given a MobStoreFlusherWrapper
+ */
+public interface MetricsMobStoreFlusherSourceFactory {
+
+  /**
+   * Creates a MetricsMobStoreFlusherSource from a MetricsMobStoreFlusherWrapper.
+   * 
+   * @param flusherWrapper
+   * @return A metrics flusher source
+   */
+  MetricsMobStoreFlusherSource create(MetricsMobStoreFlusherWrapper flusherWrapper);
+  
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapper.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapper.java
new file mode 100644
index 0000000..8a296b7
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapper.java
@@ -0,0 +1,53 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * This is the interface that will expose information to hadoop1/hadoop2 implementations of the
+ * MobStoreFlusherSource.
+ */
+public interface MetricsMobStoreFlusherWrapper {
+
+  /**
+   * Get the name of the table the region belongs to.
+   *
+   * @return The string version of the table name.
+   */
+  String getTableName();
+
+  /**
+   * Get the name of the namespace this table is in.
+   * @return String version of the namespace.  Can't be empty.
+   */
+  String getNamespace();
+
+  /**
+   * Get the name of the region.
+   *
+   * @return The encoded name of the region.
+   */
+  String getRegionName();
+
+  /**
+   * Gets the store name.
+   * 
+   * @return A a store name.
+   */
+  String getStoreName();
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherAggregateSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherAggregateSourceImpl.java
new file mode 100644
index 0000000..08ddc99
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherAggregateSourceImpl.java
@@ -0,0 +1,73 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import java.util.TreeSet;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.metrics.BaseSourceImpl;
+import org.apache.hadoop.metrics2.MetricsCollector;
+import org.apache.hadoop.metrics2.MetricsRecordBuilder;
+
+@InterfaceAudience.Private
+public class MetricsMobStoreFlusherAggregateSourceImpl extends BaseSourceImpl implements
+    MetricsMobStoreFlusherAggregateSource {
+  // lock to guard against concurrent access to regionSources
+  private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+
+  private final TreeSet<MetricsMobStoreFlusherSourceImpl> flusherSources =
+      new TreeSet<MetricsMobStoreFlusherSourceImpl>();
+
+  public MetricsMobStoreFlusherAggregateSourceImpl() {
+    this(METRICS_NAME, METRICS_DESCRIPTION, METRICS_CONTEXT, METRICS_JMX_CONTEXT);
+  }
+
+  public MetricsMobStoreFlusherAggregateSourceImpl(String metricsName, String metricsDescription,
+      String metricsContext, String metricsJmxContext) {
+    super(metricsName, metricsDescription, metricsContext, metricsJmxContext);
+  }
+
+  @Override
+  public void register(MetricsMobStoreFlusherSource source) {
+    lock.writeLock().lock();
+    try {
+      flusherSources.add((MetricsMobStoreFlusherSourceImpl) source);
+    } finally {
+      lock.writeLock().unlock();
+    }
+  }
+
+  @Override
+  public void deregister(MetricsMobStoreFlusherSource source) {
+    lock.writeLock().lock();
+    try {
+      flusherSources.remove(source);
+    } finally {
+      lock.writeLock().unlock();
+    }
+  }
+
+  @Override
+  public void getMetrics(MetricsCollector collector, boolean all) {
+    MetricsRecordBuilder mrb = collector.addRecord(metricsName)
+        .setContext(metricsContext);
+    metricsRegistry.snapshot(mrb, all);
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceFactoryImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceFactoryImpl.java
new file mode 100644
index 0000000..9e5fb5f
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceFactoryImpl.java
@@ -0,0 +1,48 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * Factory to create MetricsMobStoreFlusherSource when given a  MetricsMobStoreFlusherWrapper
+ *
+ */
+public class MetricsMobStoreFlusherSourceFactoryImpl 
+implements MetricsMobStoreFlusherSourceFactory {
+
+  public static enum FactoryStorage {
+    INSTANCE;
+    private Object aggLock = new Object();
+    private MetricsMobStoreFlusherAggregateSourceImpl aggImpl;
+  }
+
+  private synchronized MetricsMobStoreFlusherAggregateSourceImpl getAggregate() {
+    synchronized (FactoryStorage.INSTANCE.aggLock) {
+      if (FactoryStorage.INSTANCE.aggImpl == null) {
+        FactoryStorage.INSTANCE.aggImpl = new MetricsMobStoreFlusherAggregateSourceImpl();
+      }
+      return FactoryStorage.INSTANCE.aggImpl;
+    }
+  }
+
+  @Override
+  public MetricsMobStoreFlusherSource create(MetricsMobStoreFlusherWrapper flusherWrapper) {
+    return new MetricsMobStoreFlusherSourceImpl(flusherWrapper, getAggregate());
+  }
+
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceImpl.java
new file mode 100644
index 0000000..3ced8c3
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceImpl.java
@@ -0,0 +1,122 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.metrics2.impl.JmxCacheBuster;
+import org.apache.hadoop.metrics2.lib.DynamicMetricsRegistry;
+import org.apache.hadoop.metrics2.lib.MutableCounterLong;
+
+/**
+ * Hadoop2 implementation of MetricsMobStoreFlusherSource.
+ * 
+ * Implements BaseSource through BaseSourceImpl, following the pattern
+ */
+@InterfaceAudience.Private
+public class MetricsMobStoreFlusherSourceImpl implements MetricsMobStoreFlusherSource {
+
+  private String flushCountKey;
+  private String mobCellCountKey;
+  private String mobCellSizeKey;
+
+  private MutableCounterLong flushCount;
+  private MutableCounterLong mobCellCount;
+  private MutableCounterLong mobCellSize;
+
+  private MetricsMobStoreFlusherAggregateSourceImpl agg;
+  private DynamicMetricsRegistry registry;
+  private static final Log LOG = LogFactory.getLog(MetricsMobStoreFlusherSourceImpl.class);
+  public String prefix;
+
+  public MetricsMobStoreFlusherSourceImpl(MetricsMobStoreFlusherWrapper flusherWrapper,
+      MetricsMobStoreFlusherAggregateSourceImpl aggregate) {
+    prefix = "Namespace_" + flusherWrapper.getNamespace() + "_table_"
+        + flusherWrapper.getTableName() + "_region_" + flusherWrapper.getRegionName() + "_store_"
+        + flusherWrapper.getStoreName() + "_metric_";
+    agg = aggregate;
+    agg.register(this);
+    LOG.debug("Creating new MetricsMobStoreFlusherSourceImpl for store " + prefix);
+    registry = agg.getMetricsRegistry();
+    flushCountKey = prefix + MetricsMobStoreFlusherSource.FLUSH_COUNT_KEY;
+    flushCount = registry.getLongCounter(flushCountKey, 0l);
+
+    mobCellCountKey = prefix + MetricsMobStoreFlusherSource.MOB_CELL_COUNT_KEY;
+    mobCellCount = registry.getLongCounter(mobCellCountKey, 0l);
+
+    mobCellSizeKey = prefix + MetricsMobStoreFlusherSource.MOB_CELL_SIZE_KEY;
+    mobCellSize = registry.getLongCounter(mobCellSizeKey, 0l);
+  }
+
+  @Override
+  public void close() {
+    agg.deregister(this);
+
+    LOG.trace("Removing mob store flusher Metrics: " + prefix);
+    registry.removeMetric(flushCountKey);
+    registry.removeMetric(mobCellCountKey);
+    registry.removeMetric(mobCellSizeKey);
+
+    JmxCacheBuster.clearJmxCache();
+  }
+
+  @Override
+  public void updateFlush() {
+    flushCount.incr();
+  }
+
+  @Override
+  public void updateMobCellCount(long count) {
+    mobCellCount.incr(count);
+  }
+
+  @Override
+  public void updateMobCellSize(long size) {
+    mobCellSize.incr(size);
+  }
+
+  @Override
+  public MetricsMobStoreFlusherAggregateSource getAggregateSource() {
+    return agg;
+  }
+
+  @Override
+  public int compareTo(MetricsMobStoreFlusherSource source) {
+    if (!(source instanceof MetricsMobStoreFlusherSource))
+      return -1;
+
+    MetricsMobStoreFlusherSourceImpl impl = (MetricsMobStoreFlusherSourceImpl) source;
+    return this.prefix.compareTo(impl.prefix);
+  }
+
+  @Override
+  public int hashCode() {
+    return this.prefix.hashCode();
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    if (obj == this)
+      return true;
+    if (!(obj instanceof MetricsMobStoreFlusherSourceImpl))
+      return false;
+    return compareTo((MetricsMobStoreFlusherSourceImpl) obj) == 0;
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobStoreFlusherSourceFactory b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobStoreFlusherSourceFactory
new file mode 100644
index 0000000..73b3f16
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobStoreFlusherSourceFactory
@@ -0,0 +1 @@
+org.apache.hadoop.hbase.regionserver.MetricsMobStoreFlusherSourceFactoryImpl
diff --git a/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreFlusherSourceImpl.java b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreFlusherSourceImpl.java
new file mode 100644
index 0000000..67f1a40
--- /dev/null
+++ b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreFlusherSourceImpl.java
@@ -0,0 +1,65 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+import org.junit.Test;
+
+/**
+ * Test for MetricsMobStoreFlusherSourceImpl
+ */
+public class TestMetricsMobStoreFlusherSourceImpl {
+
+  @Test
+  public void testGetInstance() throws Exception {
+    MetricsMobStoreFlusherSourceFactory metricsMobStoreFlusherSourceFactory =
+        CompatibilitySingletonFactory.getInstance(MetricsMobStoreFlusherSourceFactory.class);
+    MetricsMobStoreFlusherSource source = metricsMobStoreFlusherSourceFactory
+        .create(new MetricsMobStoreFlusherWrapperStub());
+    assertTrue(source instanceof MetricsMobStoreFlusherSourceImpl);
+    assertSame(metricsMobStoreFlusherSourceFactory,
+        CompatibilitySingletonFactory.getInstance(MetricsMobStoreFlusherSourceFactory.class));
+  }
+
+  static class MetricsMobStoreFlusherWrapperStub implements MetricsMobStoreFlusherWrapper {
+
+    @Override
+    public String getTableName() {
+      return "mobtable";
+    }
+
+    @Override
+    public String getNamespace() {
+      return "test";
+    }
+
+    @Override
+    public String getRegionName() {
+      return "region#1";
+    }
+
+    @Override
+    public String getStoreName() {
+      return "family#1";
+    }
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultMobStoreFlusher.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultMobStoreFlusher.java
index 501d3ae..fd7a064 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultMobStoreFlusher.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultMobStoreFlusher.java
@@ -61,6 +61,8 @@
   private Path targetPath;
   private MobFileStore mobFileStore;
   private Object lock = new Object();
+  protected final MetricsMobStoreFlusher metricsFlusher;
+  protected final MetricsMobStoreFlusherWrapperImpl metricsFlusherWrapper;
 
   public DefaultMobStoreFlusher(Configuration conf, Store store) {
     super(conf, store);
@@ -68,6 +70,8 @@ public DefaultMobStoreFlusher(Configuration conf, Store store) {
     mobCellValueSizeThreshold = MobUtils.getMobThreshold(store.getFamily());
     this.targetPath = new Path(MobUtils.getMobRegionPath(conf, store.getTableName()),
         store.getColumnFamilyName());
+    metricsFlusherWrapper = new MetricsMobStoreFlusherWrapperImpl(store);
+    metricsFlusher = new MetricsMobStoreFlusher(metricsFlusherWrapper);
   }
 
   /**
@@ -116,6 +120,8 @@ public DefaultMobStoreFlusher(Configuration conf, Store store) {
             StoreFile.Writer mobFileWriter = null;
             int compactionKVMax = conf.getInt(HConstants.COMPACTION_KV_MAX,
                 HConstants.COMPACTION_KV_MAX_DEFAULT);
+            long mobKVCount = 0;
+            long mobKVSize = 0;
             long time = snapshot.getTimeRangeTracker().getMaximumTimestamp();
             mobFileWriter = mobFileStore.createWriterInTmp(new Date(time), cellsCount, store
                 .getFamily().getCompression(), store.getRegionInfo().getStartKey());
@@ -141,6 +147,8 @@ public DefaultMobStoreFlusher(Configuration conf, Store store) {
                     } else {
                       // append the original keyValue in the mob file.
                       mobFileWriter.append(kv);
+                      mobKVSize += kv.getLength();
+                      mobKVCount++;
 
                       // append the tags to the KeyValue.
                       // The key is same, the value is the filename of the mob file
@@ -175,6 +183,9 @@ public DefaultMobStoreFlusher(Configuration conf, Store store) {
 
             // commit the mob file from temp folder to target folder.
             mobFileStore.commitFile(mobFileWriter.getPath(), targetPath);
+            metricsFlusher.updateFlush();
+            metricsFlusher.updateMobCellCount(mobKVCount);
+            metricsFlusher.updateMobCellSize(mobKVSize);
           }
         } finally {
           finalizeWriter(writer, cacheFlushId, status);
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java
index c783d14..7ab4382 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java
@@ -775,6 +775,13 @@ public void bulkLoadHFile(String srcPathStr, long seqNum) throws IOException {
       // Clear so metrics doesn't find them.
       ImmutableCollection<StoreFile> result = storeEngine.getStoreFileManager().clearFiles();
 
+      StoreFlusher storeFlusher = storeEngine.getStoreFlusher();
+      if (storeFlusher instanceof DefaultMobStoreFlusher) {
+        DefaultMobStoreFlusher mobFlusher = (DefaultMobStoreFlusher) storeFlusher;
+        if (mobFlusher.metricsFlusher != null) {
+          mobFlusher.metricsFlusher.close();
+        }
+      }
       if (!result.isEmpty()) {
         // initialize the thread pool for closing store files in parallel.
         ThreadPoolExecutor storeFileCloserThreadPool = this.region
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusher.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusher.java
new file mode 100644
index 0000000..6d86ade
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusher.java
@@ -0,0 +1,57 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+
+/**
+ * This is the glue between the DefaultMobStoreFlusher and whatever hadoop shim layer is loaded
+ * (hbase-hadoop1-compat or hbase-hadoop2-compat).
+ */
+@InterfaceAudience.Private
+public class MetricsMobStoreFlusher {
+
+  private final MetricsMobStoreFlusherSource source;
+
+  public MetricsMobStoreFlusher(final MetricsMobStoreFlusherWrapper wrapper) {
+    source = CompatibilitySingletonFactory.getInstance(MetricsMobStoreFlusherSourceFactory.class)
+        .create(wrapper);
+  }
+
+  public void close() {
+    source.close();
+  }
+
+  public void updateFlush() {
+    source.updateFlush();
+  }
+
+  public void updateMobCellCount(long count) {
+    source.updateMobCellCount(count);
+  }
+
+  public void updateMobCellSize(long size) {
+    source.updateMobCellSize(size);
+  }
+
+  public MetricsMobStoreFlusherSource getSource() {
+    return source;
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapperImpl.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapperImpl.java
new file mode 100644
index 0000000..f7c66e9
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapperImpl.java
@@ -0,0 +1,55 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+/**
+ * Impl for exposing DefaultMobStoreFlusher Information through Hadoop's metrics 2 system.
+ */
+@InterfaceAudience.Private
+public class MetricsMobStoreFlusherWrapperImpl implements MetricsMobStoreFlusherWrapper {
+
+  private Store store;
+
+  public MetricsMobStoreFlusherWrapperImpl(Store store) {
+    this.store = store;
+  }
+
+  @Override
+  public String getStoreName() {
+    return store.getColumnFamilyName();
+  }
+
+  @Override
+  public String getTableName() {
+    return store.getTableName().getQualifierAsString();
+  }
+
+  @Override
+  public String getNamespace() {
+    return store.getTableName().getNameAsString();
+  }
+
+  @Override
+  public String getRegionName() {
+    return store.getRegionInfo().getEncodedName();
+  }
+
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapperStub.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapperStub.java
new file mode 100644
index 0000000..2422822
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapperStub.java
@@ -0,0 +1,44 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.regionserver.MetricsMobStoreFlusherWrapper;
+
+public class MetricsMobStoreFlusherWrapperStub implements MetricsMobStoreFlusherWrapper {
+
+  @Override
+  public String getTableName() {
+    return "mobtable";
+  }
+
+  @Override
+  public String getNamespace() {
+    return "test";
+  }
+
+  @Override
+  public String getRegionName() {
+    return "region#1";
+  }
+
+  @Override
+  public String getStoreName() {
+    return "family#1";
+  }
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreFlusher.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreFlusher.java
new file mode 100644
index 0000000..4c3051e
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreFlusher.java
@@ -0,0 +1,45 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.CompatibilityFactory;
+import org.apache.hadoop.hbase.SmallTests;
+import org.apache.hadoop.hbase.test.MetricsAssertHelper;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+@Category(SmallTests.class)
+public class TestMetricsMobStoreFlusher {
+
+  public MetricsAssertHelper HELPER = CompatibilityFactory.getInstance(MetricsAssertHelper.class);
+
+  @Test
+  public void testRegionWrapperMetrics() {
+    MetricsMobStoreFlusher mmf = new MetricsMobStoreFlusher(new MetricsMobStoreFlusherWrapperStub());
+    mmf.updateFlush();
+    mmf.updateMobCellCount(2);
+    mmf.updateMobCellSize(5);
+    MetricsMobStoreFlusherAggregateSource agg = mmf.getSource().getAggregateSource();
+
+    HELPER.assertCounter("namespace_test_table_mobtable_region_region#1_store_family#1_metric_flushCount", 1, agg);
+    HELPER.assertCounter("namespace_test_table_mobtable_region_region#1_store_family#1_metric_mobCellCount", 2, agg);
+    HELPER.assertCounter("namespace_test_table_mobtable_region_region#1_store_family#1_metric_mobCellSize", 5, agg);
+    mmf.close();
+  }
+}
