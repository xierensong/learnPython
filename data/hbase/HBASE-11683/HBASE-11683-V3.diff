diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorAggregateSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorAggregateSource.java
new file mode 100644
index 0000000..2a02ade
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorAggregateSource.java
@@ -0,0 +1,62 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.metrics.BaseSource;
+
+/**
+ * This interface will be implemented by a MetricsSource that will export metrics from multiple mob
+ * store compactors into the hadoop metrics system.
+ */
+public interface MetricsMobCompactorAggregateSource extends BaseSource {
+
+  /**
+   * The name of the metrics
+   */
+  String METRICS_NAME = "MobCompactor";
+
+  /**
+   * The context metrics will be under.
+   */
+  String METRICS_CONTEXT = "regionserver";
+
+  /**
+   * The name of the metrics context that metrics will be under in jmx
+   */
+  String METRICS_JMX_CONTEXT = "RegionServer,sub=" + METRICS_NAME;
+
+  /**
+   * Description
+   */
+  String METRICS_DESCRIPTION = "Metrics about MobCompactor";
+
+  /**
+   * Register a MetricsMobCompactorSource as being open. 
+   * @param source
+   *          the source for the compactor being opened.
+   */
+  void register(MetricsMobCompactorSource source);
+
+  /**
+   * Remove a compactor's source. This is called when a store is closed. 
+   * @param source
+   *          The region to remove.
+   */
+  void deregister(MetricsMobCompactorSource source);
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorSource.java
new file mode 100644
index 0000000..b434b1b
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorSource.java
@@ -0,0 +1,60 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * Interface that classes that expose metrics about the mob compactor will implement.
+ */
+public interface MetricsMobCompactorSource extends Comparable<MetricsMobCompactorSource> {
+
+  String COUNT_MOVE_TO_MOB = "countMoveToMob";
+  String COUNT_MOVE_FROM_MOB = "countMoveFromMob";
+  String SIZE_MOVE_TO_MOB = "sizeMoveToMob";
+  String SIZE_MOVE_FROM_MOB = "sizeMoveFromMob";
+
+  /**
+   * Closes the region's metrics as this region is closing.
+   */
+  void close();
+
+  /**
+   * Updates related counts of cells move to mob files.
+   */
+  void updateCountMoveToMob(long count);
+
+  /**
+   * Updates related counts of cells move from mob files.
+   */
+  void updateCountMoveFromMob(long count);
+
+  /**
+   * Updates related value size of cells move to mob files.
+   */
+  void updateSizeMoveToMob(long size);
+
+  /**
+   * Updates related value size of cells move from mob files.
+   */
+  void updateSizeMoveFromMob(long size);
+
+  /**
+   * Gets the aggregate source to which this reports.
+   */
+  MetricsMobCompactorAggregateSource getAggregateSource();
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorSourceFactory.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorSourceFactory.java
new file mode 100644
index 0000000..4ea055a
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorSourceFactory.java
@@ -0,0 +1,32 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * Interface of a factory to create MetricsMobCompactorSource when given a
+ * MetricsMobCompactorWrapper
+ */
+public interface MetricsMobCompactorSourceFactory {
+
+  /**
+   * Creates a MetricsMobCompactorSource from a MetricsMobCompactorWrapper.
+   * @param wrapper It provides the information of compactor.
+   * @return A metrics compactor source
+   */
+  MetricsMobCompactorSource create(MetricsMobCompactorWrapper wrapper);
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorWrapper.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorWrapper.java
new file mode 100644
index 0000000..da6bc6d
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorWrapper.java
@@ -0,0 +1,50 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * This is the interface that will expose information to hadoop1/hadoop2 implementations of the
+ * MetricsMobCompactorSource.
+ */
+public interface MetricsMobCompactorWrapper {
+
+  /**
+   * Gets the name of the table the region belongs to.
+   * @return The string version of the table name.
+   */
+  String getTableName();
+
+  /**
+   * Gets the name of the namespace this table is in.
+   * @return String version of the namespace.  Can't be empty.
+   */
+  String getNamespace();
+
+  /**
+   * Gets the name of the region.
+   * @return The encoded name of the region.
+   */
+  String getRegionName();
+
+  /**
+   * Gets the store name.
+   * @return A a store name.
+   */
+  String getStoreName();
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSource.java
new file mode 100644
index 0000000..faade43
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSource.java
@@ -0,0 +1,81 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.metrics.BaseSource;
+
+/**
+ * Interface that classes that expose metrics about the mob file cache will implement.
+ */
+public interface MetricsMobFileCacheSource extends BaseSource {
+
+  /**
+   * The name of the metrics
+   */
+  String METRICS_NAME = "MobFileCache";
+
+  /**
+   * The context metrics will be under.
+   */
+  String METRICS_CONTEXT = "regionserver";
+
+  /**
+   * The name of the metrics context that metrics will be under in jmx
+   */
+  String METRICS_JMX_CONTEXT = "RegionServer,sub=" + METRICS_NAME;
+
+  /**
+   * Description
+   */
+  String METRICS_DESCRIPTION = "Metrics about MobFileCache";
+
+
+  String MOB_CACHE_ACCESS = "MetricsMobFileCacheSource_mobCacheAccess";
+  String MOB_CACHE_MISSED = "MetricsMobFileCacheSource_mobCacheMissed";
+  String MOB_CACHE_HIT_RATE = "MetricsMobFileCacheSource_mobCacheHitRate";
+
+  /**
+   * Close the mob file cache's metrics.
+   */
+  void close();
+
+  /**
+   * Update related time of mob cache access.
+   *
+   * @param count
+   *          the access count
+   */
+  void updateMobCacheAccess(long count);
+
+  /**
+   * Update related time of mob cache missed.
+   *
+   * @param size
+   *          the missed count
+   */
+  void updateMobCacheMissed(long size);
+
+  /**
+   * Set mob file cache hit rate.
+   *
+   * @param rate
+   *            mob file cache hit rate.
+   */
+  void updateHitRate(long rate);
+
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceFactory.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceFactory.java
new file mode 100644
index 0000000..8a4df85
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceFactory.java
@@ -0,0 +1,31 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * Interface of a factory to create MobFileCacheSource when given a MobFileCacheWrapper
+ */
+public interface MetricsMobFileCacheSourceFactory {
+  /**
+   * Creates a MetricsMobFileCacheSource from a MetricsMobFileCacheWrapper.
+   *
+   * @param cacheWrapper
+   * @return A metrics file cache source
+   */
+  MetricsMobFileCacheSource create(MetricsMobFileCacheWrapper cacheWrapper);
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheWrapper.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheWrapper.java
new file mode 100644
index 0000000..bc0afb0
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheWrapper.java
@@ -0,0 +1,26 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * This is the interface that will expose information to hadoop1/hadoop2 implementations of the
+ * MetricsMobFileCacheSource.
+ */
+public interface MetricsMobFileCacheWrapper {
+
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherAggregateSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherAggregateSource.java
new file mode 100644
index 0000000..4fa8419
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherAggregateSource.java
@@ -0,0 +1,64 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.metrics.BaseSource;
+
+/**
+ * This interface will be implemented by a MetricsSource that will export metrics from multiple mob
+ * store flusher into the hadoop metrics system.
+ */
+public interface MetricsMobStoreFlusherAggregateSource extends BaseSource {
+
+  /**
+   * The name of the metrics
+   */
+  String METRICS_NAME = "MobStoreFlusher";
+
+  /**
+   * The context metrics will be under.
+   */
+  String METRICS_CONTEXT = "regionserver";
+
+  /**
+   * The name of the metrics context that metrics will be under in jmx
+   */
+  String METRICS_JMX_CONTEXT = "RegionServer,sub=" + METRICS_NAME;
+
+  /**
+   * Description
+   */
+  String METRICS_DESCRIPTION = "Metrics about MobStoreFlusher";
+
+  /**
+   * Register a MobStoreFlusherSource as being open.
+   * 
+   * @param source
+   *          the source for the flusher being opened.
+   */
+  void register(MetricsMobStoreFlusherSource source);
+
+  /**
+   * Remove a flusher's source. This is called when a store is closed.
+   * 
+   * @param source
+   *          The region to remove.
+   */
+  void deregister(MetricsMobStoreFlusherSource source);
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSource.java
new file mode 100644
index 0000000..a6165d3
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSource.java
@@ -0,0 +1,60 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * Interface that classes that expose metrics about the mob store flusher will implement.
+ */
+public interface MetricsMobStoreFlusherSource extends Comparable<MetricsMobStoreFlusherSource> {
+
+  String FLUSH_COUNT_KEY = "flushCount";
+  String MOB_CELL_COUNT_KEY = "mobCellCount";
+  String MOB_CELL_SIZE_KEY = "mobCellSize";
+
+  /**
+   * Closes the region's metrics as this region is closing.
+   */
+  void close();
+
+  /**
+   * Update related counts of flushing.
+   */
+  void updateFlush();
+
+  /**
+   * Updates related counts of mob cell.
+   * 
+   * @param count
+   *          the cell count
+   */
+  void updateMobCellCount(long count);
+
+  /**
+   * Updates related size of mob cell.
+   * 
+   * @param size
+   *          the size of flushed mob cells
+   */
+  void updateMobCellSize(long size);
+
+  /**
+   * Gets the aggregate source to which this reports.
+   */
+  MetricsMobStoreFlusherAggregateSource getAggregateSource();
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceFactory.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceFactory.java
new file mode 100644
index 0000000..aad591d
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceFactory.java
@@ -0,0 +1,34 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * Interface of a factory to create MobStoreFlusherSource when given a MobStoreFlusherWrapper
+ */
+public interface MetricsMobStoreFlusherSourceFactory {
+
+  /**
+   * Creates a MetricsMobStoreFlusherSource from a MetricsMobStoreFlusherWrapper.
+   * 
+   * @param flusherWrapper It provides the information of flusher.
+   * @return A metrics flusher source
+   */
+  MetricsMobStoreFlusherSource create(MetricsMobStoreFlusherWrapper flusherWrapper);
+  
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapper.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapper.java
new file mode 100644
index 0000000..41e778e
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapper.java
@@ -0,0 +1,50 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * This is the interface that will expose information to hadoop1/hadoop2 implementations of the
+ * MobStoreFlusherSource.
+ */
+public interface MetricsMobStoreFlusherWrapper {
+
+  /**
+   * Gets the name of the table the region belongs to.
+   * @return The string version of the table name.
+   */
+  String getTableName();
+
+  /**
+   * Gets the name of the namespace this table is in.
+   * @return String version of the namespace.  Can't be empty.
+   */
+  String getNamespace();
+
+  /**
+   * Gets the name of the region.
+   * @return The encoded name of the region.
+   */
+  String getRegionName();
+
+  /**
+   * Gets the store name.
+   * @return A a store name.
+   */
+  String getStoreName();
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerAggregateSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerAggregateSource.java
new file mode 100644
index 0000000..f4a43e0
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerAggregateSource.java
@@ -0,0 +1,64 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.metrics.BaseSource;
+
+/**
+ * This interface will be implemented by a MetricsSource that will export metrics from multiple mob
+ * store scanner into the hadoop metrics system.
+ */
+public interface MetricsMobStoreScannerAggregateSource extends BaseSource{
+
+  /**
+   * The name of the metrics
+   */
+  String METRICS_NAME = "MobStoreScanner";
+
+  /**
+   * The context metrics will be under.
+   */
+  String METRICS_CONTEXT = "regionserver";
+
+  /**
+   * The name of the metrics context that metrics will be under in jmx
+   */
+  String METRICS_JMX_CONTEXT = "RegionServer,sub=" + METRICS_NAME;
+
+  /**
+   * Description
+   */
+  String METRICS_DESCRIPTION = "Metrics about MobStoreScanner";
+
+  /**
+   * Register a MobStoreScannerSource as being open.
+   *
+   * @param source
+   *          the source for the scanner being opened.
+   */
+  void register(MetricsMobStoreScannerSource source);
+
+  /**
+   * Remove a scanner's source. This is called when a store is closed.
+   *
+   * @param source
+   *          The region to remove.
+   */
+  void deregister(MetricsMobStoreScannerSource source);
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerSource.java
new file mode 100644
index 0000000..197dd2f
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerSource.java
@@ -0,0 +1,54 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * Interface that classes that expose metrics about the mob store scanner will implement.
+ */
+public interface MetricsMobStoreScannerSource extends Comparable<MetricsMobStoreScannerSource>{
+
+  String MOB_CELL_COUNT_KEY = "mobCellCount";
+  String MOB_CELL_SIZE_KEY = "mobCellSize";
+
+  /**
+   * Close the mob file scanner's metrics.
+   */
+  void close();
+
+  /**
+   * Update related counts of mob cell.
+   *
+   * @param count
+   *          the cell count
+   */
+  void updateMobCellCount(long count);
+
+  /**
+   * Update related size of mob cell.
+   *
+   * @param size
+   *          the size of flushed mob cells
+   */
+  void updateMobCellSize(long size);
+
+  /**
+   * Get the aggregate source to which this reports.
+   */
+  MetricsMobStoreScannerAggregateSource getAggregateSource();
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerSourceFactory.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerSourceFactory.java
new file mode 100644
index 0000000..075cdc7
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerSourceFactory.java
@@ -0,0 +1,33 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * Interface of a factory to create MobStoreScannerSource when given a MobStoreScannerWrapper
+ */
+public interface MetricsMobStoreScannerSourceFactory {
+
+  /**
+   * Creates a MetricsMobStoreScannerSource from a MetricsMobStoreScannerWrapper.
+   *
+   * @param scannerWrapper
+   * @return A metrics scanner source
+   */
+  MetricsMobStoreScannerSource create(MetricsMobStoreScannerWrapper scannerWrapper);
+
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerWrapper.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerWrapper.java
new file mode 100644
index 0000000..6dff8f9
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerWrapper.java
@@ -0,0 +1,52 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * This is the interface that will expose information to hadoop1/hadoop2 implementations of the
+ * MobStoreScannerSource.
+ */
+public interface MetricsMobStoreScannerWrapper {
+
+  /**
+   * Get the name of the table the region belongs to.
+   *
+   * @return The string version of the table name.
+   */
+  String getTableName();
+
+  /**
+   * Get the name of the namespace this table is in.
+   * @return String version of the namespace.  Can't be empty.
+   */
+  String getNamespace();
+
+  /**
+   * Get the name of the region.
+   *
+   * @return The encoded name of the region.
+   */
+  String getRegionName();
+
+  /**
+   * Gets the store name.
+   *
+   * @return A a store name.
+   */
+  String getStoreName();
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorAggregateSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorAggregateSourceImpl.java
new file mode 100644
index 0000000..d9feb8a
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorAggregateSourceImpl.java
@@ -0,0 +1,71 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import java.util.TreeSet;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.metrics.BaseSourceImpl;
+import org.apache.hadoop.metrics2.MetricsCollector;
+import org.apache.hadoop.metrics2.MetricsRecordBuilder;
+
+@InterfaceAudience.Private
+public class MetricsMobCompactorAggregateSourceImpl extends BaseSourceImpl implements
+    MetricsMobCompactorAggregateSource {
+  // lock to guard against concurrent access to regionSources
+  private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+
+  private final TreeSet<MetricsMobCompactorSourceImpl> sources =
+      new TreeSet<MetricsMobCompactorSourceImpl>();
+
+  public MetricsMobCompactorAggregateSourceImpl() {
+    this(METRICS_NAME, METRICS_DESCRIPTION, METRICS_CONTEXT, METRICS_JMX_CONTEXT);
+  }
+
+  public MetricsMobCompactorAggregateSourceImpl(String metricsName, String metricsDescription,
+      String metricsContext, String metricsJmxContext) {
+    super(metricsName, metricsDescription, metricsContext, metricsJmxContext);
+  }
+
+  @Override
+  public void register(MetricsMobCompactorSource source) {
+    lock.writeLock().lock();
+    try {
+      sources.add((MetricsMobCompactorSourceImpl) source);
+    } finally {
+      lock.writeLock().unlock();
+    }
+  }
+
+  @Override
+  public void deregister(MetricsMobCompactorSource source) {
+    lock.writeLock().lock();
+    try {
+      sources.remove(source);
+    } finally {
+      lock.writeLock().unlock();
+    }
+  }
+
+  @Override
+  public void getMetrics(MetricsCollector collector, boolean all) {
+    MetricsRecordBuilder mrb = collector.addRecord(metricsName).setContext(metricsContext);
+    metricsRegistry.snapshot(mrb, all);
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorSourceFactoryImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorSourceFactoryImpl.java
new file mode 100644
index 0000000..e4803d5
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorSourceFactoryImpl.java
@@ -0,0 +1,49 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+
+/**
+ * Factory to create MetricsMobCompactorSource when given a MetricsMobCompactorWrapper
+ */
+@InterfaceAudience.Private
+public class MetricsMobCompactorSourceFactoryImpl implements MetricsMobCompactorSourceFactory {
+
+  public static enum FactoryStorage {
+    INSTANCE;
+    private Object aggLock = new Object();
+    private MetricsMobCompactorAggregateSourceImpl aggImpl;
+  }
+
+  private synchronized MetricsMobCompactorAggregateSourceImpl getAggregate() {
+    synchronized (FactoryStorage.INSTANCE.aggLock) {
+      if (FactoryStorage.INSTANCE.aggImpl == null) {
+        FactoryStorage.INSTANCE.aggImpl = new MetricsMobCompactorAggregateSourceImpl();
+      }
+      return FactoryStorage.INSTANCE.aggImpl;
+    }
+  }
+
+  @Override
+  public MetricsMobCompactorSource create(MetricsMobCompactorWrapper wrapper) {
+    return new MetricsMobCompactorSourceImpl(wrapper, getAggregate());
+  }
+
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorSourceImpl.java
new file mode 100644
index 0000000..a676513
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorSourceImpl.java
@@ -0,0 +1,115 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.metrics2.impl.JmxCacheBuster;
+import org.apache.hadoop.metrics2.lib.DynamicMetricsRegistry;
+import org.apache.hadoop.metrics2.lib.MutableHistogram;
+
+/**
+ * Hadoop2 implementation of MetricsMobCompactorSource.
+ *
+ * Implements BaseSource through BaseSourceImpl, following the pattern
+ */
+@InterfaceAudience.Private
+public class MetricsMobCompactorSourceImpl implements MetricsMobCompactorSource {
+
+  private String countMoveToMobKey;
+  private String countMoveFromMobKey;
+  private String sizeMoveToMobKey;
+  private String sizeMoveFromMobKey;
+
+  private MutableHistogram countMoveToMob;
+  private MutableHistogram countMoveFromMob;
+  private MutableHistogram sizeMoveToMob;
+  private MutableHistogram sizeMoveFromMob;
+
+  private MetricsMobCompactorAggregateSourceImpl agg;
+  private DynamicMetricsRegistry registry;
+  private static final Log LOG = LogFactory.getLog(MetricsMobStoreFlusherSourceImpl.class);
+  public String prefix;
+
+  public MetricsMobCompactorSourceImpl(MetricsMobCompactorWrapper wrapper,
+      MetricsMobCompactorAggregateSourceImpl aggregate) {
+    prefix = "Namespace_" + wrapper.getNamespace() + "_table_"
+        + wrapper.getTableName() + "_region_" + wrapper.getRegionName() + "_store_"
+        + wrapper.getStoreName() + "_metric_";
+    agg = aggregate;
+    agg.register(this);
+    LOG.debug("Creating new MetricsMobCompactorSourceImpl for store " + prefix);
+    registry = agg.getMetricsRegistry();
+    countMoveToMobKey = prefix + MetricsMobCompactorSource.COUNT_MOVE_TO_MOB;
+    countMoveToMob = registry.getHistogram(countMoveToMobKey);
+    countMoveFromMobKey = prefix + MetricsMobCompactorSource.COUNT_MOVE_FROM_MOB;
+    countMoveFromMob = registry.getHistogram(countMoveFromMobKey);
+    sizeMoveToMobKey = prefix + MetricsMobCompactorSource.SIZE_MOVE_TO_MOB;
+    sizeMoveToMob = registry.getHistogram(sizeMoveToMobKey);
+    sizeMoveFromMobKey = prefix + MetricsMobCompactorSource.SIZE_MOVE_FROM_MOB;
+    sizeMoveFromMob = registry.getHistogram(sizeMoveFromMobKey);
+  }
+
+  @Override
+  public int compareTo(MetricsMobCompactorSource source) {
+    if (!(source instanceof MetricsMobCompactorSource))
+      return -1;
+
+    MetricsMobCompactorSourceImpl impl = (MetricsMobCompactorSourceImpl) source;
+    return this.prefix.compareTo(impl.prefix);
+  }
+
+  @Override
+  public void close() {
+    agg.deregister(this);
+
+    LOG.trace("Removing mob compactor Metrics: " + prefix);
+    registry.removeMetric(countMoveToMobKey);
+    registry.removeMetric(countMoveFromMobKey);
+    registry.removeMetric(sizeMoveToMobKey);
+    registry.removeMetric(sizeMoveFromMobKey);
+
+    JmxCacheBuster.clearJmxCache();
+  }
+
+  @Override
+  public void updateCountMoveToMob(long count) {
+    countMoveToMob.add(count);
+  }
+
+  @Override
+  public void updateCountMoveFromMob(long count) {
+    countMoveFromMob.add(count);
+  }
+
+  @Override
+  public void updateSizeMoveToMob(long size) {
+    sizeMoveToMob.add(size);
+  }
+
+  @Override
+  public void updateSizeMoveFromMob(long size) {
+    sizeMoveFromMob.add(size);
+  }
+
+  @Override
+  public MetricsMobCompactorAggregateSource getAggregateSource() {
+    return agg;
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceFactoryImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceFactoryImpl.java
new file mode 100644
index 0000000..55af123
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceFactoryImpl.java
@@ -0,0 +1,40 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+/**
+ * Factory to create MetricsMobFileCacheSource when given a MetricsMobFileCacheWrapper
+ *
+ */
+@InterfaceAudience.Private
+public class MetricsMobFileCacheSourceFactoryImpl implements MetricsMobFileCacheSourceFactory{
+  public static enum FactoryStorage {
+    INSTANCE;
+    private MetricsMobFileCacheSource source;
+  }
+
+  @Override
+  public MetricsMobFileCacheSource create(MetricsMobFileCacheWrapper cacheWrapper) {
+    if (FactoryStorage.INSTANCE.source == null) {
+      FactoryStorage.INSTANCE.source = new MetricsMobFileCacheSourceImpl(cacheWrapper);
+    }
+    return FactoryStorage.INSTANCE.source;
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceImpl.java
new file mode 100644
index 0000000..032a391
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceImpl.java
@@ -0,0 +1,85 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.metrics.BaseSourceImpl;
+import org.apache.hadoop.metrics2.impl.JmxCacheBuster;
+import org.apache.hadoop.metrics2.lib.MutableHistogram;
+
+/**
+ * Hadoop2 implementation of MetricsMobFileCacheSource.
+ *
+ * Implements BaseSource through BaseSourceImpl, following the pattern
+ */
+@InterfaceAudience.Private
+public class MetricsMobFileCacheSourceImpl extends BaseSourceImpl
+        implements MetricsMobFileCacheSource{
+
+  private MutableHistogram cacheAccessed;
+  private MutableHistogram cacheMissed;
+  private MutableHistogram hitRate;
+
+  public MetricsMobFileCacheSourceImpl(MetricsMobFileCacheWrapper wrapper){
+    this(METRICS_NAME,
+            METRICS_DESCRIPTION,
+            METRICS_CONTEXT,
+            METRICS_JMX_CONTEXT,
+            wrapper);
+  }
+
+  public MetricsMobFileCacheSourceImpl(String metricsName,
+                                 String metricsDescription,
+                                 String metricsContext,
+                                 String metricsJmxContext,
+                                 MetricsMobFileCacheWrapper wrapper) {
+    super(metricsName, metricsDescription, metricsContext, metricsJmxContext);
+  }
+
+  public void init(){
+    super.init();
+    cacheAccessed = metricsRegistry.newHistogram(MOB_CACHE_ACCESS);
+    cacheMissed = metricsRegistry.newHistogram(MOB_CACHE_MISSED);
+    hitRate = metricsRegistry.newHistogram(MOB_CACHE_HIT_RATE);
+  }
+
+  @Override
+  public void close() {
+    metricsRegistry.removeMetric(MOB_CACHE_ACCESS);
+    metricsRegistry.removeMetric(MOB_CACHE_MISSED);
+    metricsRegistry.removeMetric(MOB_CACHE_HIT_RATE);
+
+    JmxCacheBuster.clearJmxCache();
+  }
+
+  @Override
+  public void updateMobCacheAccess(long count) {
+    cacheAccessed.add(count);
+  }
+
+  @Override
+  public void updateMobCacheMissed(long count) {
+    cacheMissed.add(count);
+  }
+
+  @Override
+  public void updateHitRate(long rate) {
+    hitRate.add(rate);
+  }
+
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherAggregateSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherAggregateSourceImpl.java
new file mode 100644
index 0000000..08ddc99
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherAggregateSourceImpl.java
@@ -0,0 +1,73 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import java.util.TreeSet;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.metrics.BaseSourceImpl;
+import org.apache.hadoop.metrics2.MetricsCollector;
+import org.apache.hadoop.metrics2.MetricsRecordBuilder;
+
+@InterfaceAudience.Private
+public class MetricsMobStoreFlusherAggregateSourceImpl extends BaseSourceImpl implements
+    MetricsMobStoreFlusherAggregateSource {
+  // lock to guard against concurrent access to regionSources
+  private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+
+  private final TreeSet<MetricsMobStoreFlusherSourceImpl> flusherSources =
+      new TreeSet<MetricsMobStoreFlusherSourceImpl>();
+
+  public MetricsMobStoreFlusherAggregateSourceImpl() {
+    this(METRICS_NAME, METRICS_DESCRIPTION, METRICS_CONTEXT, METRICS_JMX_CONTEXT);
+  }
+
+  public MetricsMobStoreFlusherAggregateSourceImpl(String metricsName, String metricsDescription,
+      String metricsContext, String metricsJmxContext) {
+    super(metricsName, metricsDescription, metricsContext, metricsJmxContext);
+  }
+
+  @Override
+  public void register(MetricsMobStoreFlusherSource source) {
+    lock.writeLock().lock();
+    try {
+      flusherSources.add((MetricsMobStoreFlusherSourceImpl) source);
+    } finally {
+      lock.writeLock().unlock();
+    }
+  }
+
+  @Override
+  public void deregister(MetricsMobStoreFlusherSource source) {
+    lock.writeLock().lock();
+    try {
+      flusherSources.remove(source);
+    } finally {
+      lock.writeLock().unlock();
+    }
+  }
+
+  @Override
+  public void getMetrics(MetricsCollector collector, boolean all) {
+    MetricsRecordBuilder mrb = collector.addRecord(metricsName)
+        .setContext(metricsContext);
+    metricsRegistry.snapshot(mrb, all);
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceFactoryImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceFactoryImpl.java
new file mode 100644
index 0000000..f96af0d
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceFactoryImpl.java
@@ -0,0 +1,50 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+/**
+ * Factory to create MetricsMobStoreFlusherSource when given a  MetricsMobStoreFlusherWrapper
+ */
+@InterfaceAudience.Private
+public class MetricsMobStoreFlusherSourceFactoryImpl
+implements MetricsMobStoreFlusherSourceFactory {
+
+  public static enum FactoryStorage {
+    INSTANCE;
+    private Object aggLock = new Object();
+    private MetricsMobStoreFlusherAggregateSourceImpl aggImpl;
+  }
+
+  private synchronized MetricsMobStoreFlusherAggregateSourceImpl getAggregate() {
+    synchronized (FactoryStorage.INSTANCE.aggLock) {
+      if (FactoryStorage.INSTANCE.aggImpl == null) {
+        FactoryStorage.INSTANCE.aggImpl = new MetricsMobStoreFlusherAggregateSourceImpl();
+      }
+      return FactoryStorage.INSTANCE.aggImpl;
+    }
+  }
+
+  @Override
+  public MetricsMobStoreFlusherSource create(MetricsMobStoreFlusherWrapper flusherWrapper) {
+    return new MetricsMobStoreFlusherSourceImpl(flusherWrapper, getAggregate());
+  }
+
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceImpl.java
new file mode 100644
index 0000000..a8e42e0
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherSourceImpl.java
@@ -0,0 +1,122 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.metrics2.impl.JmxCacheBuster;
+import org.apache.hadoop.metrics2.lib.DynamicMetricsRegistry;
+import org.apache.hadoop.metrics2.lib.MutableCounterLong;
+
+/**
+ * Hadoop2 implementation of MetricsMobStoreFlusherSource.
+ *
+ * Implements BaseSource through BaseSourceImpl, following the pattern
+ */
+@InterfaceAudience.Private
+public class MetricsMobStoreFlusherSourceImpl implements MetricsMobStoreFlusherSource {
+
+  private String flushCountKey;
+  private String mobCellCountKey;
+  private String mobCellSizeKey;
+
+  private MutableCounterLong flushCount;
+  private MutableCounterLong mobCellCount;
+  private MutableCounterLong mobCellSize;
+
+  private MetricsMobStoreFlusherAggregateSourceImpl agg;
+  private DynamicMetricsRegistry registry;
+  private static final Log LOG = LogFactory.getLog(MetricsMobStoreFlusherSourceImpl.class);
+  public String prefix;
+
+  public MetricsMobStoreFlusherSourceImpl(MetricsMobStoreFlusherWrapper flusherWrapper,
+      MetricsMobStoreFlusherAggregateSourceImpl aggregate) {
+    prefix = "Namespace_" + flusherWrapper.getNamespace() + "_table_"
+        + flusherWrapper.getTableName() + "_region_" + flusherWrapper.getRegionName() + "_store_"
+        + flusherWrapper.getStoreName() + "_metric_";
+    agg = aggregate;
+    agg.register(this);
+    LOG.debug("Creating new MetricsMobStoreFlusherSourceImpl for store " + prefix);
+    registry = agg.getMetricsRegistry();
+    flushCountKey = prefix + MetricsMobStoreFlusherSource.FLUSH_COUNT_KEY;
+    flushCount = registry.getLongCounter(flushCountKey, 0l);
+
+    mobCellCountKey = prefix + MetricsMobStoreFlusherSource.MOB_CELL_COUNT_KEY;
+    mobCellCount = registry.getLongCounter(mobCellCountKey, 0l);
+
+    mobCellSizeKey = prefix + MetricsMobStoreFlusherSource.MOB_CELL_SIZE_KEY;
+    mobCellSize = registry.getLongCounter(mobCellSizeKey, 0l);
+  }
+
+  @Override
+  public void close() {
+    agg.deregister(this);
+
+    LOG.trace("Removing mob store flusher Metrics: " + prefix);
+    registry.removeMetric(flushCountKey);
+    registry.removeMetric(mobCellCountKey);
+    registry.removeMetric(mobCellSizeKey);
+
+    JmxCacheBuster.clearJmxCache();
+  }
+
+  @Override
+  public void updateFlush() {
+    flushCount.incr();
+  }
+
+  @Override
+  public void updateMobCellCount(long count) {
+    mobCellCount.incr(count);
+  }
+
+  @Override
+  public void updateMobCellSize(long size) {
+    mobCellSize.incr(size);
+  }
+
+  @Override
+  public MetricsMobStoreFlusherAggregateSource getAggregateSource() {
+    return agg;
+  }
+
+  @Override
+  public int compareTo(MetricsMobStoreFlusherSource source) {
+    if (!(source instanceof MetricsMobStoreFlusherSource))
+      return -1;
+
+    MetricsMobStoreFlusherSourceImpl impl = (MetricsMobStoreFlusherSourceImpl) source;
+    return this.prefix.compareTo(impl.prefix);
+  }
+
+  @Override
+  public int hashCode() {
+    return this.prefix.hashCode();
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    if (obj == this)
+      return true;
+    if (!(obj instanceof MetricsMobStoreFlusherSourceImpl))
+      return false;
+    return compareTo((MetricsMobStoreFlusherSourceImpl) obj) == 0;
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerAggregateSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerAggregateSourceImpl.java
new file mode 100644
index 0000000..0b4643c
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerAggregateSourceImpl.java
@@ -0,0 +1,72 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.metrics.BaseSourceImpl;
+import org.apache.hadoop.metrics2.MetricsCollector;
+import org.apache.hadoop.metrics2.MetricsRecordBuilder;
+
+import java.util.TreeSet;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+@InterfaceAudience.Private
+public class MetricsMobStoreScannerAggregateSourceImpl extends BaseSourceImpl implements
+        MetricsMobStoreScannerAggregateSource {
+  // lock to guard against concurrent access to regionSources
+  private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+
+  private final TreeSet<MetricsMobStoreScannerSourceImpl> scannerSources =
+          new TreeSet<MetricsMobStoreScannerSourceImpl>();
+
+  public MetricsMobStoreScannerAggregateSourceImpl() {
+    this(METRICS_NAME, METRICS_DESCRIPTION, METRICS_CONTEXT, METRICS_JMX_CONTEXT);
+  }
+
+  public MetricsMobStoreScannerAggregateSourceImpl(String metricsName, String metricsDescription,
+      String metricsContext, String metricsJmxContext) {
+    super(metricsName, metricsDescription, metricsContext, metricsJmxContext);
+  }
+
+  @Override
+  public void register(MetricsMobStoreScannerSource source) {
+    lock.writeLock().lock();
+    try {
+      scannerSources.add((MetricsMobStoreScannerSourceImpl) source);
+    } finally {
+      lock.writeLock().unlock();
+    }
+  }
+
+  @Override
+  public void deregister(MetricsMobStoreScannerSource source) {
+    lock.writeLock().lock();
+    try {
+      scannerSources.remove(source);
+    } finally {
+      lock.writeLock().unlock();
+    }
+  }
+
+  @Override
+  public void getMetrics(MetricsCollector collector, boolean all) {
+    MetricsRecordBuilder mrb = collector.addRecord(metricsName)
+            .setContext(metricsContext);
+    metricsRegistry.snapshot(mrb, all);
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerSourceFactoryImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerSourceFactoryImpl.java
new file mode 100644
index 0000000..aec471c
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerSourceFactoryImpl.java
@@ -0,0 +1,49 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+/**
+ * Factory to create MetricsMobStoreScannerSource when given a MetricsMobStoreScannerWrapper
+ */
+@InterfaceAudience.Private
+public class MetricsMobStoreScannerSourceFactoryImpl implements
+        MetricsMobStoreScannerSourceFactory {
+
+  public static enum FactoryStorage {
+    INSTANCE;
+    private Object aggLock = new Object();
+    private MetricsMobStoreScannerAggregateSourceImpl aggImpl;
+  }
+
+  private synchronized MetricsMobStoreScannerAggregateSourceImpl getAggregate() {
+    synchronized (FactoryStorage.INSTANCE.aggLock) {
+      if (FactoryStorage.INSTANCE.aggImpl == null) {
+        FactoryStorage.INSTANCE.aggImpl = new MetricsMobStoreScannerAggregateSourceImpl();
+      }
+      return FactoryStorage.INSTANCE.aggImpl;
+    }
+  }
+
+  @Override
+  public MetricsMobStoreScannerSource create(MetricsMobStoreScannerWrapper scannerWrapper) {
+    return new MetricsMobStoreScannerSourceImpl(scannerWrapper, getAggregate());
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerSourceImpl.java
new file mode 100644
index 0000000..99da7fb
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerSourceImpl.java
@@ -0,0 +1,111 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.metrics2.impl.JmxCacheBuster;
+import org.apache.hadoop.metrics2.lib.DynamicMetricsRegistry;
+import org.apache.hadoop.metrics2.lib.MutableCounterLong;
+
+/**
+ * Hadoop2 implementation of MetricsMobStoreScannerSource.
+ *
+ * Implements BaseSource through BaseSourceImpl, following the pattern
+ */
+@InterfaceAudience.Private
+public class MetricsMobStoreScannerSourceImpl implements MetricsMobStoreScannerSource{
+
+  private String mobCellCountKey;
+  private String mobCellSizeKey;
+
+  private MutableCounterLong mobCellCount;
+  private MutableCounterLong mobCellSize;
+
+  private MetricsMobStoreScannerAggregateSourceImpl agg;
+  private DynamicMetricsRegistry registry;
+  private static final Log LOG = LogFactory.getLog(MetricsMobStoreScannerSourceImpl.class);
+  public String prefix;
+
+  public MetricsMobStoreScannerSourceImpl(MetricsMobStoreScannerWrapper wrapper,
+      MetricsMobStoreScannerAggregateSourceImpl aggregate){
+    prefix = "Namespace_" + wrapper.getNamespace() + "_table_"
+            + wrapper.getTableName() + "_region_" + wrapper.getRegionName() + "_store_"
+            + wrapper.getStoreName() + "_mob_scanner_metric_";
+    agg = aggregate;
+    agg.register(this);
+    LOG.debug("Creating new MetricsMobStoreScannerSourceImpl for store " + prefix);
+    registry = agg.getMetricsRegistry();
+
+    mobCellCountKey = prefix + MetricsMobStoreScannerSource.MOB_CELL_COUNT_KEY;
+    mobCellCount = registry.getLongCounter(mobCellCountKey, 0l);
+
+    mobCellSizeKey = prefix + MetricsMobStoreScannerSource.MOB_CELL_SIZE_KEY;
+    mobCellSize = registry.getLongCounter(mobCellSizeKey, 0l);
+  }
+
+  @Override
+  public void close() {
+    agg.deregister(this);
+
+    LOG.trace("Removing mob store scanner Metrics: " + prefix);
+    registry.removeMetric(mobCellCountKey);
+    registry.removeMetric(mobCellSizeKey);
+
+    JmxCacheBuster.clearJmxCache();
+  }
+
+  @Override
+  public void updateMobCellCount(long count) {
+    mobCellCount.incr(count);
+  }
+
+  @Override
+  public void updateMobCellSize(long size) {
+    mobCellSize.incr(size);
+  }
+
+  @Override
+  public MetricsMobStoreScannerAggregateSource getAggregateSource() {
+    return agg;
+  }
+
+  @Override
+  public int compareTo(MetricsMobStoreScannerSource source) {
+    if(!(source instanceof MetricsMobStoreScannerSource))
+      return -1;
+    MetricsMobStoreScannerSourceImpl impl = (MetricsMobStoreScannerSourceImpl)source;
+    return this.prefix.compareTo(impl.prefix);
+  }
+
+  @Override
+  public int hashCode() {
+    return this.prefix.hashCode();
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    if (obj == this)
+      return true;
+    if (!(obj instanceof MetricsMobStoreScannerSourceImpl))
+      return false;
+    return compareTo((MetricsMobStoreScannerSourceImpl) obj) == 0;
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobCompactorSourceFactory b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobCompactorSourceFactory
new file mode 100644
index 0000000..af901c3
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobCompactorSourceFactory
@@ -0,0 +1 @@
+org.apache.hadoop.hbase.regionserver.MetricsMobCompactorSourceFactoryImpl
\ No newline at end of file
diff --git a/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobFileCacheSourceFactory b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobFileCacheSourceFactory
new file mode 100644
index 0000000..0551e16
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobFileCacheSourceFactory
@@ -0,0 +1 @@
+org.apache.hadoop.hbase.regionserver.MetricsMobFileCacheSourceFactoryImpl
\ No newline at end of file
diff --git a/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobStoreFlusherSourceFactory b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobStoreFlusherSourceFactory
new file mode 100644
index 0000000..73b3f16
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobStoreFlusherSourceFactory
@@ -0,0 +1 @@
+org.apache.hadoop.hbase.regionserver.MetricsMobStoreFlusherSourceFactoryImpl
diff --git a/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobStoreScannerSourceFactory b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobStoreScannerSourceFactory
new file mode 100644
index 0000000..818bf8c
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobStoreScannerSourceFactory
@@ -0,0 +1 @@
+org.apache.hadoop.hbase.regionserver.MetricsMobStoreScannerSourceFactoryImpl
\ No newline at end of file
diff --git a/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobCompactorSourceImpl.java b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobCompactorSourceImpl.java
new file mode 100644
index 0000000..e5e5cc8
--- /dev/null
+++ b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobCompactorSourceImpl.java
@@ -0,0 +1,64 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+import org.junit.Test;
+
+/**
+ * Test for MetricsMobCompactorSourceImpl
+ */
+public class TestMetricsMobCompactorSourceImpl {
+
+  @Test
+  public void testGetInstance() throws Exception {
+    MetricsMobCompactorSourceFactory metricsMobCompactorSourceFactory = CompatibilitySingletonFactory
+        .getInstance(MetricsMobCompactorSourceFactory.class);
+    MetricsMobCompactorSource source = metricsMobCompactorSourceFactory
+        .create(new MetricsMobCompactorWrapperStub());
+    assertTrue(source instanceof MetricsMobCompactorSourceImpl);
+    assertSame(metricsMobCompactorSourceFactory,
+        CompatibilitySingletonFactory.getInstance(MetricsMobCompactorSourceFactory.class));
+  }
+
+  static class MetricsMobCompactorWrapperStub implements MetricsMobCompactorWrapper {
+
+    @Override
+    public String getTableName() {
+      return "mobtable";
+    }
+
+    @Override
+    public String getNamespace() {
+      return "test";
+    }
+
+    @Override
+    public String getRegionName() {
+      return "region#1";
+    }
+
+    @Override
+    public String getStoreName() {
+      return "family#1";
+    }
+  }
+}
diff --git a/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobFileCacheSourceImpl.java b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobFileCacheSourceImpl.java
new file mode 100644
index 0000000..fd473e9
--- /dev/null
+++ b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobFileCacheSourceImpl.java
@@ -0,0 +1,48 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+import org.junit.Test;
+
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * Test for MetricsMobFileCacheSourceImpl
+ */
+public class TestMetricsMobFileCacheSourceImpl {
+
+  @Test
+  public void testGetInstance() throws Exception {
+    MetricsMobFileCacheSourceFactory metricsMobFileCacheSourceFactory =
+            CompatibilitySingletonFactory.getInstance(MetricsMobFileCacheSourceFactory.class);
+    MetricsMobFileCacheSource cacheSource =
+            metricsMobFileCacheSourceFactory.create(null);
+    assertTrue(cacheSource instanceof MetricsMobFileCacheSourceImpl);
+    assertSame(metricsMobFileCacheSourceFactory,
+            CompatibilitySingletonFactory.getInstance(MetricsMobFileCacheSourceFactory.class));
+  }
+
+  @Test(expected = RuntimeException.class)
+  public void testNoGetMobFileCacheMetricsSourceImpl() throws Exception {
+    // This should throw an exception because MetricsMobFileCacheSourceImpl should only
+    // be created by a factory.
+    CompatibilitySingletonFactory.getInstance(MetricsMobFileCacheSourceImpl.class);
+  }
+}
diff --git a/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreFlusherSourceImpl.java b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreFlusherSourceImpl.java
new file mode 100644
index 0000000..67f1a40
--- /dev/null
+++ b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreFlusherSourceImpl.java
@@ -0,0 +1,65 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+import org.junit.Test;
+
+/**
+ * Test for MetricsMobStoreFlusherSourceImpl
+ */
+public class TestMetricsMobStoreFlusherSourceImpl {
+
+  @Test
+  public void testGetInstance() throws Exception {
+    MetricsMobStoreFlusherSourceFactory metricsMobStoreFlusherSourceFactory =
+        CompatibilitySingletonFactory.getInstance(MetricsMobStoreFlusherSourceFactory.class);
+    MetricsMobStoreFlusherSource source = metricsMobStoreFlusherSourceFactory
+        .create(new MetricsMobStoreFlusherWrapperStub());
+    assertTrue(source instanceof MetricsMobStoreFlusherSourceImpl);
+    assertSame(metricsMobStoreFlusherSourceFactory,
+        CompatibilitySingletonFactory.getInstance(MetricsMobStoreFlusherSourceFactory.class));
+  }
+
+  static class MetricsMobStoreFlusherWrapperStub implements MetricsMobStoreFlusherWrapper {
+
+    @Override
+    public String getTableName() {
+      return "mobtable";
+    }
+
+    @Override
+    public String getNamespace() {
+      return "test";
+    }
+
+    @Override
+    public String getRegionName() {
+      return "region#1";
+    }
+
+    @Override
+    public String getStoreName() {
+      return "family#1";
+    }
+  }
+}
diff --git a/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreScannerSourceImpl.java b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreScannerSourceImpl.java
new file mode 100644
index 0000000..7208fd3
--- /dev/null
+++ b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreScannerSourceImpl.java
@@ -0,0 +1,64 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+import org.junit.Test;
+
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * Test for MetricsMobStoreScannerSourceImpl
+ */
+public class TestMetricsMobStoreScannerSourceImpl {
+
+  @Test
+  public void testGetInstance() throws Exception {
+    MetricsMobStoreScannerSourceFactory metricsMobStoreScannerSourceFactory =
+            CompatibilitySingletonFactory.getInstance(MetricsMobStoreScannerSourceFactory.class);
+    MetricsMobStoreScannerSource source = metricsMobStoreScannerSourceFactory
+            .create(new MetricsMobStoreScannerWrapperStub());
+    assertTrue(source instanceof MetricsMobStoreScannerSourceImpl);
+    assertSame(metricsMobStoreScannerSourceFactory,
+            CompatibilitySingletonFactory.getInstance(MetricsMobStoreScannerSourceFactory.class));
+  }
+
+  static class MetricsMobStoreScannerWrapperStub implements MetricsMobStoreScannerWrapper {
+
+    @Override
+    public String getTableName() {
+      return "mobtable";
+    }
+
+    @Override
+    public String getNamespace() {
+      return "test";
+    }
+
+    @Override
+    public String getRegionName() {
+      return "region#1";
+    }
+
+    @Override
+    public String getStoreName() {
+      return "family#1";
+    }
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java
index e77b9ce..f84185a 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java
@@ -36,6 +36,7 @@
 import org.apache.hadoop.hbase.regionserver.HMobStore;
 import org.apache.hadoop.hbase.regionserver.HStore;
 import org.apache.hadoop.hbase.regionserver.InternalScanner;
+import org.apache.hadoop.hbase.regionserver.MetricsMobCompactor;
 import org.apache.hadoop.hbase.regionserver.Store;
 import org.apache.hadoop.hbase.regionserver.StoreFile;
 import org.apache.hadoop.hbase.regionserver.StoreFile.Writer;
@@ -50,9 +51,11 @@
 
   private static final Log LOG = LogFactory.getLog(DefaultMobCompactor.class);
   private long mobCellValueSizeThreshold;
+  private MetricsMobCompactor metricsCompactor;
   public DefaultMobCompactor(Configuration conf, Store store) {
     super(conf, store);
     mobCellValueSizeThreshold = MobUtils.getMobThreshold(store.getFamily());
+    metricsCompactor = ((HMobStore) store).getMetricsCompactor();
   }
 
   /**
@@ -117,6 +120,10 @@ protected boolean performCompaction(FileDetails fd, InternalScanner scanner, Cel
     long mobCells = 0;
     Tag mobSrcTableName = new Tag(TagType.MOB_SRC_TABLE_NAME_TAG_TYPE, store.getTableName()
             .getName());
+    long countMoveToMob = 0;
+    long countMoveFromMob = 0;
+    long sizeMoveToMob = 0;
+    long sizeMoveFromMob = 0;
     HMobStore mobStore = (HMobStore) store;
     try {
       try {
@@ -160,6 +167,8 @@ protected boolean performCompaction(FileDetails fd, InternalScanner scanner, Cel
                   // compaction.
                   writer.append(kv);
                 }
+                countMoveFromMob++;
+                sizeMoveFromMob += cell.getValueLength();
               }
             } else {
               LOG.warn("The value format of the KeyValue " + kv + " is wrong, its length than "
@@ -179,6 +188,8 @@ protected boolean performCompaction(FileDetails fd, InternalScanner scanner, Cel
             KeyValue reference = MobUtils.createMobRefKeyValue(kv, fileName, mobSrcTableName);
             // write the cell whose value is the path of a mob file to the store file.
             writer.append(reference);
+            countMoveToMob++;
+            sizeMoveToMob += kv.getValueLength();
           }
           ++progress.currentCompactedKVs;
 
@@ -214,6 +225,10 @@ protected boolean performCompaction(FileDetails fd, InternalScanner scanner, Cel
         }
       }
     }
+    metricsCompactor.updateCountMoveFromMob(countMoveFromMob);
+    metricsCompactor.updateCountMoveToMob(countMoveToMob);
+    metricsCompactor.updateSizeMoveFromMob(sizeMoveFromMob);
+    metricsCompactor.updateSizeMoveToMob(sizeMoveToMob);
     progress.complete();
     return true;
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java
index 1466abd..e17b3bf 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java
@@ -39,6 +39,7 @@
 import org.apache.hadoop.hbase.regionserver.HMobStore;
 import org.apache.hadoop.hbase.regionserver.InternalScanner;
 import org.apache.hadoop.hbase.regionserver.MemStoreSnapshot;
+import org.apache.hadoop.hbase.regionserver.MetricsMobStoreFlusher;
 import org.apache.hadoop.hbase.regionserver.Store;
 import org.apache.hadoop.hbase.regionserver.StoreFile;
 import org.apache.hadoop.hbase.util.Bytes;
@@ -67,6 +68,7 @@
   private long mobCellValueSizeThreshold = 0;
   private Path targetPath;
   private HMobStore mobStore;
+  protected MetricsMobStoreFlusher metricsFlusher;
 
   public DefaultMobStoreFlusher(Configuration conf, Store store) throws IOException {
     super(conf, store);
@@ -79,6 +81,7 @@ public DefaultMobStoreFlusher(Configuration conf, Store store) throws IOExceptio
         this.store.getFileSystem().mkdirs(targetPath);
       }
       this.mobStore = (HMobStore) store;
+      metricsFlusher = this.mobStore.getMetricsFlusher();
     }
   }
 
@@ -165,6 +168,7 @@ protected void performMobFlush(MemStoreSnapshot snapshot, long cacheFlushId,
     int compactionKVMax = conf.getInt(HConstants.COMPACTION_KV_MAX,
         HConstants.COMPACTION_KV_MAX_DEFAULT);
     long mobKVCount = 0;
+    long mobKVSize = 0;
     long time = snapshot.getTimeRangeTracker().getMaximumTimestamp();
     mobFileWriter = mobStore.createWriterInTmp(new Date(time), snapshot.getCellsCount(),
         store.getFamily().getCompression(), store.getRegionInfo().getStartKey());
@@ -190,6 +194,7 @@ protected void performMobFlush(MemStoreSnapshot snapshot, long cacheFlushId,
             } else {
               // append the original keyValue in the mob file.
               mobFileWriter.append(kv);
+              mobKVSize += kv.getLength();
               mobKVCount++;
 
               // append the tags to the KeyValue.
@@ -214,6 +219,11 @@ protected void performMobFlush(MemStoreSnapshot snapshot, long cacheFlushId,
       // the committed mob file will be handled by the sweep tool as an unused
       // file.
       mobStore.commitFile(mobFileWriter.getPath(), targetPath);
+      if (metricsFlusher != null) {
+        metricsFlusher.updateFlush();
+        metricsFlusher.updateMobCellCount(mobKVCount);
+        metricsFlusher.updateMobCellSize(mobKVSize);
+      }
     } else {
       try {
         // If the mob file is empty, delete it instead of committing.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java
index 4bb4fd2..d212a0a 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java
@@ -36,6 +36,8 @@
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.hbase.regionserver.MetricsMobFileCache;
+import org.apache.hadoop.hbase.regionserver.MetricsMobFileCacheWrapperImpl;
 import org.apache.hadoop.hbase.util.IdLock;
 
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
@@ -78,6 +80,7 @@ public void run() {
   private long lastAccess;
   private final AtomicLong miss;
   private long lastMiss;
+  private final MetricsMobFileCache metricsCache;
 
   // a lock to sync the evict to guarantee the eviction occurs in sequence.
   // the method evictFile is not sync by this lock, the ConcurrentHashMap does the sync there.
@@ -120,6 +123,7 @@ public MobFileCache(Configuration conf) {
       this.scheduleThreadPool.scheduleAtFixedRate(new EvictionThread(this), period, period,
           TimeUnit.SECONDS);
     }
+    metricsCache = new MetricsMobFileCache(new MetricsMobFileCacheWrapperImpl());
     LOG.info("MobFileCache is initialized, and the cache size is " + mobFileMaxCacheSize);
   }
 
@@ -263,6 +267,11 @@ public void printStatistics() {
     LOG.info("MobFileCache Statistics, access: " + access + ", miss: " + missed + ", hit: "
         + (access - missed) + ", hit rate: "
         + ((access == 0) ? 0 : hitRate) + "%");
+
+    metricsCache.updateCacheAccessedCount(access);
+    metricsCache.updateCacheMissedCount(missed);
+    metricsCache.updateCacheHitRate(hitRate);
+
     lastAccess += access;
     lastMiss += missed;
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
index d5c6df0..cedfecb 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
@@ -46,6 +46,8 @@
 import org.apache.hadoop.hbase.mob.MobUtils;
 import org.apache.hadoop.hbase.util.Bytes;
 
+import com.google.common.collect.ImmutableCollection;
+
 /**
  * The store implementation to save MOBs (medium objects), it extends the HStore.
  * When a descriptor of a column family has the value "is_mob", it means this column family
@@ -68,6 +70,9 @@
   private MobCacheConfig mobCacheConfig;
   private Path homePath;
   private Path mobFamilyPath;
+  protected MetricsMobStoreScanner metricsScanner;
+  protected MetricsMobCompactor metricsCompactor;
+  protected MetricsMobStoreFlusher metricsFlusher;
 
   public HMobStore(final HRegion region, final HColumnDescriptor family,
       final Configuration confParam) throws IOException {
@@ -76,6 +81,15 @@ public HMobStore(final HRegion region, final HColumnDescriptor family,
     this.homePath = MobUtils.getMobHome(conf);
     this.mobFamilyPath = MobUtils.getMobFamilyPath(conf, this.getTableName(),
         family.getNameAsString());
+    MetricsMobStoreFlusherWrapperImpl metricsFlusherWrapper =
+        new MetricsMobStoreFlusherWrapperImpl(this);
+    metricsFlusher = new MetricsMobStoreFlusher(metricsFlusherWrapper);
+    MetricsMobStoreScannerWrapperImpl metricsScannerWrapper =
+        new MetricsMobStoreScannerWrapperImpl(this);
+    metricsScanner = new MetricsMobStoreScanner(metricsScannerWrapper);
+    MetricsMobCompactorWrapperImpl metricsCompactorWrapper =
+        new MetricsMobCompactorWrapperImpl(this);
+    metricsCompactor = new MetricsMobCompactor(metricsCompactorWrapper);
   }
 
   /**
@@ -101,6 +115,29 @@ protected KeyValueScanner createScanner(Scan scan, final NavigableSet<byte[]> ta
   }
 
   /**
+   * Closes the current store, and its flusher and scanner metrics.
+   */
+  @Override
+  public ImmutableCollection<StoreFile> close() throws IOException {
+    ImmutableCollection<StoreFile> result = super.close();
+    this.lock.writeLock().lock();
+    try {
+      if (this.metricsFlusher != null) {
+        this.metricsFlusher.close();
+      }
+      if (this.metricsScanner != null) {
+        this.metricsScanner.close();
+      }
+      if(this.metricsCompactor != null) {
+        this.metricsCompactor.close();
+      }
+    } finally {
+      this.lock.writeLock().unlock();
+    }
+    return result;
+  }
+
+  /**
    * Creates the mob store engine.
    */
   @Override
@@ -265,4 +302,20 @@ public Cell resolve(Cell reference, boolean cacheBlocks) throws IOException {
   public Path getPath() {
     return mobFamilyPath;
   }
+
+  /**
+   * Gets the metrics for mob store flusher.
+   * @return The metrics for mob store flusher.
+   */
+  public MetricsMobStoreFlusher getMetricsFlusher() {
+    return metricsFlusher;
+  }
+
+  /**
+   * Gets the metrics for mob compactor.
+   * @return The metrics for mob compactor.
+   */
+  public MetricsMobCompactor getMetricsCompactor() {
+    return metricsCompactor;
+  }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactor.java
new file mode 100644
index 0000000..811d7e9
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactor.java
@@ -0,0 +1,60 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+
+/**
+ * This is the glue between the DefaultMobCompactor and whatever hadoop shim layer is loaded
+ * (hbase-hadoop1-compat or hbase-hadoop2-compat).
+ */
+@InterfaceAudience.Private
+public class MetricsMobCompactor {
+
+  private final MetricsMobCompactorSource source;
+
+  public MetricsMobCompactor(final MetricsMobCompactorWrapper wrapper) {
+    source = CompatibilitySingletonFactory.getInstance(MetricsMobCompactorSourceFactory.class)
+        .create(wrapper);
+  }
+
+  public void close() {
+    source.close();
+  }
+
+  public void updateCountMoveFromMob(long count) {
+    source.updateCountMoveFromMob(count);
+  }
+
+  public void updateCountMoveToMob(long count) {
+    source.updateCountMoveToMob(count);
+  }
+
+  public void updateSizeMoveFromMob(long size) {
+    source.updateSizeMoveFromMob(size);
+  }
+
+  public void updateSizeMoveToMob(long size) {
+    source.updateSizeMoveToMob(size);
+  }
+
+  public MetricsMobCompactorSource getSource() {
+    return source;
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorWrapperImpl.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorWrapperImpl.java
new file mode 100644
index 0000000..bdc1196
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorWrapperImpl.java
@@ -0,0 +1,54 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+/**
+ * Implements for exposing mob compactor Information through Hadoop's metrics 2 system.
+ */
+@InterfaceAudience.Private
+public class MetricsMobCompactorWrapperImpl implements MetricsMobCompactorWrapper {
+
+  private Store store;
+
+  public MetricsMobCompactorWrapperImpl(Store store) {
+    this.store = store;
+  }
+
+  @Override
+  public String getStoreName() {
+    return store.getColumnFamilyName();
+  }
+
+  @Override
+  public String getTableName() {
+    return store.getTableName().getQualifierAsString();
+  }
+
+  @Override
+  public String getNamespace() {
+    return store.getTableName().getNameAsString();
+  }
+
+  @Override
+  public String getRegionName() {
+    return store.getRegionInfo().getEncodedName();
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCache.java
new file mode 100644
index 0000000..1c9d3d4
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCache.java
@@ -0,0 +1,54 @@
+/**
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+
+@InterfaceAudience.Private
+public class MetricsMobFileCache {
+
+  private final MetricsMobFileCacheSource source;
+
+  public MetricsMobFileCache(final MetricsMobFileCacheWrapper wrapper){
+    source = CompatibilitySingletonFactory.getInstance(MetricsMobFileCacheSourceFactory.class)
+            .create(wrapper);
+  }
+
+  public void close(){
+    source.close();
+  }
+
+  public void updateCacheAccessedCount(long count) {
+    source.updateMobCacheAccess(count);
+  }
+
+  public void updateCacheMissedCount(long count) {
+    source.updateMobCacheMissed(count);
+  }
+
+  public void updateCacheHitRate(long rate){
+    source.updateHitRate(rate);
+  }
+
+  public MetricsMobFileCacheSource getSource() {
+    return source;
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheWrapperImpl.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheWrapperImpl.java
new file mode 100644
index 0000000..0dc2fc1
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheWrapperImpl.java
@@ -0,0 +1,25 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+@InterfaceAudience.Private
+public class MetricsMobFileCacheWrapperImpl implements MetricsMobFileCacheWrapper{
+
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusher.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusher.java
new file mode 100644
index 0000000..6d86ade
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusher.java
@@ -0,0 +1,57 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+
+/**
+ * This is the glue between the DefaultMobStoreFlusher and whatever hadoop shim layer is loaded
+ * (hbase-hadoop1-compat or hbase-hadoop2-compat).
+ */
+@InterfaceAudience.Private
+public class MetricsMobStoreFlusher {
+
+  private final MetricsMobStoreFlusherSource source;
+
+  public MetricsMobStoreFlusher(final MetricsMobStoreFlusherWrapper wrapper) {
+    source = CompatibilitySingletonFactory.getInstance(MetricsMobStoreFlusherSourceFactory.class)
+        .create(wrapper);
+  }
+
+  public void close() {
+    source.close();
+  }
+
+  public void updateFlush() {
+    source.updateFlush();
+  }
+
+  public void updateMobCellCount(long count) {
+    source.updateMobCellCount(count);
+  }
+
+  public void updateMobCellSize(long size) {
+    source.updateMobCellSize(size);
+  }
+
+  public MetricsMobStoreFlusherSource getSource() {
+    return source;
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapperImpl.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapperImpl.java
new file mode 100644
index 0000000..20a1393
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapperImpl.java
@@ -0,0 +1,55 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+/**
+ * Implements for exposing DefaultMobStoreFlusher Information through Hadoop's metrics 2 system.
+ */
+@InterfaceAudience.Private
+public class MetricsMobStoreFlusherWrapperImpl implements MetricsMobStoreFlusherWrapper {
+
+  private Store store;
+
+  public MetricsMobStoreFlusherWrapperImpl(Store store) {
+    this.store = store;
+  }
+
+  @Override
+  public String getStoreName() {
+    return store.getColumnFamilyName();
+  }
+
+  @Override
+  public String getTableName() {
+    return store.getTableName().getQualifierAsString();
+  }
+
+  @Override
+  public String getNamespace() {
+    return store.getTableName().getNameAsString();
+  }
+
+  @Override
+  public String getRegionName() {
+    return store.getRegionInfo().getEncodedName();
+  }
+
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScanner.java
new file mode 100644
index 0000000..ac90c4e
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScanner.java
@@ -0,0 +1,49 @@
+/**
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+
+@InterfaceAudience.Private
+public class MetricsMobStoreScanner {
+
+  private final MetricsMobStoreScannerSource source;
+
+  public MetricsMobStoreScanner(final MetricsMobStoreScannerWrapper wrapper){
+    source = CompatibilitySingletonFactory.getInstance(MetricsMobStoreScannerSourceFactory.class)
+            .create(wrapper);
+  }
+
+  public void close(){
+    source.close();
+  }
+
+  public void updateMobCellCount(long count) {
+    source.updateMobCellCount(count);
+  }
+
+  public void updateMobCellSize(long size) {
+    source.updateMobCellSize(size);
+  }
+
+  public MetricsMobStoreScannerSource getSource() {
+    return source;
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerWrapperImpl.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerWrapperImpl.java
new file mode 100644
index 0000000..f3c4479
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerWrapperImpl.java
@@ -0,0 +1,50 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+@InterfaceAudience.Private
+public class MetricsMobStoreScannerWrapperImpl implements MetricsMobStoreScannerWrapper{
+
+  private Store store;
+
+  public MetricsMobStoreScannerWrapperImpl(Store store) {
+    this.store = store;
+  }
+
+  @Override
+  public String getStoreName() {
+    return store.getColumnFamilyName();
+  }
+
+  @Override
+  public String getTableName() {
+    return store.getTableName().getQualifierAsString();
+  }
+
+  @Override
+  public String getNamespace() {
+    return store.getTableName().getNameAsString();
+  }
+
+  @Override
+  public String getRegionName() {
+    return store.getRegionInfo().getEncodedName();
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java
index b4bcbe7..bf5b7d4 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java
@@ -36,11 +36,13 @@
 public class MobStoreScanner extends StoreScanner {
 
   private boolean cacheMobBlocks = false;
+  protected MetricsMobStoreScanner metricsScanner;
 
   public MobStoreScanner(Store store, ScanInfo scanInfo, Scan scan,
       final NavigableSet<byte[]> columns, long readPt) throws IOException {
     super(store, scanInfo, scan, columns, readPt);
     cacheMobBlocks = MobUtils.isCacheMobBlocks(scan);
+    metricsScanner = ((HMobStore) store).metricsScanner;
   }
 
   /**
@@ -56,13 +58,20 @@ public boolean next(List<Cell> outResult, int limit) throws IOException {
       if (outResult.isEmpty()) {
         return result;
       }
+      long mobKVCount = 0;
+      long mobKVSize = 0;
       HMobStore mobStore = (HMobStore) store;
       for (int i = 0; i < outResult.size(); i++) {
         Cell cell = outResult.get(i);
         if (MobUtils.isMobReferenceCell(cell)) {
-          outResult.set(i, mobStore.resolve(cell, cacheMobBlocks));
+          Cell mobData = mobStore.resolve(cell, cacheMobBlocks);
+          mobKVCount++;
+          mobKVSize += mobData.getValueLength();
+          outResult.set(i, mobData);
         }
       }
+      metricsScanner.updateMobCellCount(mobKVCount);
+      metricsScanner.updateMobCellSize(mobKVSize);
     }
     return result;
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java
index e384390..f08e528 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java
@@ -36,11 +36,13 @@
 public class ReversedMobStoreScanner extends ReversedStoreScanner {
 
   private boolean cacheMobBlocks = false;
+  protected final MetricsMobStoreScanner metricsScanner;
 
   ReversedMobStoreScanner(Store store, ScanInfo scanInfo, Scan scan, NavigableSet<byte[]> columns,
       long readPt) throws IOException {
     super(store, scanInfo, scan, columns, readPt);
     cacheMobBlocks = MobUtils.isCacheMobBlocks(scan);
+    metricsScanner = ((HMobStore) store).metricsScanner;
   }
 
   /**
@@ -56,13 +58,20 @@ public boolean next(List<Cell> outResult, int limit) throws IOException {
       if (outResult.isEmpty()) {
         return result;
       }
+      long mobKVCount = 0;
+      long mobKVSize = 0;
       HMobStore mobStore = (HMobStore) store;
       for (int i = 0; i < outResult.size(); i++) {
         Cell cell = outResult.get(i);
         if (MobUtils.isMobReferenceCell(cell)) {
-          outResult.set(i, mobStore.resolve(cell, cacheMobBlocks));
+          Cell mobData = mobStore.resolve(cell, cacheMobBlocks);
+          mobKVCount++;
+          mobKVSize += mobData.getValueLength();
+          outResult.set(i, mobData);
         }
       }
+      metricsScanner.updateMobCellCount(mobKVCount);
+      metricsScanner.updateMobCellSize(mobKVSize);
     }
     return result;
   }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorWrapperStub.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorWrapperStub.java
new file mode 100644
index 0000000..938cf21
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobCompactorWrapperStub.java
@@ -0,0 +1,41 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+public class MetricsMobCompactorWrapperStub implements MetricsMobCompactorWrapper {
+
+  @Override
+  public String getTableName() {
+    return "mobtable";
+  }
+
+  @Override
+  public String getNamespace() {
+    return "test";
+  }
+
+  @Override
+  public String getRegionName() {
+    return "region#1";
+  }
+
+  @Override
+  public String getStoreName() {
+    return "family#1";
+  }
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapperStub.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapperStub.java
new file mode 100644
index 0000000..2422822
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreFlusherWrapperStub.java
@@ -0,0 +1,44 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.regionserver.MetricsMobStoreFlusherWrapper;
+
+public class MetricsMobStoreFlusherWrapperStub implements MetricsMobStoreFlusherWrapper {
+
+  @Override
+  public String getTableName() {
+    return "mobtable";
+  }
+
+  @Override
+  public String getNamespace() {
+    return "test";
+  }
+
+  @Override
+  public String getRegionName() {
+    return "region#1";
+  }
+
+  @Override
+  public String getStoreName() {
+    return "family#1";
+  }
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerWrapperStub.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerWrapperStub.java
new file mode 100644
index 0000000..8e7d584
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobStoreScannerWrapperStub.java
@@ -0,0 +1,40 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+public class MetricsMobStoreScannerWrapperStub implements MetricsMobStoreScannerWrapper{
+  @Override
+  public String getTableName() {
+    return "mobtable";
+  }
+
+  @Override
+  public String getNamespace() {
+    return "test";
+  }
+
+  @Override
+  public String getRegionName() {
+    return "region#1";
+  }
+
+  @Override
+  public String getStoreName() {
+    return "family#1";
+  }
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobCompactor.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobCompactor.java
new file mode 100644
index 0000000..586aa54
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobCompactor.java
@@ -0,0 +1,60 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.CompatibilityFactory;
+import org.apache.hadoop.hbase.SmallTests;
+import org.apache.hadoop.hbase.test.MetricsAssertHelper;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+@Category(SmallTests.class)
+public class TestMetricsMobCompactor {
+
+  public MetricsAssertHelper HELPER = CompatibilityFactory.getInstance(MetricsAssertHelper.class);
+
+  @Test
+  public void testMobCompactorMetrics() {
+    MetricsMobCompactor mmc = new MetricsMobCompactor(new MetricsMobCompactorWrapperStub());
+    for (int i = 0; i < 10; i++) {
+      mmc.updateCountMoveFromMob(10);
+      mmc.updateCountMoveToMob(5);
+      mmc.updateSizeMoveFromMob(100);
+      mmc.updateSizeMoveToMob(50);
+    }
+    MetricsMobCompactorAggregateSource agg = mmc.getSource().getAggregateSource();
+
+    HELPER.assertCounter(
+        "namespace_test_table_mobtable_region_region#1_store_family#1_metric_countMoveToMobNumOps",
+        10, agg);
+    HELPER
+        .assertCounter(
+            "namespace_test_table_mobtable_region_region#1_store_family#1_metric_"
+            + "countMoveFromMobNumOps",
+            10, agg);
+    HELPER.assertCounter(
+        "namespace_test_table_mobtable_region_region#1_store_family#1_metric_sizeMoveToMobNumOps",
+        10, agg);
+    HELPER
+        .assertCounter(
+            "namespace_test_table_mobtable_region_region#1_store_family#1_metric_"
+            + "sizeMoveFromMobNumOps",
+            10, agg);
+    mmc.close();
+  }
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobFileCache.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobFileCache.java
new file mode 100644
index 0000000..54fbb8b
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobFileCache.java
@@ -0,0 +1,46 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.CompatibilityFactory;
+import org.apache.hadoop.hbase.SmallTests;
+import org.apache.hadoop.hbase.test.MetricsAssertHelper;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+@Category(SmallTests.class)
+public class TestMetricsMobFileCache {
+  public static MetricsAssertHelper HELPER =
+          CompatibilityFactory.getInstance(MetricsAssertHelper.class);
+
+  @Test
+  public void testMobFileCacheMetrics(){
+    MetricsMobFileCache mfc = new MetricsMobFileCache(new MetricsMobFileCacheWrapperImpl());
+    for(int i = 1; i < 16; i++){
+      mfc.updateCacheAccessedCount(10);
+      mfc.updateCacheMissedCount(8);
+      mfc.updateCacheHitRate(20);
+    }
+    MetricsMobFileCacheSource source = mfc.getSource();
+    HELPER.assertCounter("MetricsMobFileCacheSource_mobCacheAccessNumOps", 15, source);
+    HELPER.assertCounter("MetricsMobFileCacheSource_mobCacheMissedNumOps", 15, source);
+    HELPER.assertCounter("MetricsMobFileCacheSource_mobCacheHitRateNumOps", 15, source);
+    mfc.close();
+  }
+
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreFlusher.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreFlusher.java
new file mode 100644
index 0000000..0729a05
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreFlusher.java
@@ -0,0 +1,50 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.CompatibilityFactory;
+import org.apache.hadoop.hbase.SmallTests;
+import org.apache.hadoop.hbase.test.MetricsAssertHelper;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+@Category(SmallTests.class)
+public class TestMetricsMobStoreFlusher {
+
+  public MetricsAssertHelper HELPER = CompatibilityFactory.getInstance(MetricsAssertHelper.class);
+
+  @Test
+  public void testMobStoreFlusherMetrics() {
+    MetricsMobStoreFlusher mmf =
+        new MetricsMobStoreFlusher(new MetricsMobStoreFlusherWrapperStub());
+    mmf.updateFlush();
+    mmf.updateMobCellCount(2);
+    mmf.updateMobCellSize(5);
+    MetricsMobStoreFlusherAggregateSource agg = mmf.getSource().getAggregateSource();
+
+    HELPER.assertCounter(
+        "namespace_test_table_mobtable_region_region#1_store_family#1_metric_flushCount", 1, agg);
+    HELPER.assertCounter(
+        "namespace_test_table_mobtable_region_region#1_store_family#1"
+        + "_metric_mobCellCount", 2, agg);
+    HELPER.assertCounter(
+        "namespace_test_table_mobtable_region_region#1_store_family#1_metric_mobCellSize", 5, agg);
+    mmf.close();
+  }
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreScanner.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreScanner.java
new file mode 100644
index 0000000..84585f8
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobStoreScanner.java
@@ -0,0 +1,52 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.CompatibilityFactory;
+import org.apache.hadoop.hbase.SmallTests;
+import org.apache.hadoop.hbase.test.MetricsAssertHelper;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+@Category(SmallTests.class)
+public class TestMetricsMobStoreScanner {
+
+  public MetricsAssertHelper HELPER = CompatibilityFactory.getInstance(MetricsAssertHelper.class);
+
+  @Test
+  public void testMobStoreScannerMetrics(){
+    MetricsMobStoreScanner scanner = new MetricsMobStoreScanner(
+            new MetricsMobStoreScannerWrapperStub());
+    scanner.updateMobCellCount(5);
+    scanner.updateMobCellCount(5);
+    scanner.updateMobCellSize(1024);
+    scanner.updateMobCellSize(1023);
+    MetricsMobStoreScannerAggregateSource agg = scanner.getSource().getAggregateSource();
+    HELPER
+        .assertCounter(
+            "Namespace_test_table_mobtable_region_region#1_store_family#1"
+            + "_mob_scanner_metric_mobCellCount",
+            10, agg);
+    HELPER
+        .assertCounter(
+            "Namespace_test_table_mobtable_region_region#1_store_family#1"
+            + "_mob_scanner_metric_mobCellSize",
+            2047, agg);
+    scanner.close();
+  }
+}
