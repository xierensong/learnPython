diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobAggregateSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobAggregateSource.java
new file mode 100644
index 0000000..7bdf976
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobAggregateSource.java
@@ -0,0 +1,62 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.metrics.BaseSource;
+
+/**
+ * This interface will be implemented by a MetricsSource that will export metrics from multiple mob
+ * store into the hadoop metrics system.
+ */
+public interface MetricsMobAggregateSource extends BaseSource {
+
+  /**
+   * The name of the metrics
+   */
+  String METRICS_NAME = "Mob";
+
+  /**
+   * The context metrics will be under.
+   */
+  String METRICS_CONTEXT = "regionserver";
+
+  /**
+   * The name of the metrics context that metrics will be under in jmx
+   */
+  String METRICS_JMX_CONTEXT = "RegionServer,sub=" + METRICS_NAME;
+
+  /**
+   * Description
+   */
+  String METRICS_DESCRIPTION = "Metrics about Mob";
+
+  /**
+   * Register a MetricsMobSource as being open.
+   * @param source
+   *          the source for the mob.
+   */
+  void register(MetricsMobSource source);
+
+  /**
+   * Remove a mob source. This is called when a store is closed.
+   * @param source
+   *          The region to remove.
+   */
+  void deregister(MetricsMobSource source);
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSource.java
new file mode 100644
index 0000000..faade43
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSource.java
@@ -0,0 +1,81 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.metrics.BaseSource;
+
+/**
+ * Interface that classes that expose metrics about the mob file cache will implement.
+ */
+public interface MetricsMobFileCacheSource extends BaseSource {
+
+  /**
+   * The name of the metrics
+   */
+  String METRICS_NAME = "MobFileCache";
+
+  /**
+   * The context metrics will be under.
+   */
+  String METRICS_CONTEXT = "regionserver";
+
+  /**
+   * The name of the metrics context that metrics will be under in jmx
+   */
+  String METRICS_JMX_CONTEXT = "RegionServer,sub=" + METRICS_NAME;
+
+  /**
+   * Description
+   */
+  String METRICS_DESCRIPTION = "Metrics about MobFileCache";
+
+
+  String MOB_CACHE_ACCESS = "MetricsMobFileCacheSource_mobCacheAccess";
+  String MOB_CACHE_MISSED = "MetricsMobFileCacheSource_mobCacheMissed";
+  String MOB_CACHE_HIT_RATE = "MetricsMobFileCacheSource_mobCacheHitRate";
+
+  /**
+   * Close the mob file cache's metrics.
+   */
+  void close();
+
+  /**
+   * Update related time of mob cache access.
+   *
+   * @param count
+   *          the access count
+   */
+  void updateMobCacheAccess(long count);
+
+  /**
+   * Update related time of mob cache missed.
+   *
+   * @param size
+   *          the missed count
+   */
+  void updateMobCacheMissed(long size);
+
+  /**
+   * Set mob file cache hit rate.
+   *
+   * @param rate
+   *            mob file cache hit rate.
+   */
+  void updateHitRate(long rate);
+
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceFactory.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceFactory.java
new file mode 100644
index 0000000..8a4df85
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceFactory.java
@@ -0,0 +1,31 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * Interface of a factory to create MobFileCacheSource when given a MobFileCacheWrapper
+ */
+public interface MetricsMobFileCacheSourceFactory {
+  /**
+   * Creates a MetricsMobFileCacheSource from a MetricsMobFileCacheWrapper.
+   *
+   * @param cacheWrapper
+   * @return A metrics file cache source
+   */
+  MetricsMobFileCacheSource create(MetricsMobFileCacheWrapper cacheWrapper);
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheWrapper.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheWrapper.java
new file mode 100644
index 0000000..bc0afb0
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheWrapper.java
@@ -0,0 +1,26 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * This is the interface that will expose information to hadoop1/hadoop2 implementations of the
+ * MetricsMobFileCacheSource.
+ */
+public interface MetricsMobFileCacheWrapper {
+
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobSource.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobSource.java
new file mode 100644
index 0000000..d832251
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobSource.java
@@ -0,0 +1,104 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * Interface that classes that expose metrics about the mob will implement.
+ */
+public interface MetricsMobSource extends Comparable<MetricsMobSource> {
+
+  String COUNT_MOVE_TO_MOB = "countMoveToMob";
+  String COUNT_MOVE_FROM_MOB = "countMoveFromMob";
+  String SIZE_MOVE_TO_MOB = "sizeMoveToMob";
+  String SIZE_MOVE_FROM_MOB = "sizeMoveFromMob";
+
+  String FLUSH_COUNT_KEY = "flushCount";
+  String FLUSHED_MOB_CELL_COUNT_KEY = "flushedMobCellCount";
+  String FLUSHED_MOB_CELL_SIZE_KEY = "flushedMobCellSize";
+
+  String SCAN_MOB_CELL_COUNT_KEY = "scanMobCellCount";
+  String SCAN_MOB_CELL_SIZE_KEY = "scanMobCellSize";
+
+  /**
+   * Closes the region's metrics as this region is closing.
+   */
+  void close();
+
+  /**
+   * Updates related counts of cells move to mob files.
+   */
+  void updateCountMoveToMob(long count);
+
+  /**
+   * Updates related counts of cells move from mob files.
+   */
+  void updateCountMoveFromMob(long count);
+
+  /**
+   * Updates related value size of cells move to mob files.
+   */
+  void updateSizeMoveToMob(long size);
+
+  /**
+   * Updates related value size of cells move from mob files.
+   */
+  void updateSizeMoveFromMob(long size);
+
+  /**
+   * Update related counts of mob cell.
+   *
+   * @param count
+   *          the cell count
+   */
+  void updateScanMobCellCount(long count);
+
+  /**
+   * Update related size of mob cell.
+   *
+   * @param size
+   *          the size of flushed mob cells
+   */
+  void updateScanMobCellSize(long size);
+
+  /**
+   * Update related counts of flushing.
+   */
+  void updateFlush();
+
+  /**
+   * Updates related counts of mob cell.
+   *
+   * @param count
+   *          the cell count
+   */
+  void updateFlushedMobCellCount(long count);
+
+  /**
+   * Updates related size of mob cell.
+   *
+   * @param size
+   *          the size of flushed mob cells
+   */
+  void updateFlushedMobCellSize(long size);
+
+  /**
+   * Gets the aggregate source to which this reports.
+   */
+  MetricsMobAggregateSource getAggregateSource();
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobSourceFactory.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobSourceFactory.java
new file mode 100644
index 0000000..540495b
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobSourceFactory.java
@@ -0,0 +1,32 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * Interface of a factory to create MetricsMobSource when given a
+ * MetricsMobWrapper
+ */
+public interface MetricsMobSourceFactory {
+
+  /**
+   * Creates a MetricsMobSource from a MetricsMobWrapper.
+   * @param wrapper It provides the mob information.
+   * @return A metrics mob source
+   */
+  MetricsMobSource create(MetricsMobWrapper wrapper);
+}
diff --git a/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobWrapper.java b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobWrapper.java
new file mode 100644
index 0000000..9d68b87
--- /dev/null
+++ b/hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobWrapper.java
@@ -0,0 +1,50 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+/**
+ * This is the interface that will expose information to hadoop1/hadoop2 implementations of the
+ * MetricsMobSource.
+ */
+public interface MetricsMobWrapper {
+
+  /**
+   * Gets the name of the table the region belongs to.
+   * @return The string version of the table name.
+   */
+  String getTableName();
+
+  /**
+   * Gets the name of the namespace this table is in.
+   * @return String version of the namespace.  Can't be empty.
+   */
+  String getNamespace();
+
+  /**
+   * Gets the name of the region.
+   * @return The encoded name of the region.
+   */
+  String getRegionName();
+
+  /**
+   * Gets the store name.
+   * @return A a store name.
+   */
+  String getStoreName();
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobAggregateSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobAggregateSourceImpl.java
new file mode 100644
index 0000000..6cba566
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobAggregateSourceImpl.java
@@ -0,0 +1,58 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import java.util.TreeSet;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.metrics.BaseSourceImpl;
+import org.apache.hadoop.metrics2.MetricsCollector;
+import org.apache.hadoop.metrics2.MetricsRecordBuilder;
+
+@InterfaceAudience.Private
+public class MetricsMobAggregateSourceImpl extends BaseSourceImpl implements
+    MetricsMobAggregateSource {
+
+  private final TreeSet<MetricsMobSourceImpl> sources =
+      new TreeSet<MetricsMobSourceImpl>();
+
+  public MetricsMobAggregateSourceImpl() {
+    this(METRICS_NAME, METRICS_DESCRIPTION, METRICS_CONTEXT, METRICS_JMX_CONTEXT);
+  }
+
+  public MetricsMobAggregateSourceImpl(String metricsName, String metricsDescription,
+      String metricsContext, String metricsJmxContext) {
+    super(metricsName, metricsDescription, metricsContext, metricsJmxContext);
+  }
+
+  @Override
+  public synchronized void register(MetricsMobSource source) {
+    sources.add((MetricsMobSourceImpl) source);
+  }
+
+  @Override
+  public synchronized void deregister(MetricsMobSource source) {
+    sources.remove(source);
+  }
+
+  @Override
+  public void getMetrics(MetricsCollector collector, boolean all) {
+    MetricsRecordBuilder mrb = collector.addRecord(metricsName).setContext(metricsContext);
+    metricsRegistry.snapshot(mrb, all);
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceFactoryImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceFactoryImpl.java
new file mode 100644
index 0000000..55af123
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceFactoryImpl.java
@@ -0,0 +1,40 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+/**
+ * Factory to create MetricsMobFileCacheSource when given a MetricsMobFileCacheWrapper
+ *
+ */
+@InterfaceAudience.Private
+public class MetricsMobFileCacheSourceFactoryImpl implements MetricsMobFileCacheSourceFactory{
+  public static enum FactoryStorage {
+    INSTANCE;
+    private MetricsMobFileCacheSource source;
+  }
+
+  @Override
+  public MetricsMobFileCacheSource create(MetricsMobFileCacheWrapper cacheWrapper) {
+    if (FactoryStorage.INSTANCE.source == null) {
+      FactoryStorage.INSTANCE.source = new MetricsMobFileCacheSourceImpl(cacheWrapper);
+    }
+    return FactoryStorage.INSTANCE.source;
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceImpl.java
new file mode 100644
index 0000000..032a391
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheSourceImpl.java
@@ -0,0 +1,85 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.metrics.BaseSourceImpl;
+import org.apache.hadoop.metrics2.impl.JmxCacheBuster;
+import org.apache.hadoop.metrics2.lib.MutableHistogram;
+
+/**
+ * Hadoop2 implementation of MetricsMobFileCacheSource.
+ *
+ * Implements BaseSource through BaseSourceImpl, following the pattern
+ */
+@InterfaceAudience.Private
+public class MetricsMobFileCacheSourceImpl extends BaseSourceImpl
+        implements MetricsMobFileCacheSource{
+
+  private MutableHistogram cacheAccessed;
+  private MutableHistogram cacheMissed;
+  private MutableHistogram hitRate;
+
+  public MetricsMobFileCacheSourceImpl(MetricsMobFileCacheWrapper wrapper){
+    this(METRICS_NAME,
+            METRICS_DESCRIPTION,
+            METRICS_CONTEXT,
+            METRICS_JMX_CONTEXT,
+            wrapper);
+  }
+
+  public MetricsMobFileCacheSourceImpl(String metricsName,
+                                 String metricsDescription,
+                                 String metricsContext,
+                                 String metricsJmxContext,
+                                 MetricsMobFileCacheWrapper wrapper) {
+    super(metricsName, metricsDescription, metricsContext, metricsJmxContext);
+  }
+
+  public void init(){
+    super.init();
+    cacheAccessed = metricsRegistry.newHistogram(MOB_CACHE_ACCESS);
+    cacheMissed = metricsRegistry.newHistogram(MOB_CACHE_MISSED);
+    hitRate = metricsRegistry.newHistogram(MOB_CACHE_HIT_RATE);
+  }
+
+  @Override
+  public void close() {
+    metricsRegistry.removeMetric(MOB_CACHE_ACCESS);
+    metricsRegistry.removeMetric(MOB_CACHE_MISSED);
+    metricsRegistry.removeMetric(MOB_CACHE_HIT_RATE);
+
+    JmxCacheBuster.clearJmxCache();
+  }
+
+  @Override
+  public void updateMobCacheAccess(long count) {
+    cacheAccessed.add(count);
+  }
+
+  @Override
+  public void updateMobCacheMissed(long count) {
+    cacheMissed.add(count);
+  }
+
+  @Override
+  public void updateHitRate(long rate) {
+    hitRate.add(rate);
+  }
+
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobSourceFactoryImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobSourceFactoryImpl.java
new file mode 100644
index 0000000..c5a9ccd
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobSourceFactoryImpl.java
@@ -0,0 +1,49 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+
+/**
+ * Factory to create MetricsMobSource when given a MetricsMobWrapper
+ */
+@InterfaceAudience.Private
+public class MetricsMobSourceFactoryImpl implements MetricsMobSourceFactory {
+
+  public static enum FactoryStorage {
+    INSTANCE;
+    private Object aggLock = new Object();
+    private MetricsMobAggregateSourceImpl aggImpl;
+  }
+
+  private synchronized MetricsMobAggregateSourceImpl getAggregate() {
+    synchronized (FactoryStorage.INSTANCE.aggLock) {
+      if (FactoryStorage.INSTANCE.aggImpl == null) {
+        FactoryStorage.INSTANCE.aggImpl = new MetricsMobAggregateSourceImpl();
+      }
+      return FactoryStorage.INSTANCE.aggImpl;
+    }
+  }
+
+  @Override
+  public MetricsMobSource create(MetricsMobWrapper wrapper) {
+    return new MetricsMobSourceImpl(wrapper, getAggregate());
+  }
+
+}
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobSourceImpl.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobSourceImpl.java
new file mode 100644
index 0000000..5e8b819
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobSourceImpl.java
@@ -0,0 +1,182 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.metrics2.impl.JmxCacheBuster;
+import org.apache.hadoop.metrics2.lib.DynamicMetricsRegistry;
+import org.apache.hadoop.metrics2.lib.MutableCounterLong;
+
+/**
+ * Hadoop2 implementation of MetricsMobSource.
+ *
+ * Implements BaseSource through BaseSourceImpl, following the pattern
+ */
+@InterfaceAudience.Private
+public class MetricsMobSourceImpl implements MetricsMobSource {
+
+  private String countMoveToMobKey;
+  private String countMoveFromMobKey;
+  private String sizeMoveToMobKey;
+  private String sizeMoveFromMobKey;
+  private String flushCountKey;
+  private String flushedMobCellCountKey;
+  private String flushedMobCellSizeKey;
+  private String scanMobCellCountKey;
+  private String scanMobCellSizeKey;
+
+  private MutableCounterLong countMoveToMob;
+  private MutableCounterLong countMoveFromMob;
+  private MutableCounterLong sizeMoveToMob;
+  private MutableCounterLong sizeMoveFromMob;
+  private MutableCounterLong flushCount;
+  private MutableCounterLong flushedMobCellCount;
+  private MutableCounterLong flushedMobCellSize;
+  private MutableCounterLong scanMobCellCount;
+  private MutableCounterLong scanMobCellSize;
+
+  private MetricsMobAggregateSourceImpl agg;
+  private DynamicMetricsRegistry registry;
+  private static final Log LOG = LogFactory.getLog(MetricsMobSourceImpl.class);
+  public String prefix;
+
+  public MetricsMobSourceImpl(MetricsMobWrapper wrapper,
+      MetricsMobAggregateSourceImpl aggregate) {
+    prefix = "Namespace_" + wrapper.getNamespace() + "_table_"
+        + wrapper.getTableName() + "_region_" + wrapper.getRegionName() + "_store_"
+        + wrapper.getStoreName() + "_metric_";
+    agg = aggregate;
+    agg.register(this);
+    LOG.debug("Creating new MetricsMobSourceImpl for store " + prefix);
+    registry = agg.getMetricsRegistry();
+    countMoveToMobKey = prefix + MetricsMobSource.COUNT_MOVE_TO_MOB;
+    countMoveToMob = registry.getLongCounter(countMoveToMobKey, 0l);
+    countMoveFromMobKey = prefix + MetricsMobSource.COUNT_MOVE_FROM_MOB;
+    countMoveFromMob = registry.getLongCounter(countMoveFromMobKey, 0l);
+    sizeMoveToMobKey = prefix + MetricsMobSource.SIZE_MOVE_TO_MOB;
+    sizeMoveToMob = registry.getLongCounter(sizeMoveToMobKey, 0l);
+    sizeMoveFromMobKey = prefix + MetricsMobSource.SIZE_MOVE_FROM_MOB;
+    sizeMoveFromMob = registry.getLongCounter(sizeMoveFromMobKey, 0l);
+
+    flushCountKey = prefix + MetricsMobSource.FLUSH_COUNT_KEY;
+    flushCount = registry.getLongCounter(flushCountKey, 0l);
+    flushedMobCellCountKey = prefix + MetricsMobSource.FLUSHED_MOB_CELL_COUNT_KEY;
+    flushedMobCellCount = registry.getLongCounter(flushedMobCellCountKey, 0l);
+    flushedMobCellSizeKey = prefix + MetricsMobSource.FLUSHED_MOB_CELL_SIZE_KEY;
+    flushedMobCellSize = registry.getLongCounter(flushedMobCellSizeKey, 0l);
+
+    scanMobCellCountKey = prefix + MetricsMobSource.SCAN_MOB_CELL_COUNT_KEY;
+    scanMobCellCount = registry.getLongCounter(scanMobCellCountKey, 0l);
+    scanMobCellSizeKey = prefix + MetricsMobSource.SCAN_MOB_CELL_SIZE_KEY;
+    scanMobCellSize = registry.getLongCounter(scanMobCellSizeKey, 0l);
+  }
+
+  @Override
+  public void close() {
+    agg.deregister(this);
+
+    LOG.trace("Removing mob Metrics: " + prefix);
+    registry.removeMetric(countMoveToMobKey);
+    registry.removeMetric(countMoveFromMobKey);
+    registry.removeMetric(sizeMoveToMobKey);
+    registry.removeMetric(sizeMoveFromMobKey);
+
+    registry.removeMetric(flushCountKey);
+    registry.removeMetric(flushedMobCellCountKey);
+    registry.removeMetric(flushedMobCellSizeKey);
+
+    registry.removeMetric(scanMobCellCountKey);
+    registry.removeMetric(scanMobCellSizeKey);
+    JmxCacheBuster.clearJmxCache();
+  }
+
+  @Override
+  public void updateCountMoveToMob(long count) {
+    countMoveToMob.incr(count);
+  }
+
+  @Override
+  public void updateCountMoveFromMob(long count) {
+    countMoveFromMob.incr(count);
+  }
+
+  @Override
+  public void updateSizeMoveToMob(long size) {
+    sizeMoveToMob.incr(size);
+  }
+
+  @Override
+  public void updateSizeMoveFromMob(long size) {
+    sizeMoveFromMob.incr(size);
+  }
+
+  @Override
+  public void updateFlush() {
+    flushCount.incr();
+  }
+
+  @Override
+  public void updateFlushedMobCellCount(long count) {
+    flushedMobCellCount.incr(count);
+  }
+
+  @Override
+  public void updateFlushedMobCellSize(long size) {
+    flushedMobCellSize.incr(size);
+  }
+
+  @Override
+  public void updateScanMobCellCount(long count) {
+    scanMobCellCount.incr(count);
+  }
+
+  @Override
+  public void updateScanMobCellSize(long size) {
+    scanMobCellSize.incr(size);
+  }
+
+  @Override
+  public MetricsMobAggregateSource getAggregateSource() {
+    return agg;
+  }
+
+  @Override
+  public int compareTo(MetricsMobSource source) {
+    if (!(source instanceof MetricsMobSource))
+      return -1;
+
+    MetricsMobSourceImpl impl = (MetricsMobSourceImpl) source;
+    return this.prefix.compareTo(impl.prefix);
+  }
+
+  @Override
+  public int hashCode() {
+    return this.prefix.hashCode();
+  }
+
+  @Override
+  public boolean equals(Object obj) {
+    if (obj == this)
+      return true;
+    if (!(obj instanceof MetricsMobSource))
+      return false;
+    return compareTo((MetricsMobSource) obj) == 0;
+  }
+}
diff --git a/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobFileCacheSourceFactory b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobFileCacheSourceFactory
new file mode 100644
index 0000000..0551e16
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobFileCacheSourceFactory
@@ -0,0 +1 @@
+org.apache.hadoop.hbase.regionserver.MetricsMobFileCacheSourceFactoryImpl
\ No newline at end of file
diff --git a/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobSourceFactory b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobSourceFactory
new file mode 100644
index 0000000..2da3861
--- /dev/null
+++ b/hbase-hadoop2-compat/src/main/resources/META-INF/services/org.apache.hadoop.hbase.regionserver.MetricsMobSourceFactory
@@ -0,0 +1 @@
+org.apache.hadoop.hbase.regionserver.MetricsMobSourceFactoryImpl
\ No newline at end of file
diff --git a/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobFileCacheSourceImpl.java b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobFileCacheSourceImpl.java
new file mode 100644
index 0000000..fd473e9
--- /dev/null
+++ b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobFileCacheSourceImpl.java
@@ -0,0 +1,48 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+import org.junit.Test;
+
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * Test for MetricsMobFileCacheSourceImpl
+ */
+public class TestMetricsMobFileCacheSourceImpl {
+
+  @Test
+  public void testGetInstance() throws Exception {
+    MetricsMobFileCacheSourceFactory metricsMobFileCacheSourceFactory =
+            CompatibilitySingletonFactory.getInstance(MetricsMobFileCacheSourceFactory.class);
+    MetricsMobFileCacheSource cacheSource =
+            metricsMobFileCacheSourceFactory.create(null);
+    assertTrue(cacheSource instanceof MetricsMobFileCacheSourceImpl);
+    assertSame(metricsMobFileCacheSourceFactory,
+            CompatibilitySingletonFactory.getInstance(MetricsMobFileCacheSourceFactory.class));
+  }
+
+  @Test(expected = RuntimeException.class)
+  public void testNoGetMobFileCacheMetricsSourceImpl() throws Exception {
+    // This should throw an exception because MetricsMobFileCacheSourceImpl should only
+    // be created by a factory.
+    CompatibilitySingletonFactory.getInstance(MetricsMobFileCacheSourceImpl.class);
+  }
+}
diff --git a/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobSourceImpl.java b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobSourceImpl.java
new file mode 100644
index 0000000..6a3fb74
--- /dev/null
+++ b/hbase-hadoop2-compat/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobSourceImpl.java
@@ -0,0 +1,64 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+import org.junit.Test;
+
+/**
+ * Test for MetricsMobSourceImpl
+ */
+public class TestMetricsMobSourceImpl {
+
+  @Test
+  public void testGetInstance() throws Exception {
+    MetricsMobSourceFactory metricsMobSourceFactory = CompatibilitySingletonFactory
+        .getInstance(MetricsMobSourceFactory.class);
+    MetricsMobSource source = metricsMobSourceFactory
+        .create(new MetricsMobWrapperStub());
+    assertTrue(source instanceof MetricsMobSourceImpl);
+    assertSame(metricsMobSourceFactory,
+        CompatibilitySingletonFactory.getInstance(MetricsMobSourceFactory.class));
+  }
+
+  static class MetricsMobWrapperStub implements MetricsMobWrapper {
+
+    @Override
+    public String getTableName() {
+      return "mobtable";
+    }
+
+    @Override
+    public String getNamespace() {
+      return "test";
+    }
+
+    @Override
+    public String getRegionName() {
+      return "region#1";
+    }
+
+    @Override
+    public String getStoreName() {
+      return "family#1";
+    }
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java
index cf70bd3..3e977c1 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java
@@ -35,6 +35,7 @@
 import org.apache.hadoop.hbase.regionserver.HMobStore;
 import org.apache.hadoop.hbase.regionserver.HStore;
 import org.apache.hadoop.hbase.regionserver.InternalScanner;
+import org.apache.hadoop.hbase.regionserver.MetricsMob;
 import org.apache.hadoop.hbase.regionserver.Store;
 import org.apache.hadoop.hbase.regionserver.StoreFile;
 import org.apache.hadoop.hbase.regionserver.StoreFile.Writer;
@@ -115,6 +116,7 @@ protected Writer createTmpWriter(FileDetails fd, long smallestReadPoint) throws
   @Override
   protected boolean performCompaction(FileDetails fd, InternalScanner scanner, CellSink writer,
       long smallestReadPoint, boolean cleanSeqId, boolean major) throws IOException {
+    MetricsMob metrics = mobStore.getMetricsMob();
     int bytesWritten = 0;
     // Since scanner.next() can return 'false' but still be delivering data,
     // we have to use a do/while loop.
@@ -128,6 +130,10 @@ protected boolean performCompaction(FileDetails fd, InternalScanner scanner, Cel
     long mobCells = 0;
     Tag tableNameTag = new Tag(TagType.MOB_TABLE_NAME_TAG_TYPE, store.getTableName()
             .getName());
+    long countMoveToMob = 0;
+    long countMoveFromMob = 0;
+    long sizeMoveToMob = 0;
+    long sizeMoveFromMob = 0;
     try {
       try {
         // If the mob file writer could not be created, directly write the cell to the store file.
@@ -173,6 +179,8 @@ protected boolean performCompaction(FileDetails fd, InternalScanner scanner, Cel
                   // next compaction.
                   writer.append(kv);
                 }
+                countMoveFromMob++;
+                sizeMoveFromMob += cell.getValueLength();
               }
             } else {
               LOG.warn("The value format of the KeyValue " + kv
@@ -192,6 +200,8 @@ protected boolean performCompaction(FileDetails fd, InternalScanner scanner, Cel
             KeyValue reference = MobUtils.createMobRefKeyValue(kv, fileName, tableNameTag);
             // write the cell whose value is the path of a mob file to the store file.
             writer.append(reference);
+            countMoveToMob++;
+            sizeMoveToMob += kv.getValueLength();
           }
           ++progress.currentCompactedKVs;
 
@@ -227,6 +237,10 @@ protected boolean performCompaction(FileDetails fd, InternalScanner scanner, Cel
         }
       }
     }
+    metrics.updateCountMoveFromMob(countMoveFromMob);
+    metrics.updateCountMoveToMob(countMoveToMob);
+    metrics.updateSizeMoveFromMob(sizeMoveFromMob);
+    metrics.updateSizeMoveToMob(sizeMoveToMob);
     progress.complete();
     return true;
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java
index aba81ff..13767d8 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java
@@ -39,6 +39,7 @@
 import org.apache.hadoop.hbase.regionserver.HMobStore;
 import org.apache.hadoop.hbase.regionserver.InternalScanner;
 import org.apache.hadoop.hbase.regionserver.MemStoreSnapshot;
+import org.apache.hadoop.hbase.regionserver.MetricsMob;
 import org.apache.hadoop.hbase.regionserver.Store;
 import org.apache.hadoop.hbase.regionserver.StoreFile;
 import org.apache.hadoop.hbase.util.Bytes;
@@ -152,10 +153,12 @@ public DefaultMobStoreFlusher(Configuration conf, Store store) throws IOExceptio
    */
   protected void performMobFlush(MemStoreSnapshot snapshot, long cacheFlushId,
       InternalScanner scanner, StoreFile.Writer writer, MonitoredTask status) throws IOException {
+    MetricsMob metrics = this.mobStore.getMetricsMob();
     StoreFile.Writer mobFileWriter = null;
     int compactionKVMax = conf.getInt(HConstants.COMPACTION_KV_MAX,
         HConstants.COMPACTION_KV_MAX_DEFAULT);
-    long mobKVCount = 0;
+    long mobCount = 0;
+    long mobSize = 0;
     long time = snapshot.getTimeRangeTracker().getMaximumTimestamp();
     mobFileWriter = mobStore.createWriterInTmp(new Date(time), snapshot.getCellsCount(),
         store.getFamily().getCompression(), store.getRegionInfo().getStartKey());
@@ -181,7 +184,8 @@ protected void performMobFlush(MemStoreSnapshot snapshot, long cacheFlushId,
             } else {
               // append the original keyValue in the mob file.
               mobFileWriter.append(kv);
-              mobKVCount++;
+              mobSize += kv.getValueLength();
+              mobCount++;
 
               // append the tags to the KeyValue.
               // The key is same, the value is the filename of the mob file
@@ -199,12 +203,15 @@ protected void performMobFlush(MemStoreSnapshot snapshot, long cacheFlushId,
       mobFileWriter.close();
     }
 
-    if (mobKVCount > 0) {
+    if (mobCount > 0) {
       // commit the mob file from temp folder to target folder.
       // If the mob file is committed successfully but the store file is not,
       // the committed mob file will be handled by the sweep tool as an unused
       // file.
       mobStore.commitFile(mobFileWriter.getPath(), targetPath);
+      metrics.updateFlush();
+      metrics.updateFlushedMobCellCount(mobCount);
+      metrics.updateFlushedMobCellSize(mobSize);
     } else {
       try {
         // If the mob file is empty, delete it instead of committing.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java
index 97530b1..f1acfd5 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java
@@ -36,6 +36,8 @@
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
+import org.apache.hadoop.hbase.regionserver.MetricsMobFileCache;
+import org.apache.hadoop.hbase.regionserver.MetricsMobFileCacheWrapperImpl;
 import org.apache.hadoop.hbase.util.IdLock;
 
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
@@ -78,6 +80,7 @@ public void run() {
   private long lastAccess;
   private final AtomicLong miss;
   private long lastMiss;
+  private final MetricsMobFileCache metricsCache;
 
   // a lock to sync the evict to guarantee the eviction occurs in sequence.
   // the method evictFile is not sync by this lock, the ConcurrentHashMap does the sync there.
@@ -120,6 +123,7 @@ public MobFileCache(Configuration conf) {
       this.scheduleThreadPool.scheduleAtFixedRate(new EvictionThread(this), period, period,
           TimeUnit.SECONDS);
     }
+    metricsCache = new MetricsMobFileCache(new MetricsMobFileCacheWrapperImpl());
     LOG.info("MobFileCache is initialized, and the cache size is " + mobFileMaxCacheSize);
   }
 
@@ -263,6 +267,11 @@ public void printStatistics() {
     LOG.info("MobFileCache Statistics, access: " + access + ", miss: " + missed + ", hit: "
         + (access - missed) + ", hit rate: "
         + ((access == 0) ? 0 : hitRate) + "%");
+
+    metricsCache.updateCacheAccessedCount(access);
+    metricsCache.updateCacheMissedCount(missed);
+    metricsCache.updateCacheHitRate(hitRate);
+
     lastAccess += access;
     lastMiss += missed;
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
index ce9b81c..68d4a93 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
@@ -56,6 +56,8 @@
 import org.apache.hadoop.hbase.util.HFileArchiveUtil;
 import org.apache.zookeeper.KeeperException;
 
+import com.google.common.collect.ImmutableCollection;
+
 /**
  * The store implementation to save MOBs (medium objects), it extends the HStore.
  * When a descriptor of a column family has the value "IS_MOB", it means this column family
@@ -78,6 +80,7 @@
   private MobCacheConfig mobCacheConfig;
   private Path homePath;
   private Path mobFamilyPath;
+  protected MetricsMob metrics;
   private List<Path> mobDirLocations;
 
   public HMobStore(final HRegion region, final HColumnDescriptor family,
@@ -87,6 +90,9 @@ public HMobStore(final HRegion region, final HColumnDescriptor family,
     this.homePath = MobUtils.getMobHome(conf);
     this.mobFamilyPath = MobUtils.getMobFamilyPath(conf, this.getTableName(),
         family.getNameAsString());
+    MetricsMobWrapperImpl metricsWrapper =
+        new MetricsMobWrapperImpl(this);
+    metrics = new MetricsMob(metricsWrapper);
     mobDirLocations = new ArrayList<Path>();
     mobDirLocations.add(mobFamilyPath);
     TableName tn = region.getTableDesc().getTableName();
@@ -133,6 +139,23 @@ protected KeyValueScanner createScanner(Scan scan, final NavigableSet<byte[]> ta
   }
 
   /**
+   * Closes the current store, and its flusher and scanner metrics.
+   */
+  @Override
+  public ImmutableCollection<StoreFile> close() throws IOException {
+    ImmutableCollection<StoreFile> result = super.close();
+    this.lock.writeLock().lock();
+    try {
+      if(this.metrics != null) {
+        this.metrics.close();
+      }
+    } finally {
+      this.lock.writeLock().unlock();
+    }
+    return result;
+  }
+
+  /**
    * Creates the mob store engine.
    */
   @Override
@@ -270,6 +293,14 @@ public Cell resolve(Cell reference, boolean cacheBlocks) throws IOException {
   }
 
   /**
+   * Gets the metrics for mob.
+   * @return The metrics for mob.
+   */
+  public MetricsMob getMetricsMob() {
+    return metrics;
+  }
+
+  /**
    * Reads the cell from a mob file.
    * The mob file might be located in different directories.
    * 1. The working directory.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMob.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMob.java
new file mode 100644
index 0000000..8b79918
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMob.java
@@ -0,0 +1,80 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+
+/**
+ * This is the glue between the HMobStore and whatever hadoop shim layer is loaded
+ * (hbase-hadoop1-compat or hbase-hadoop2-compat).
+ */
+@InterfaceAudience.Private
+public class MetricsMob {
+
+  private final MetricsMobSource source;
+
+  public MetricsMob(final MetricsMobWrapper wrapper) {
+    source = CompatibilitySingletonFactory.getInstance(MetricsMobSourceFactory.class)
+        .create(wrapper);
+  }
+
+  public void close() {
+    source.close();
+  }
+
+  public void updateCountMoveFromMob(long count) {
+    source.updateCountMoveFromMob(count);
+  }
+
+  public void updateCountMoveToMob(long count) {
+    source.updateCountMoveToMob(count);
+  }
+
+  public void updateSizeMoveFromMob(long size) {
+    source.updateSizeMoveFromMob(size);
+  }
+
+  public void updateSizeMoveToMob(long size) {
+    source.updateSizeMoveToMob(size);
+  }
+
+  public void updateFlush() {
+    source.updateFlush();
+  }
+
+  public void updateFlushedMobCellCount(long count) {
+    source.updateFlushedMobCellCount(count);
+  }
+
+  public void updateFlushedMobCellSize(long size) {
+    source.updateFlushedMobCellSize(size);
+  }
+
+  public void updateScanMobCellCount(long count) {
+    source.updateScanMobCellCount(count);
+  }
+
+  public void updateScanMobCellSize(long size) {
+    source.updateScanMobCellSize(size);
+  }
+
+  public MetricsMobSource getSource() {
+    return source;
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCache.java
new file mode 100644
index 0000000..1c9d3d4
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCache.java
@@ -0,0 +1,54 @@
+/**
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;
+
+@InterfaceAudience.Private
+public class MetricsMobFileCache {
+
+  private final MetricsMobFileCacheSource source;
+
+  public MetricsMobFileCache(final MetricsMobFileCacheWrapper wrapper){
+    source = CompatibilitySingletonFactory.getInstance(MetricsMobFileCacheSourceFactory.class)
+            .create(wrapper);
+  }
+
+  public void close(){
+    source.close();
+  }
+
+  public void updateCacheAccessedCount(long count) {
+    source.updateMobCacheAccess(count);
+  }
+
+  public void updateCacheMissedCount(long count) {
+    source.updateMobCacheMissed(count);
+  }
+
+  public void updateCacheHitRate(long rate){
+    source.updateHitRate(rate);
+  }
+
+  public MetricsMobFileCacheSource getSource() {
+    return source;
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheWrapperImpl.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheWrapperImpl.java
new file mode 100644
index 0000000..0dc2fc1
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobFileCacheWrapperImpl.java
@@ -0,0 +1,25 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+@InterfaceAudience.Private
+public class MetricsMobFileCacheWrapperImpl implements MetricsMobFileCacheWrapper{
+
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobWrapperImpl.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobWrapperImpl.java
new file mode 100644
index 0000000..d1fcb43
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsMobWrapperImpl.java
@@ -0,0 +1,54 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+
+/**
+ * Implements for exposing mob compactor Information through Hadoop's metrics 2 system.
+ */
+@InterfaceAudience.Private
+public class MetricsMobWrapperImpl implements MetricsMobWrapper {
+
+  private Store store;
+
+  public MetricsMobWrapperImpl(Store store) {
+    this.store = store;
+  }
+
+  @Override
+  public String getStoreName() {
+    return store.getColumnFamilyName();
+  }
+
+  @Override
+  public String getTableName() {
+    return store.getTableName().getQualifierAsString();
+  }
+
+  @Override
+  public String getNamespace() {
+    return store.getTableName().getNameAsString();
+  }
+
+  @Override
+  public String getRegionName() {
+    return store.getRegionInfo().getEncodedName();
+  }
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java
index b4bcbe7..f04c342 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java
@@ -36,11 +36,16 @@
 public class MobStoreScanner extends StoreScanner {
 
   private boolean cacheMobBlocks = false;
+  protected MetricsMob metrics;
 
   public MobStoreScanner(Store store, ScanInfo scanInfo, Scan scan,
       final NavigableSet<byte[]> columns, long readPt) throws IOException {
     super(store, scanInfo, scan, columns, readPt);
     cacheMobBlocks = MobUtils.isCacheMobBlocks(scan);
+    if (!(store instanceof HMobStore)) {
+      throw new IllegalArgumentException("The store " + store + " is not a HMobStore");
+    }
+    metrics = ((HMobStore) store).getMetricsMob();
   }
 
   /**
@@ -56,13 +61,20 @@ public boolean next(List<Cell> outResult, int limit) throws IOException {
       if (outResult.isEmpty()) {
         return result;
       }
+      long mobKVCount = 0;
+      long mobKVSize = 0;
       HMobStore mobStore = (HMobStore) store;
       for (int i = 0; i < outResult.size(); i++) {
         Cell cell = outResult.get(i);
         if (MobUtils.isMobReferenceCell(cell)) {
-          outResult.set(i, mobStore.resolve(cell, cacheMobBlocks));
+          Cell mobCell = mobStore.resolve(cell, cacheMobBlocks);
+          mobKVCount++;
+          mobKVSize += mobCell.getValueLength();
+          outResult.set(i, mobCell);
         }
       }
+      metrics.updateScanMobCellCount(mobKVCount);
+      metrics.updateScanMobCellSize(mobKVSize);
     }
     return result;
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java
index e384390..e0ed8bd 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java
@@ -36,11 +36,16 @@
 public class ReversedMobStoreScanner extends ReversedStoreScanner {
 
   private boolean cacheMobBlocks = false;
+  protected final MetricsMob metrics;
 
   ReversedMobStoreScanner(Store store, ScanInfo scanInfo, Scan scan, NavigableSet<byte[]> columns,
       long readPt) throws IOException {
     super(store, scanInfo, scan, columns, readPt);
     cacheMobBlocks = MobUtils.isCacheMobBlocks(scan);
+    if (!(store instanceof HMobStore)) {
+      throw new IllegalArgumentException("The store " + store + " is not a HMobStore");
+    }
+    metrics = ((HMobStore) store).getMetricsMob();
   }
 
   /**
@@ -56,13 +61,20 @@ public boolean next(List<Cell> outResult, int limit) throws IOException {
       if (outResult.isEmpty()) {
         return result;
       }
+      long mobKVCount = 0;
+      long mobKVSize = 0;
       HMobStore mobStore = (HMobStore) store;
       for (int i = 0; i < outResult.size(); i++) {
         Cell cell = outResult.get(i);
         if (MobUtils.isMobReferenceCell(cell)) {
-          outResult.set(i, mobStore.resolve(cell, cacheMobBlocks));
+          Cell mobCell = mobStore.resolve(cell, cacheMobBlocks);
+          mobKVCount++;
+          mobKVSize += mobCell.getValueLength();
+          outResult.set(i, mobCell);
         }
       }
+      metrics.updateScanMobCellCount(mobKVCount);
+      metrics.updateScanMobCellSize(mobKVSize);
     }
     return result;
   }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobWrapperStub.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobWrapperStub.java
new file mode 100644
index 0000000..20322ee
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/MetricsMobWrapperStub.java
@@ -0,0 +1,41 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+public class MetricsMobWrapperStub implements MetricsMobWrapper {
+
+  @Override
+  public String getTableName() {
+    return "mobtable";
+  }
+
+  @Override
+  public String getNamespace() {
+    return "test";
+  }
+
+  @Override
+  public String getRegionName() {
+    return "region#1";
+  }
+
+  @Override
+  public String getStoreName() {
+    return "family#1";
+  }
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMob.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMob.java
new file mode 100644
index 0000000..a234915
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMob.java
@@ -0,0 +1,79 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.CompatibilityFactory;
+import org.apache.hadoop.hbase.SmallTests;
+import org.apache.hadoop.hbase.test.MetricsAssertHelper;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+@Category(SmallTests.class)
+public class TestMetricsMob {
+
+  public MetricsAssertHelper HELPER = CompatibilityFactory.getInstance(MetricsAssertHelper.class);
+
+  @Test
+  public void testMobMetrics() {
+    MetricsMob mm = new MetricsMob(new MetricsMobWrapperStub());
+    for (int i = 0; i < 10; i++) {
+      mm.updateCountMoveFromMob(10);
+      mm.updateCountMoveToMob(5);
+      mm.updateSizeMoveFromMob(100);
+      mm.updateSizeMoveToMob(50);
+    }
+    mm.updateFlush();
+    mm.updateFlushedMobCellCount(2);
+    mm.updateFlushedMobCellSize(5);
+    mm.updateScanMobCellCount(5);
+    mm.updateScanMobCellCount(5);
+    mm.updateScanMobCellSize(1024);
+    mm.updateScanMobCellSize(1023);
+    MetricsMobAggregateSource agg = mm.getSource().getAggregateSource();
+
+    HELPER.assertCounter(
+        "namespace_test_table_mobtable_region_region#1_store_family#1_metric_countMoveToMob",
+        50, agg);
+    HELPER
+        .assertCounter(
+            "namespace_test_table_mobtable_region_region#1_store_family#1_metric_"
+            + "countMoveFromMob",
+            100, agg);
+    HELPER.assertCounter(
+        "namespace_test_table_mobtable_region_region#1_store_family#1_metric_sizeMoveToMob",
+        500, agg);
+    HELPER
+        .assertCounter(
+            "namespace_test_table_mobtable_region_region#1_store_family#1_metric_"
+            + "sizeMoveFromMob",
+            1000, agg);
+    HELPER.assertCounter(
+        "namespace_test_table_mobtable_region_region#1_store_family#1_metric_flushCount", 1, agg);
+    HELPER.assertCounter(
+        "namespace_test_table_mobtable_region_region#1_store_family#1"
+        + "_metric_flushedMobCellCount", 2, agg);
+    HELPER.assertCounter(
+        "namespace_test_table_mobtable_region_region#1_store_family#1_metric_flushedMobCellSize",
+        5, agg);
+    HELPER.assertCounter("Namespace_test_table_mobtable_region_region#1_store_family#1"
+        + "_metric_scanMobCellCount", 10, agg);
+    HELPER.assertCounter("Namespace_test_table_mobtable_region_region#1_store_family#1"
+        + "_metric_scanMobCellSize", 2047, agg);
+    mm.close();
+  }
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobFileCache.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobFileCache.java
new file mode 100644
index 0000000..54fbb8b
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMetricsMobFileCache.java
@@ -0,0 +1,46 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver;
+
+import org.apache.hadoop.hbase.CompatibilityFactory;
+import org.apache.hadoop.hbase.SmallTests;
+import org.apache.hadoop.hbase.test.MetricsAssertHelper;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+@Category(SmallTests.class)
+public class TestMetricsMobFileCache {
+  public static MetricsAssertHelper HELPER =
+          CompatibilityFactory.getInstance(MetricsAssertHelper.class);
+
+  @Test
+  public void testMobFileCacheMetrics(){
+    MetricsMobFileCache mfc = new MetricsMobFileCache(new MetricsMobFileCacheWrapperImpl());
+    for(int i = 1; i < 16; i++){
+      mfc.updateCacheAccessedCount(10);
+      mfc.updateCacheMissedCount(8);
+      mfc.updateCacheHitRate(20);
+    }
+    MetricsMobFileCacheSource source = mfc.getSource();
+    HELPER.assertCounter("MetricsMobFileCacheSource_mobCacheAccessNumOps", 15, source);
+    HELPER.assertCounter("MetricsMobFileCacheSource_mobCacheMissedNumOps", 15, source);
+    HELPER.assertCounter("MetricsMobFileCacheSource_mobCacheHitRateNumOps", 15, source);
+    mfc.close();
+  }
+
+}
