diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
index 4a782dd..57d4d80 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
@@ -46,6 +46,7 @@
 import org.apache.hadoop.hbase.filter.FilterList;
 import org.apache.hadoop.hbase.io.compress.Compression;
 import org.apache.hadoop.hbase.io.hfile.CacheConfig;
+import org.apache.hadoop.hbase.io.hfile.CorruptHFileException;
 import org.apache.hadoop.hbase.io.hfile.HFileContext;
 import org.apache.hadoop.hbase.io.hfile.HFileContextBuilder;
 import org.apache.hadoop.hbase.master.TableLockManager;
@@ -398,6 +399,9 @@ private Cell readCell(List<Path> locations, String fileName, Cell search, boolea
         if ((e instanceof FileNotFoundException) ||
             (e.getCause() instanceof FileNotFoundException)) {
           LOG.warn("Fail to read the cell, the mob file " + path + " doesn't exist", e);
+        } else if (e instanceof CorruptHFileException) {
+          LOG.error("The mob file " + path + " is corrupt");
+          return null;
         } else {
           throw e;
         }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobStoreScanner.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobStoreScanner.java
index 01b6a5f..56dec88 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobStoreScanner.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobStoreScanner.java
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Random;
 
+import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
@@ -40,6 +41,7 @@
 import org.apache.hadoop.hbase.client.ResultScanner;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
+import org.apache.hadoop.hbase.io.hfile.TestHFile;
 import org.apache.hadoop.hbase.mob.MobConstants;
 import org.apache.hadoop.hbase.mob.MobUtils;
 import org.apache.hadoop.hbase.testclassification.MediumTests;
@@ -68,6 +70,8 @@
   private static HTableDescriptor desc;
   private static Random random = new Random();
   private static long defaultThreshold = 10;
+  private FileSystem fs;
+  private Configuration conf;
 
   @BeforeClass
   public static void setUpBeforeClass() throws Exception {
@@ -84,6 +88,8 @@ public static void tearDownAfterClass() throws Exception {
   }
 
   public void setUp(long threshold, TableName tn) throws Exception {
+    conf = TEST_UTIL.getConfiguration();
+    fs = FileSystem.get(conf);
     desc = new HTableDescriptor(tn);
     hcd = new HColumnDescriptor(family);
     hcd.setMobEnabled(true);
@@ -196,6 +202,43 @@ public void testReadPt() throws Exception {
     Assert.assertEquals("value2", Bytes.toString(cell.getValue()));
   }
 
+  @Test
+  public void testReadFromCorruptMobFiles() throws Exception {
+    TableName tn = TableName.valueOf("testReadFromCorruptMobFiles");
+    setUp(0, tn);
+    byte[] value1 = Bytes.toBytes("value1");
+    Put put1 = new Put(row1);
+    put1.addColumn(family, qf1, value1);
+    table.put(put1);
+    admin.flush(tn);
+    Path mobFile = getFlushedMobFile(conf, fs, tn, Bytes.toString(family));
+    Assert.assertNotNull(mobFile);
+    // create new corrupt mob file.
+    Path corruptFile = new Path(mobFile.getParent(), "dummy");
+    TestHFile.truncateFile(fs, mobFile, corruptFile);
+    fs.delete(mobFile, true);
+    fs.rename(corruptFile, mobFile);
+    Scan scan = new Scan();
+    scan.setCaching(1);
+    ResultScanner rs = table.getScanner(scan);
+    Result result = rs.next();
+    Cell cell = result.getColumnLatestCell(family, qf1);
+    Assert.assertEquals(0, CellUtil.cloneValue(cell).length);
+  }
+
+  private Path getFlushedMobFile(Configuration conf, FileSystem fs, TableName table, String family)
+    throws IOException {
+    Path regionDir = MobUtils.getMobRegionPath(conf, table);
+    Path famDir = new Path(regionDir, family);
+    FileStatus[] hfFss = fs.listStatus(famDir);
+    for (FileStatus hfs : hfFss) {
+      if (!hfs.isDirectory()) {
+        return hfs.getPath();
+      }
+    }
+    return null;
+  }
+
   private void testGetFromFiles(boolean reversed) throws Exception {
     TableName tn = TableName.valueOf("testGetFromFiles" + reversed);
     setUp(defaultThreshold, tn);
