From ddb591b8959c088c9f5ca828d7ba05d432003a8f Mon Sep 17 00:00:00 2001
From: Scott Miao <scott_miao@trend.com.twa>
Date: Wed, 9 Jan 2013 17:38:52 +0800
Subject: [PATCH] add canarytool specifically for regionservers

---
 .../hadoop/hbase/tool/RegionServerCanary.java      |  420 ++++++++++++++++++++
 1 files changed, 420 insertions(+), 0 deletions(-)
 create mode 100644 src/main/java/org/apache/hadoop/hbase/tool/RegionServerCanary.java

diff --git a/src/main/java/org/apache/hadoop/hbase/tool/RegionServerCanary.java b/src/main/java/org/apache/hadoop/hbase/tool/RegionServerCanary.java
new file mode 100644
index 0000000..ba512ea
--- /dev/null
+++ b/src/main/java/org/apache/hadoop/hbase/tool/RegionServerCanary.java
@@ -0,0 +1,420 @@
+/**
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.tool;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hbase.HBaseConfiguration;
+import org.apache.hadoop.hbase.HRegionInfo;
+import org.apache.hadoop.hbase.HServerAddress;
+import org.apache.hadoop.hbase.HTableDescriptor;
+import org.apache.hadoop.hbase.client.Get;
+import org.apache.hadoop.hbase.client.HBaseAdmin;
+import org.apache.hadoop.hbase.client.HTable;
+import org.apache.hadoop.util.Tool;
+import org.apache.hadoop.util.ToolRunner;
+
+/**
+ * A modified version of default HBase Canary Tool (
+ * <code>org.apache.hadoop.hbase.tool.Canary</code>), that that can be used to
+ * do "canary monitoring" of a running HBase cluster.
+ * 
+ * Foreach regionserver tries to get one row and outputs some information about
+ * failure or latency.
+ */
+public final class RegionServerCanary implements Tool {
+
+  private static final long DEFAULT_INTERVAL = 6000;
+
+  private static final long DEFAULT_TIMEOUT = 600000; // 10 mins
+
+  private static final Log LOG = LogFactory.getLog(RegionServerCanary.class);
+
+  private boolean useRegExp;
+
+  private long timeout = DEFAULT_TIMEOUT;
+
+  private boolean failOnError = true;
+
+  private long interval = 0;
+
+  private Configuration conf;
+
+  public RegionServerCanary() {
+    this.conf = HBaseConfiguration.create();
+  }
+
+  public static void main(String[] args) throws Exception {
+    int exitCode = ToolRunner.run(new RegionServerCanary(), args);
+    System.exit(exitCode);
+  }
+
+  @Override
+  public int run(String[] args) throws Exception {
+    int rsIndex = -1;
+
+    // Process command line args
+    for (int i = 0; i < args.length; i++) {
+      String cmd = args[i];
+
+      if (cmd.startsWith("-")) {
+        if (rsIndex >= 0) {
+          // command line args must be in the form: [opts] [table 1
+          // [table 2 ...]]
+          System.err.println("Invalid command line options");
+          printUsageAndExit();
+        }
+
+        if (cmd.equals("-help")) {
+          // user asked for help, print the help and quit.
+          printUsageAndExit();
+        } else if (cmd.equals("-daemon") && interval == 0) {
+          // user asked for daemon mode, set a default interval
+          // between checks
+          interval = DEFAULT_INTERVAL;
+        } else if (cmd.equals("-interval")) {
+          // user has specified an interval for canary breaths
+          // (-interval N)
+          i++;
+
+          if (i == args.length) {
+            System.err.println("-interval needs a numeric value argument.");
+            printUsageAndExit();
+          }
+
+          try {
+            interval = Long.parseLong(args[i]) * 1000;
+          } catch (NumberFormatException e) {
+            System.err.println("-interval needs a numeric value argument.");
+            printUsageAndExit();
+          }
+        } else if (cmd.equals("-e")) {
+          this.useRegExp = true;
+        } else if (cmd.equals("-t")) {
+          i++;
+
+          if (i == args.length) {
+            System.err.println("-t needs a numeric value argument.");
+            printUsageAndExit();
+          }
+
+          try {
+            this.timeout = Long.parseLong(args[i]);
+          } catch (NumberFormatException e) {
+            System.err.println("-t needs a numeric value argument.");
+            printUsageAndExit();
+          }
+
+        } else if (cmd.equals("-f")) {
+          i++;
+
+          if (i == args.length) {
+            System.err
+                .println("-f needs a boolean value argument (true|false).");
+            printUsageAndExit();
+          }
+
+          this.failOnError = Boolean.parseBoolean(args[i]);
+        } else {
+          // no options match
+          System.err.println(cmd + " options is invalid.");
+          printUsageAndExit();
+        }
+      } else if (rsIndex < 0) {
+        // keep track of first regionserver name specified by the user
+        rsIndex = i;
+      }
+    }
+
+    // start to prepare the stuffs
+    Configuration conf = this.getConf();
+    RegionServerMonitor monitor = null;
+    Thread monitorThread = null;
+    long startTime = 0;
+    long currentTimeLength = 0;
+    long runCount = 0;
+    // lets the canary monitor the cluster
+    do {
+      // do monitor !!
+      monitor = new RegionServerMonitor(conf, rsIndex, args, this.useRegExp);
+      monitorThread = new Thread(monitor);
+      startTime = System.currentTimeMillis();
+      monitorThread.start();
+      runCount = 0;
+      while (!monitor.isDone()) {
+        // wait for 1 sec
+        Thread.sleep(1000);
+        // exit if any error occurs
+        if (this.failOnError && monitor.isError()) {
+          monitorThread.interrupt();
+          System.exit(1);
+        }
+        currentTimeLength = System.currentTimeMillis() - startTime;
+        if (currentTimeLength > this.timeout) {
+          LOG.error("The monitor is running too long (" + currentTimeLength
+              + ") after timeout limit:" + this.timeout
+              + " will be killed itself !!");
+          monitorThread.interrupt();
+          System.exit(1);
+        }
+        LOG.debug("runCount=" + runCount++);
+      }
+
+      if (this.failOnError && monitor.isError()) {
+        monitorThread.interrupt();
+        System.exit(1);
+      }
+
+      Thread.sleep(interval);
+    } while (interval > 0);
+
+    return (0);
+  }
+
+  public Configuration getConf() {
+    return conf;
+  }
+
+  public void setConf(Configuration conf) {
+    this.conf = conf;
+  }
+
+  private class RegionServerMonitor implements Runnable {
+
+    private Configuration config;
+    private HBaseAdmin admin;
+    private int rsIndex;
+    private String[] args;
+    private boolean useRegExp;
+
+    private boolean done = false;
+    private boolean error = false;
+
+    public boolean isDone() {
+      return done;
+    }
+
+    public boolean isError() {
+      return error;
+    }
+
+    public RegionServerMonitor(Configuration config, int rsIndex,
+        String[] args, boolean useRegExp) {
+      if (null == config)
+        throw new IllegalArgumentException("config shall not be null");
+
+      this.config = config;
+      this.rsIndex = rsIndex;
+      this.args = args;
+      this.useRegExp = useRegExp;
+    }
+
+    @Override
+    public void run() {
+      if (this.initialAdmin()) {
+        Map<String, List<HRegionInfo>> rsAndRMap = null;
+        rsAndRMap = this.prepareFilteredRegionServerAndRegionsMap(this.args,
+            this.rsIndex);
+        this.monitorRegionServers(rsAndRMap);
+      }
+      this.done = true;
+    }
+
+    private boolean initialAdmin() {
+      if (null == this.admin) {
+        String msg = "Initial HBaseAdmin failed...";
+        try {
+          this.admin = new HBaseAdmin(conf);
+        } catch (Exception e) {
+          LOG.error(msg, e);
+          this.error = true;
+        }
+      }
+      if (admin.isAborted()) {
+        LOG.error("HBaseAdmin aborted");
+        this.error = true;
+      }
+      return !this.error;
+    }
+
+    private void monitorRegionServers(Map<String, List<HRegionInfo>> rsAndRMap) {
+      String serverName = null;
+      String tableName = null;
+      HRegionInfo region = null;
+      HTable table = null;
+      Get get = null;
+      long startTime = 0;
+      long time = 0;
+      // monitor one region on every region server
+      for (Map.Entry<String, List<HRegionInfo>> entry : rsAndRMap.entrySet()) {
+        serverName = entry.getKey();
+        // always get the first region
+        region = entry.getValue().get(0);
+        try {
+          tableName = region.getTableNameAsString();
+          table = new HTable(this.config, tableName);
+          get = new Get(region.getStartKey());
+          startTime = System.currentTimeMillis();
+          table.get(get);
+          time = System.currentTimeMillis() - startTime;
+
+          LOG.info("Read from table:" + tableName + " on region server:"
+              + serverName + "in " + time + "ms");
+        } catch (IOException e) {
+          LOG.error("Read from table:" + tableName + " on region server:"
+              + serverName + " failed", e);
+          this.error = true;
+        } finally {
+          if (null != table) {
+            try {
+              table.close();
+            } catch (IOException e) {/* DO NOTHING */
+            }
+          }
+        }
+      }
+    }
+
+    private Map<String, List<HRegionInfo>> prepareFilteredRegionServerAndRegionsMap(
+        String[] args, int tableIndex) {
+      Map<String, List<HRegionInfo>> regionServerAndRegionsMap = this
+          .prepareFullRegionServerAndRegionsMap();
+      regionServerAndRegionsMap = this
+          .doPrepareFilteredRegionServerAndRegionsMap(args, tableIndex,
+              regionServerAndRegionsMap);
+      return regionServerAndRegionsMap;
+    }
+
+    private Map<String, List<HRegionInfo>> prepareFullRegionServerAndRegionsMap() {
+      Map<String, List<HRegionInfo>> rsAndRMap = new HashMap<String, List<HRegionInfo>>();
+      HTable table = null;
+      try {
+        HTableDescriptor[] tableDescs = this.admin.listTables();
+        List<HRegionInfo> regions = null;
+        for (HTableDescriptor tableDesc : tableDescs) {
+          table = new HTable(this.config, tableDesc.getName());
+
+          for (Map.Entry<HRegionInfo, HServerAddress> entry : table
+              .getRegionsInfo().entrySet()) {
+            HServerAddress rs = entry.getValue();
+            String rsName = rs.getHostname();
+            HRegionInfo r = entry.getKey();
+
+            if (rsAndRMap.containsKey(rsName)) {
+              regions = rsAndRMap.get(rsName);
+            } else {
+              regions = new ArrayList<HRegionInfo>();
+              rsAndRMap.put(rsName, regions);
+            }
+            regions.add(r);
+          }
+          table.close();
+        }
+
+      } catch (IOException e) {
+        String msg = "Get HTables info failed";
+        LOG.error(msg, e);
+        this.error = true;
+      } finally {
+        if (null != table) {
+          try {
+            table.close();
+          } catch (IOException e) {
+            LOG.warn("Close table failed", e);
+          }
+        }
+      }
+
+      return rsAndRMap;
+    }
+
+    private Map<String, List<HRegionInfo>> doPrepareFilteredRegionServerAndRegionsMap(
+        String[] args, int tableIndex,
+        Map<String, List<HRegionInfo>> fullRsAndRMap) {
+
+      Map<String, List<HRegionInfo>> filteredRsAndRMap = null;
+
+      if (tableIndex >= 0) {
+        String rsName = null;
+        filteredRsAndRMap = new HashMap<String, List<HRegionInfo>>();
+        Pattern pattern = null;
+        Matcher matcher = null;
+        boolean regExpFound = false;
+        for (int a = tableIndex; a < args.length; a++) {
+          rsName = args[a];
+          if (this.useRegExp) {
+            regExpFound = false;
+            pattern = Pattern.compile(rsName);
+            for (String tmpRsName : fullRsAndRMap.keySet()) {
+              matcher = pattern.matcher(tmpRsName);
+              if (matcher.matches()) {
+                filteredRsAndRMap.put(tmpRsName, fullRsAndRMap.get(tmpRsName));
+                regExpFound = true;
+              }
+            }
+            if (!regExpFound) {
+              LOG.error("No any RegionServerInfo found, regionServerPattern:"
+                  + rsName);
+              this.error = true;
+            }
+          } else {
+            if (fullRsAndRMap.containsKey(rsName)) {
+              filteredRsAndRMap.put(rsName, fullRsAndRMap.get(rsName));
+            } else {
+              LOG.error("No any RegionServerInfo found, regionServerName:"
+                  + rsName);
+              this.error = true;
+            }
+          }
+        }
+      } else {
+        filteredRsAndRMap = fullRsAndRMap;
+      }
+      return filteredRsAndRMap;
+    }
+  }
+
+  private void printUsageAndExit() {
+    System.err.printf(
+        "Usage: [opts] [regionServerName 1 [regionServrName 2...]]\n",
+        getClass().getName());
+    System.err
+        .println(" regionServerName - FQDN serverName, can use linux command:hostname -f to check your serverName");
+    System.err.println(" where [-opts] are:");
+    System.err.println("   -help Show this help and exit.");
+    System.err.println("   -e    Use regionServerName as regular expression");
+    System.err.println("      which means the regionServerName is regular expression pattern");
+    System.err.println("   -f <B>         stop whole program if first error occurs, default is " 
+        + this.failOnError);
+    System.err.println("   -t <N>         timeout for a check, default is " 
+        + DEFAULT_TIMEOUT + " (milisecs)");
+    System.err.println("   -daemon        Continuous check at defined intervals.");
+    System.err.println("   -interval <N>  Interval between checks (sec)");
+    System.exit(1);
+  }
+}
-- 
1.7.1

