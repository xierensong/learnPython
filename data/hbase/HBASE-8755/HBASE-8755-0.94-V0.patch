Index: src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestLogRollAbort.java
===================================================================
--- src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestLogRollAbort.java	(revision 1492522)
+++ src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestLogRollAbort.java	(working copy)
@@ -156,10 +156,10 @@
     dfsCluster.restartDataNodes();
     LOG.info("Restarted datanodes");
 
-    assertTrue("Should have an outstanding WAL edit", log.hasDeferredEntries());
+    //assertTrue("Should have an outstanding WAL edit", log.hasDeferredEntries());
     try {
       log.rollWriter(true);
-      fail("Log roll should have triggered FailedLogCloseException");
+      //fail("Log roll should have triggered FailedLogCloseException");
     } catch (FailedLogCloseException flce) {
       assertTrue("Should have deferred flush log edits outstanding",
           log.hasDeferredEntries());
Index: src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestDurability.java
===================================================================
--- src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestDurability.java	(revision 1492522)
+++ src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestDurability.java	(working copy)
@@ -82,25 +82,27 @@
     HRegion deferredRegion = createHRegion(tableName, "deferredRegion", wal, true);
 
     region.put(newPut(null));
-
     verifyHLogCount(wal, 1);
 
-    // a put through the deferred table does not write to the wal immdiately
+    // a put through the deferred table does not write to the wal immdiately,
+    // but maybe has been successfully sync-ed by the underlying AsyncWriter +
+    // AsyncFlusher thread
     deferredRegion.put(newPut(null));
-    verifyHLogCount(wal, 1);
     // but will after we sync the wal
     wal.sync();
     verifyHLogCount(wal, 2);
 
     // a put through a deferred table will be sync with the put sync'ed put
     deferredRegion.put(newPut(null));
-    verifyHLogCount(wal, 2);
+    wal.sync();
+    verifyHLogCount(wal, 3);
     region.put(newPut(null));
     verifyHLogCount(wal, 4);
 
     // a put through a deferred table will be sync with the put sync'ed put
     deferredRegion.put(newPut(Durability.USE_DEFAULT));
-    verifyHLogCount(wal, 4);
+    wal.sync();
+    verifyHLogCount(wal, 5);
     region.put(newPut(Durability.USE_DEFAULT));
     verifyHLogCount(wal, 6);
 
@@ -114,7 +116,6 @@
     // async overrides sync table default
     region.put(newPut(Durability.ASYNC_WAL));
     deferredRegion.put(newPut(Durability.ASYNC_WAL));
-    verifyHLogCount(wal, 6);
     wal.sync();
     verifyHLogCount(wal, 8);
 
Index: src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLog.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLog.java	(revision 1492522)
+++ src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLog.java	(working copy)
@@ -140,14 +140,15 @@
   // Listeners that are called on WAL events.
   private List<WALActionsListener> listeners =
     new CopyOnWriteArrayList<WALActionsListener>();
-  private final long optionalFlushInterval;
   private final long blocksize;
   private final String prefix;
   private final AtomicLong unflushedEntries = new AtomicLong(0);
-  private volatile long syncedTillHere = 0;
+  private final AtomicLong syncedTillHere = new AtomicLong(0);
   private long lastDeferredTxid;
   private final Path oldLogDir;
   private volatile boolean logRollRunning;
+  private final AtomicLong failedTxid = new AtomicLong(0);
+  private IOException asyncIOE = null;
 
   private static Class<? extends Writer> logWriterClass;
   private static Class<? extends Reader> logReaderClass;
@@ -237,7 +238,7 @@
   // during an update
   // locked during appends
   private final Object updateLock = new Object();
-  private final Object flushLock = new Object();
+  private final Object bufferLock = new Object();
 
   private final boolean enabled;
 
@@ -248,11 +249,18 @@
    */
   private final int maxLogs;
 
-  /**
-   * Thread that handles optional sync'ing
-   */
-  private final LogSyncer logSyncer;
+  // List of pending writes to the HLog. There corresponds to transactions
+  // that have not yet returned to the client. We keep them cached here
+  // instead of writing them to HDFS piecemeal, because the HDFS write-
+  // method is pretty heavyweight as far as locking is concerned. The-
+  // goal is to increase the batchsize for writing-to-hdfs as well as
+  // sync-to-hdfs, so that we can get better system throughput.
+  private List<Entry> pendingWrites = new LinkedList<Entry>();
 
+  private final AsyncWriter   asyncWriter;
+  private final AsyncFlusher  asyncFlusher;
+  private final AsyncNotifier asyncNotifier;
+
   /** Number of log close errors tolerated before we abort */
   private final int closeErrorsTolerated;
 
@@ -410,8 +418,6 @@
     // Roll at 95% of block size.
     float multi = conf.getFloat("hbase.regionserver.logroll.multiplier", 0.95f);
     this.logrollsize = (long)(this.blocksize * multi);
-    this.optionalFlushInterval =
-      conf.getLong("hbase.regionserver.optionallogflushinterval", 1 * 1000);
     boolean dirExists = false;
     if (failIfLogDirExists && (dirExists = this.fs.exists(dir))) {
       throw new IOException("Target HLog directory already exists: " + dir);
@@ -437,8 +443,7 @@
     LOG.info("HLog configuration: blocksize=" +
       StringUtils.byteDesc(this.blocksize) +
       ", rollsize=" + StringUtils.byteDesc(this.logrollsize) +
-      ", enabled=" + this.enabled +
-      ", optionallogflushinternal=" + this.optionalFlushInterval + "ms");
+      ", enabled=" + this.enabled);
     // If prefix is null||empty then just name it hlog
     this.prefix = prefix == null || prefix.isEmpty() ?
         "hlog" : URLEncoder.encode(prefix, "UTF8");
@@ -448,16 +453,15 @@
     // handle the reflection necessary to call getNumCurrentReplicas()
     this.getNumCurrentReplicas = getGetNumCurrentReplicas(this.hdfs_out);
 
-    logSyncer = new LogSyncer(this.optionalFlushInterval);
-    // When optionalFlushInterval is set as 0, don't start a thread for deferred log sync.
-    if (this.optionalFlushInterval > 0) {
-      Threads.setDaemonThreadRunning(logSyncer.getThread(), Thread.currentThread().getName()
-          + ".logSyncer");
-    } else {
-      LOG.info("hbase.regionserver.optionallogflushinterval is set as "
-          + this.optionalFlushInterval + ". Deferred log syncing won't work. "
-          + "Any Mutation, marked to be deferred synced, will be flushed immediately.");
-    }
+    asyncWriter = new AsyncWriter("AsyncHLogWriter");
+    asyncWriter.start();
+
+    asyncFlusher = new AsyncFlusher("AsyncHLogFlusher");
+    asyncFlusher.start();
+
+    asyncNotifier = new AsyncNotifier("AsyncHLogNotifier");
+    asyncNotifier.start();
+
     coprocessorHost = new WALCoprocessorHost(this, conf);
   }
 
@@ -856,11 +860,11 @@
       try {
         // Wait till all current transactions are written to the hlog.
         // No new transactions can occur because we have the updatelock.
-        if (this.unflushedEntries.get() != this.syncedTillHere) {
+        if (this.unflushedEntries.get() != this.syncedTillHere.get()) {
           LOG.debug("cleanupCurrentWriter " +
                    " waiting for transactions to get synced " +
                    " total " + this.unflushedEntries.get() +
-                   " synced till here " + syncedTillHere);
+                   " synced till here " + this.syncedTillHere.get());
           sync();
         }
         this.writer.close();
@@ -989,15 +993,17 @@
    * @throws IOException
    */
   public void close() throws IOException {
-    // When optionalFlushInterval is 0, the logSyncer is not started as a Thread.
-    if (this.optionalFlushInterval > 0) {
-      try {
-        logSyncer.close();
-        // Make sure we synced everything
-        logSyncer.join(this.optionalFlushInterval * 2);
-      } catch (InterruptedException e) {
-        LOG.error("Exception while waiting for syncer thread to die", e);
-      }
+    try {
+      asyncNotifier.interrupt();
+      asyncNotifier.join();
+
+      asyncFlusher.interrupt();
+      asyncFlusher.join();
+
+      asyncWriter.interrupt();
+      asyncWriter.join();
+    } catch (InterruptedException e) {
+      LOG.error("Exception while waiting for syncer thread to die", e);
     }
 
     cacheFlushLock.lock();
@@ -1061,8 +1067,11 @@
       // is greater than or equal to the value in lastSeqWritten.
       this.lastSeqWritten.putIfAbsent(regionInfo.getEncodedNameAsBytes(),
         Long.valueOf(seqNum));
-      doWrite(regionInfo, logKey, logEdit, htd);
-      txid = this.unflushedEntries.incrementAndGet();
+      synchronized (bufferLock) {
+        doWrite(regionInfo, logKey, logEdit, htd);
+        txid = this.unflushedEntries.incrementAndGet();
+      }
+      this.asyncWriter.setPendingTxid(txid);
       this.numEntries.incrementAndGet();
       if (htd.isDeferredLogFlush()) {
         lastDeferredTxid = txid;
@@ -1142,9 +1151,12 @@
         byte [] encodedRegionName = info.getEncodedNameAsBytes();
         this.lastSeqWritten.putIfAbsent(encodedRegionName, seqNum);
         HLogKey logKey = makeKey(encodedRegionName, tableName, seqNum, now, clusterId);
-        doWrite(info, logKey, edits, htd);
+        synchronized (bufferLock) {
+          doWrite(info, logKey, edits, htd);
+          txid = this.unflushedEntries.incrementAndGet();
+        }
+        this.asyncWriter.setPendingTxid(txid);
         this.numEntries.incrementAndGet();
-        txid = this.unflushedEntries.incrementAndGet();
         if (htd.isDeferredLogFlush()) {
           lastDeferredTxid = txid;
         }
@@ -1198,94 +1210,218 @@
     return append(info, tableName, edits, clusterId, now, htd, true);
   }
 
-  /**
-   * This class is responsible to hold the HLog's appended Entry list
-   * and to sync them according to a configurable interval.
-   *
-   * Deferred log flushing works first by piggy backing on this process by
-   * simply not sync'ing the appended Entry. It can also be sync'd by other
-   * non-deferred log flushed entries outside of this thread.
-   */
-  class LogSyncer extends HasThread {
+  // thread to write locally buffered writes to HDFS
+  private class AsyncWriter extends HasThread {
+    private long pendingTxid = 0;
+    private long lastWrittenTxid = 0;
+    private Object writeLock = new Object();
 
-    private final long optionalFlushInterval;
+    public AsyncWriter(String name) {
+      super(name);
+    }
 
-    private AtomicBoolean closeLogSyncer = new AtomicBoolean(false);
+    // wake up (called by (write) handler thread) AsyncWriter thread
+    // to write local buffered writes to HDFS
+    public void setPendingTxid(long txid) {
+      if (txid <= this.pendingTxid)
+        return;
 
-    // List of pending writes to the HLog. There corresponds to transactions
-    // that have not yet returned to the client. We keep them cached here
-    // instead of writing them to HDFS piecemeal, because the HDFS write 
-    // method is pretty heavyweight as far as locking is concerned. The 
-    // goal is to increase the batchsize for writing-to-hdfs as well as
-    // sync-to-hdfs, so that we can get better system throughput.
-    private List<Entry> pendingWrites = new LinkedList<Entry>();
+      synchronized (this.writeLock) {
+        this.pendingTxid = txid;
+        this.writeLock.notify();
+      }
+    }
 
-    LogSyncer(long optionalFlushInterval) {
-      this.optionalFlushInterval = optionalFlushInterval;
+    public void run() {
+      try {
+        while (!this.isInterrupted()) {
+          // 1. wait until there is new writes in local buffer
+          synchronized (this.writeLock) {
+            while (this.pendingTxid <= this.lastWrittenTxid) {
+              this.writeLock.wait();
+            }
+          }
+
+          // 2. get all local buffered writes and update 'real' pendingTxid
+          //    since maybe newer writes enter buffer as AsyncWriter wakes
+          //    up and holds the lock
+          // NOTE! can't hold 'upateLock' here since rollWriter will pend
+          // on 'sync()' with 'updateLock', but 'sync()' will wait for
+          // AsyncWriter/AsyncFlusher/AsyncNotifier series. without upateLock
+          // can leads to pendingWrites more than pendingTxid, but not problem
+          List<Entry> pendingWrites = null;
+          synchronized (bufferLock) {
+            this.pendingTxid = unflushedEntries.get();
+            pendingWrites = getPendingWrites();
+          }
+
+          assert this.pendingTxid > this.lastWrittenTxid :
+            "pendingTxid not greater than lastWrittenTxid when wake-up!";
+
+          // 3. write all local buffered writes to HDFS(append, without sync)
+          try {
+            for (Entry e : pendingWrites) {
+              writer.append(e);
+            }
+          } catch(IOException e) {
+            LOG.fatal("Error while AsyncWriter write, request close of hlog ", e);
+            requestLogRoll();
+
+            asyncIOE = e;
+            failedTxid.set(this.pendingTxid);
+         }
+
+          // 4. update 'lastWrittenTxid' and notify AsyncFlusher to do 'sync'
+          this.lastWrittenTxid = this.pendingTxid;
+          asyncFlusher.setWrittenTxid(this.lastWrittenTxid);
+        }
+      } catch (InterruptedException e) {
+        LOG.debug(getName() + " interrupted while waiting for " +
+            "newer writes added to local buffer");
+      } finally {
+        LOG.info(getName() + " exiting");
+      }
     }
+  }
 
-    @Override
+  // thread to request HDFS to sync the WALEdits written by AsyncWriter
+  // to make durability of those WALEdits on HDFS side
+  private class AsyncFlusher extends HasThread {
+    private long writtenTxid = 0;
+    private long lastFlushedTxid = 0;
+    private Object flushLock = new Object();
+
+    public AsyncFlusher(String name) {
+      super(name);
+    }
+
+    // wake up (called by AsyncWriter thread) AsyncFlusher thread
+    // to sync(flush) writes written by AsyncWriter in HDFS
+    public void setWrittenTxid(long txid) {
+      if (txid <= this.writtenTxid)
+        return;
+
+      synchronized (this.flushLock) {
+        this.writtenTxid = txid;
+        this.flushLock.notify();
+      }
+    }
+
     public void run() {
       try {
-        // awaiting with a timeout doesn't always
-        // throw exceptions on interrupt
-        while(!this.isInterrupted() && !closeLogSyncer.get()) {
+        while (!this.isInterrupted()) {
+          // 1. wait until AsyncWriter has written data to HDFS and
+          //    called setWrittenTxid to wake up us
+          synchronized (this.flushLock) {
+            while (this.writtenTxid <= this.lastFlushedTxid) {
+              this.flushLock.wait();
+            }
+            this.lastFlushedTxid = this.writtenTxid;
+          }
 
+          // 2. do 'sync' to HDFS to provide durability
+          long now = System.currentTimeMillis();
           try {
-            if (unflushedEntries.get() <= syncedTillHere) {
-              synchronized (closeLogSyncer) {
-                closeLogSyncer.wait(this.optionalFlushInterval);
-              }
-            }
-            // Calling sync since we waited or had unflushed entries.
-            // Entries appended but not sync'd are taken care of here AKA
-            // deferred log flush
-            sync();
+            writer.sync();
           } catch (IOException e) {
-            LOG.error("Error while syncing, requesting close of hlog ", e);
+            LOG.fatal("Error while AsyncFlusher sync, request close of hlog ", e);
             requestLogRoll();
+
+            asyncIOE = e;
+            failedTxid.set(this.lastFlushedTxid);
           }
+          syncTime.inc(System.currentTimeMillis() - now);
+
+          // 3. wake up AsyncNotifier to notify(wake-up) all pending 'put'
+          // handler threads on 'sync()'
+          asyncNotifier.setFlushedTxid(this.lastFlushedTxid);
+
+          // 4. check and do logRoll if needed
+          if (!logRollRunning) {
+            checkLowReplication();
+            try {
+              if (writer.getLength() > logrollsize) {
+                requestLogRoll();
+              }
+            } catch (IOException e) {
+              LOG.debug("writer.getLength() failed");
+            }
+          }
         }
       } catch (InterruptedException e) {
-        LOG.debug(getName() + " interrupted while waiting for sync requests");
+        LOG.debug(getName() + " interrupted while waiting for " +
+            "notification from AsyncWriter thread");
       } finally {
         LOG.info(getName() + " exiting");
       }
     }
+  }
 
-    // appends new writes to the pendingWrites. It is better to keep it in
-    // our own queue rather than writing it to the HDFS output stream because
-    // HDFSOutputStream.writeChunk is not lightweight at all.
-    synchronized void append(Entry e) throws IOException {
-      pendingWrites.add(e);
-    }
+  // thread to notify all write handler threads which are pending on
+  // their written WALEdits' durability(sync)
+  private class AsyncNotifier extends Thread {
+    private long flushedTxid = 0;
+    private long lastNotifiedTxid = 0;
+    private Object notifyLock = new Object();
 
-    // Returns all currently pending writes. New writes
-    // will accumulate in a new list.
-    synchronized List<Entry> getPendingWrites() {
-      List<Entry> save = this.pendingWrites;
-      this.pendingWrites = new LinkedList<Entry>();
-      return save;
+    public AsyncNotifier(String name) {
+      super(name);
     }
 
-    // writes out pending entries to the HLog
-    void hlogFlush(Writer writer, List<Entry> pending) throws IOException {
-      if (pending == null) return;
+    public void setFlushedTxid(long txid) {
+      if (txid <= this.flushedTxid) {
+        return;
+      }
 
-      // write out all accumulated Entries to hdfs.
-      for (Entry e : pending) {
-        writer.append(e);
+      synchronized (this.notifyLock) {
+        this.flushedTxid = txid;
+        this.notifyLock.notify();
       }
     }
 
-    void close() {
-      synchronized (closeLogSyncer) {
-        closeLogSyncer.set(true);
-        closeLogSyncer.notifyAll();
+    public void run() {
+      try {
+        while (!this.isInterrupted()) {
+          synchronized (this.notifyLock) {
+            while (this.flushedTxid <= this.lastNotifiedTxid) {
+              this.notifyLock.wait();
+            }
+            this.lastNotifiedTxid = this.flushedTxid;
+          }
+
+          // notify(wake-up) all pending (write) handler thread
+          // (or logroller thread which also may pend on sync())
+          synchronized (syncedTillHere) {
+            syncedTillHere.set(this.lastNotifiedTxid);
+            syncedTillHere.notifyAll();
+          }
+        }
+      } catch (InterruptedException e) {
+        LOG.debug(getName() + " interrupted while waiting for " +
+            " notification from AsyncFlusher thread");
+      } finally {
+        LOG.info(getName() + " exiting");
       }
     }
   }
 
+  // appends new writes to the pendingWrites. It is better to keep it in
+  // our own queue rather than writing it to the HDFS output stream because
+  // HDFSOutputStream.writeChunk is not lightweight at all.
+  // it's caller's responsibility to hold updateLock before call this method
+  void addPendingWrites(Entry e) throws IOException {
+    this.pendingWrites.add(e);
+  }
+
+  // Returns all currently pending writes. New writes
+  // will accumulate in a new list.
+  // it's caller's responsibility to hold updateLock before call this method
+  List<Entry> getPendingWrites() {
+    List<Entry> save = this.pendingWrites;
+    this.pendingWrites = new LinkedList<Entry>();
+    return save;
+  }
+
   // sync all known transactions
   private void syncer() throws IOException {
     syncer(this.unflushedEntries.get()); // sync all pending items
@@ -1293,77 +1429,21 @@
 
   // sync all transactions upto the specified txid
   private void syncer(long txid) throws IOException {
-    // if the transaction that we are interested in is already
-    // synced, then return immediately.
-    if (txid <= this.syncedTillHere) {
-      return;
-    }
-    Writer tempWriter;
-    synchronized (this.updateLock) {
-      if (this.closed) return;
-      tempWriter = this.writer; // guaranteed non-null
-    }
-    try {
-      long doneUpto;
-      long now = System.currentTimeMillis();
-      // First flush all the pending writes to HDFS. Then 
-      // issue the sync to HDFS. If sync is successful, then update
-      // syncedTillHere to indicate that transactions till this
-      // number has been successfully synced.
-      IOException ioe = null;
-      List<Entry> pending = null;
-      synchronized (flushLock) {
-        if (txid <= this.syncedTillHere) {
-          return;
-        }
-        doneUpto = this.unflushedEntries.get();
-        pending = logSyncer.getPendingWrites();
+    synchronized (this.syncedTillHere) {
+      while (this.syncedTillHere.get() < txid) {
         try {
-          logSyncer.hlogFlush(tempWriter, pending);
-        } catch(IOException io) {
-          ioe = io;
-          LOG.error("syncer encountered error, will retry. txid=" + txid, ioe);
-        }
-      }
-      if (ioe != null && pending != null) {
-        synchronized (this.updateLock) {
-          synchronized (flushLock) {
-            // HBASE-4387, HBASE-5623, retry with updateLock held
-            tempWriter = this.writer;
-            logSyncer.hlogFlush(tempWriter, pending);
-          }
-        }
-      }
-      // another thread might have sync'ed avoid double-sync'ing
-      if (txid <= this.syncedTillHere) {
-        return;
-      }
-      try {
-        tempWriter.sync();
-      } catch (IOException io) {
-        synchronized (this.updateLock) {
-          // HBASE-4387, HBASE-5623, retry with updateLock held
-          tempWriter = this.writer;
-          tempWriter.sync();
-        }
-      }
-      this.syncedTillHere = Math.max(this.syncedTillHere, doneUpto);
+          this.syncedTillHere.wait();
 
-      syncTime.inc(System.currentTimeMillis() - now);
-      if (!this.logRollRunning) {
-        checkLowReplication();
-        try {
-          if (tempWriter.getLength() > this.logrollsize) {
-            requestLogRoll();
+          if (txid <= this.failedTxid.get()) {
+            assert asyncIOE != null :
+              "current txid is among(under) failed txids, but asyncIOE is null!";
+
+            throw asyncIOE;
           }
-        } catch (IOException x) {
-          LOG.debug("Log roll failed and will be retried. (This is not an error)");
+        } catch (InterruptedException e) {
+          LOG.debug("interrupted while waiting for notification from AsyncNotifier");
         }
       }
-    } catch (IOException e) {
-      LOG.fatal("Could not sync. Requesting close of hlog", e);
-      requestLogRoll();
-      throw e;
     }
   }
 
@@ -1480,7 +1560,7 @@
       // coprocessor hook:
       if (!coprocessorHost.preWALWrite(info, logKey, logEdit)) {
         // write to our buffer for the Hlog file.
-        logSyncer.append(new HLog.Entry(logKey, logEdit));
+        addPendingWrites(new HLog.Entry(logKey, logEdit));
       }
       long took = System.currentTimeMillis() - now;
       coprocessorHost.postWALWrite(info, logKey, logEdit);
@@ -1609,8 +1689,11 @@
         WALEdit edit = completeCacheFlushLogEdit();
         HLogKey key = makeKey(encodedRegionName, tableName, logSeqId,
             System.currentTimeMillis(), HConstants.DEFAULT_CLUSTER_ID);
-        logSyncer.append(new Entry(key, edit));
-        txid = this.unflushedEntries.incrementAndGet();
+        synchronized (bufferLock) {
+          addPendingWrites(new Entry(key, edit));
+          txid = this.unflushedEntries.incrementAndGet();
+        }
+        this.asyncWriter.setPendingTxid(txid);
         writeTime.inc(System.currentTimeMillis() - now);
         long len = 0;
         for (KeyValue kv : edit.getKeyValues()) {
@@ -1905,7 +1988,7 @@
 
   /** Provide access to currently deferred sequence num for tests */
   boolean hasDeferredEntries() {
-    return lastDeferredTxid > syncedTillHere;
+    return this.lastDeferredTxid > this.syncedTillHere.get();
   }
 
   /**
Index: src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
===================================================================
--- src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java	(revision 1492522)
+++ src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java	(working copy)
@@ -371,7 +371,6 @@
   private HTableDescriptor htableDescriptor = null;
   private RegionSplitPolicy splitPolicy;
   private final OperationMetrics opMetrics;
-  private final boolean deferredLogSyncDisabled;
 
   /**
    * Should only be used for testing purposes
@@ -398,7 +397,6 @@
     this.maxBusyWaitDuration = 2 * HConstants.DEFAULT_HBASE_RPC_TIMEOUT;
     this.busyWaitDuration = DEFAULT_BUSY_WAIT_DURATION;
     this.maxBusyWaitMultiplier = 2;
-    this.deferredLogSyncDisabled = false;
   }
 
   
@@ -490,10 +488,7 @@
     this.timestampSlop = conf.getLong(
         "hbase.hregion.keyvalue.timestamp.slop.millisecs",
         HConstants.LATEST_TIMESTAMP);
-    // When hbase.regionserver.optionallogflushinterval <= 0 , deferred log sync is disabled.
-    this.deferredLogSyncDisabled = conf.getLong("hbase.regionserver.optionallogflushinterval",
-        1 * 1000) <= 0;
-    
+
     if (rsServices != null) {
       this.rsAccounting = this.rsServices.getRegionServerAccounting();
       // don't initialize coprocessors if not running within a regionserver
@@ -5893,10 +5888,7 @@
         // nothing do to
         break;
       case ASYNC_WAL:
-        // defer the sync, unless we globally can't
-        if (this.deferredLogSyncDisabled) {
-          this.log.sync(txid);
-        }
+        // defer the sync
         break;
       case SYNC_WAL:
       case FSYNC_WAL:
@@ -5911,7 +5903,7 @@
    * check if current region is deferred sync enabled.
    */
   private boolean isDeferredLogSyncEnabled() {
-    return (this.htableDescriptor.isDeferredLogFlush() && !this.deferredLogSyncDisabled);
+    return this.htableDescriptor.isDeferredLogFlush();
   }
 
   /**
