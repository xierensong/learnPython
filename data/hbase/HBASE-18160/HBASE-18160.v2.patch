From 276bd0ce974bcbcedf75b143c7885d4322f18fed Mon Sep 17 00:00:00 2001
From: huzheng <openinx@gmail.com>
Date: Thu, 8 Jun 2017 15:58:42 +0800
Subject: [PATCH] HBASE-18160 Fix incorrect logic in FilterList.filterKeyValue

---
 .../org/apache/hadoop/hbase/filter/FilterList.java | 20 ++++++--
 .../apache/hadoop/hbase/filter/TestFilterList.java | 53 +++++++++++++++++++++-
 2 files changed, 67 insertions(+), 6 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/filter/FilterList.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/filter/FilterList.java
index 7433cca..ec519f5 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/filter/FilterList.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/filter/FilterList.java
@@ -416,17 +416,27 @@ final public class FilterList extends FilterBase {
         if (localRC != ReturnCode.SEEK_NEXT_USING_HINT) {
           seenNonHintReturnCode = true;
         }
+        // FilterList with MUST_PASS_ONE choose the minimal forward step among sub-filter in filter
+        // list. Let's call it: The Minimal Step Rule. So if filter-A in filter list return INCLUDE
+        // and filter-B in filter list return INCLUDE_AND_NEXT_COL, then the filter list should
+        // return INCLUDE. For SEEK_NEXT_USING_HINT, it's more special, because we do not know how
+        // far it will forward, so we use SKIP by default.
         switch (localRC) {
         case INCLUDE:
-          if (rc != ReturnCode.INCLUDE_AND_NEXT_COL) {
-            rc = ReturnCode.INCLUDE;
-          }
+          rc = ReturnCode.INCLUDE;
           transformed = filter.transformCell(transformed);
           break;
         case INCLUDE_AND_NEXT_COL:
-          rc = ReturnCode.INCLUDE_AND_NEXT_COL;
+          if (rc != ReturnCode.INCLUDE) {
+            rc = ReturnCode.INCLUDE_AND_NEXT_COL;
+          }
+          transformed = filter.transformCell(transformed);
+          break;
+        case INCLUDE_AND_SEEK_NEXT_ROW:
+          if (rc != ReturnCode.INCLUDE && rc != ReturnCode.INCLUDE_AND_NEXT_COL) {
+            rc = ReturnCode.INCLUDE_AND_SEEK_NEXT_ROW;
+          }
           transformed = filter.transformCell(transformed);
-          // must continue here to evaluate all filters
           break;
         case NEXT_ROW:
           break;
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilterList.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilterList.java
index cf8a0a0..ccb0317 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilterList.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestFilterList.java
@@ -430,7 +430,7 @@ public class TestFilterList {
     FilterList mpOnefilterList = new FilterList(Operator.MUST_PASS_ONE,
         Arrays.asList(new Filter[] { includeFilter, alternateIncludeFilter, alternateFilter }));
     // INCLUDE, INCLUDE, INCLUDE_AND_NEXT_COL.
-    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL, mpOnefilterList.filterKeyValue(null));
+    assertEquals(ReturnCode.INCLUDE, mpOnefilterList.filterKeyValue(null));
     // INCLUDE, SKIP, INCLUDE.
     assertEquals(Filter.ReturnCode.INCLUDE, mpOnefilterList.filterKeyValue(null));
 
@@ -709,6 +709,57 @@ public class TestFilterList {
     mockFilter.didCellPassToTheFilter = false;
     filter.filterKeyValue(kv4);
     assertTrue(mockFilter.didCellPassToTheFilter);
+
+    mockFilter = new MockFilter(ReturnCode.INCLUDE_AND_SEEK_NEXT_ROW);
+    filter = new FilterList(Operator.MUST_PASS_ONE, mockFilter);
+    filter.filterKeyValue(kv1);
+    assertTrue(mockFilter.didCellPassToTheFilter);
+
+    mockFilter.didCellPassToTheFilter = false;
+    filter.filterKeyValue(kv2);
+    assertFalse(mockFilter.didCellPassToTheFilter);
+
+    mockFilter.didCellPassToTheFilter = false;
+    filter.filterKeyValue(kv3);
+    assertFalse(mockFilter.didCellPassToTheFilter);
+
+    mockFilter.didCellPassToTheFilter = false;
+    filter.filterKeyValue(kv4);
+    assertTrue(mockFilter.didCellPassToTheFilter);
+  }
+
+  @Test
+  public void testTheMinimalRule() throws IOException {
+    KeyValue kv1 = new KeyValue(Bytes.toBytes("row"), Bytes.toBytes("fam"), Bytes.toBytes("a"), 1,
+        Bytes.toBytes("value"));
+    MockFilter filter1 = new MockFilter(ReturnCode.INCLUDE);
+    MockFilter filter2 = new MockFilter(ReturnCode.INCLUDE_AND_NEXT_COL);
+    MockFilter filter3 = new MockFilter(ReturnCode.INCLUDE_AND_SEEK_NEXT_ROW);
+    MockFilter filter4 = new MockFilter(ReturnCode.NEXT_COL);
+    MockFilter filter5 = new MockFilter(ReturnCode.SKIP);
+    MockFilter filter6 = new MockFilter(ReturnCode.SEEK_NEXT_USING_HINT);
+    FilterList filterList1 = new FilterList(Operator.MUST_PASS_ONE, filter1, filter2);
+    assertEquals(filterList1.filterKeyValue(kv1), ReturnCode.INCLUDE);
+
+    FilterList filterList2 = new FilterList(Operator.MUST_PASS_ONE, filter2, filter3);
+    assertEquals(filterList2.filterKeyValue(kv1), ReturnCode.INCLUDE_AND_NEXT_COL);
+
+    FilterList filterList3 = new FilterList(Operator.MUST_PASS_ONE, filter4, filter5, filter6);
+    assertEquals(filterList3.filterKeyValue(kv1), ReturnCode.SKIP);
+
+    FilterList filterList4 = new FilterList(Operator.MUST_PASS_ONE, filter4, filter6);
+    assertEquals(filterList4.filterKeyValue(kv1), ReturnCode.SKIP);
+
+    FilterList filterList5 = new FilterList(Operator.MUST_PASS_ONE, filter3, filter1);
+    assertEquals(filterList5.filterKeyValue(kv1), ReturnCode.INCLUDE);
+
+    FilterList filterList6 =
+        new FilterList(Operator.MUST_PASS_ONE, filter3, filter2, filter1, filter5);
+    assertEquals(filterList6.filterKeyValue(kv1), ReturnCode.INCLUDE);
+
+    FilterList filterList7 = new FilterList(Operator.MUST_PASS_ONE, filter2,
+        new FilterList(Operator.MUST_PASS_ONE, filter3, filter4));
+    assertEquals(filterList7.filterKeyValue(kv1), ReturnCode.INCLUDE_AND_NEXT_COL);
   }
 }
 
-- 
2.7.4

