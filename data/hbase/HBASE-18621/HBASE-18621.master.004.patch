From 487a7a187f349adab149a5c59dcda26ce86c2d5c Mon Sep 17 00:00:00 2001
From: Reid Chan <reidddchan@outlook.com>
Date: Mon, 28 Aug 2017 17:05:54 +0800
Subject: [PATCH] HBASE-18621 Refactor ClusterOptions before applying to code
 base

---
 .../org/apache/hadoop/hbase/ClusterStatus.java     | 214 ++-------------------
 .../java/org/apache/hadoop/hbase/client/Admin.java |   7 +-
 .../org/apache/hadoop/hbase/client/AsyncAdmin.java |   5 +-
 .../hadoop/hbase/client/AsyncHBaseAdmin.java       |   9 +-
 .../org/apache/hadoop/hbase/client/HBaseAdmin.java |   9 +-
 .../hadoop/hbase/client/RawAsyncHBaseAdmin.java    |   9 +-
 .../hadoop/hbase/shaded/protobuf/ProtobufUtil.java |  90 +++++----
 .../hbase/shaded/protobuf/RequestConverter.java    |  13 +-
 .../src/main/protobuf/ClusterStatus.proto          |  20 +-
 .../src/main/protobuf/Master.proto                 |   2 +-
 .../src/main/protobuf/ClusterStatus.proto          |  20 +-
 .../org/apache/hadoop/hbase/master/HMaster.java    |  73 ++++---
 .../hadoop/hbase/master/MasterRpcServices.java     |   2 +-
 .../hbase/client/TestClientClusterStatus.java      |  49 ++---
 14 files changed, 176 insertions(+), 346 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/ClusterStatus.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/ClusterStatus.java
index 0dc4984cde..e3dd941584 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/ClusterStatus.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/ClusterStatus.java
@@ -22,9 +22,11 @@ package org.apache.hadoop.hbase;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.EnumSet;
 import java.util.List;
 import java.util.Map;
 
+import org.apache.hadoop.hbase.ClusterStatus.Status;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.master.RegionState;
 import org.apache.hadoop.io.VersionedWritable;
@@ -47,26 +49,23 @@ import org.apache.hadoop.io.VersionedWritable;
  * <li>Regions in transition at master</li>
  * <li>The unique cluster ID</li>
  * </ul>
- * <tt>{@link Options}</tt> provides a way to filter out infos which unwanted.
- * The following codes will retrieve all the cluster information.
+ * <tt>{@link Status}</tt> provides a way to get desired ClusterStatus information.
+ * The following codes will get all the cluster information.
  * <pre>
  * {@code
  * // Original version still works
  * Admin admin = connection.getAdmin();
  * ClusterStatus status = admin.getClusterStatus();
  * // or below, a new version which has the same effects
- * ClusterStatus status = admin.getClusterStatus(Options.defaultOptions());
+ * ClusterStatus status = admin.getClusterStatus(EnumSet.of(Status.LIVE_SERVERS));
  * }
  * </pre>
- * If information about dead servers and master coprocessors are unwanted,
+ * If information about live servers is the only wanted.
  * then codes in the following way:
  * <pre>
  * {@code
  * Admin admin = connection.getAdmin();
- * ClusterStatus status = admin.getClusterStatus(
- *                                Options.defaultOptions()
- *                                       .excludeDeadServers()
- *                                       .excludeMasterCoprocessors());
+ * ClusterStatus status = admin.getClusterStatus(EnumSet.of(Status.LIVE_SERVERS));
  * }
  * </pre>
  */
@@ -436,194 +435,17 @@ public class ClusterStatus extends VersionedWritable {
   }
 
   /**
-   * Options provides a way to filter out unwanted information.
-   * For compatibility, default options includes all the information about a ClusterStatus.
-   * To filter out unwanted information, use the specific excludeXXX() method.
+   * Kinds of ClusterStatus
    */
-  public static class Options {
-    private boolean includeHBaseVersion = true;
-    private boolean includeLiveServers = true;
-    private boolean includeDeadServers = true;
-    private boolean includeMaster = true;
-    private boolean includeBackupMasters = true;
-    private boolean includeRegionState = true;
-    private boolean includeClusterId = true;
-    private boolean includeMasterCoprocessors = true;
-    private boolean includeBalancerOn = true;
-
-    private Options() {}
-
-    /**
-     * Include all information about a ClusterStatus.
-     */
-    public static Options getDefaultOptions() {
-      return new Options();
-    }
-
-    /**
-     * Filter out hbase verision.
-     */
-    public Options excludeHBaseVersion() {
-      includeHBaseVersion = false;
-      return this;
-    }
-
-    /**
-     * Filter out live servers.
-     */
-    public Options excludeLiveServers() {
-      includeLiveServers = false;
-      return this;
-    }
-
-    /**
-     * Filter out dead servers info.
-     */
-    public Options excludeDeadServers() {
-      includeDeadServers = false;
-      return this;
-    }
-
-    /**
-     * Filter out master info.
-     */
-    public Options excludeMaster() {
-      includeMaster = false;
-      return this;
-    }
-
-    /**
-     * Filter out backup masters info.
-     */
-    public Options excludeBackupMasters() {
-      includeBackupMasters = false;
-      return this;
-    }
-
-    /**
-     * Filter out region state.
-     */
-    public Options excludeRegionState() {
-      includeRegionState = false;
-      return this;
-    }
-
-    /**
-     * Filter out cluster id.
-     */
-    public Options excludeClusterId() {
-      includeClusterId = false;
-      return this;
-    }
-
-    /**
-     * Filter out master's coprocessors info.
-     */
-    public Options excludeMasterCoprocessors() {
-      includeMasterCoprocessors = false;
-      return this;
-    }
-
-    /**
-     * Filter out balancer on info.
-     */
-    public Options excludeBalancerOn() {
-      includeBalancerOn = false;
-      return this;
-    }
-
-    /**
-     * Include hbase version info.
-     */
-    public boolean includeHBaseVersion() {
-      return includeHBaseVersion;
-    }
-
-    /**
-     * Include live servers info.
-     */
-    public boolean includeLiveServers() {
-      return includeLiveServers;
-    }
-
-    /**
-     * Include dead servers info.
-     */
-    public boolean includeDeadServers() {
-      return includeDeadServers;
-    }
-
-    /**
-     * Include master info.
-     */
-    public boolean includeMaster() {
-      return includeMaster;
-    }
-
-    /**
-     * Include backup masters info.
-     */
-    public boolean includeBackupMasters() {
-      return includeBackupMasters;
-    }
-
-    /**
-     * Include region states info.
-     */
-    public boolean includeRegionState() {
-      return includeRegionState;
-    }
-
-    /**
-     * Include cluster id info.
-     */
-    public boolean includeClusterId() {
-      return includeClusterId;
-    }
-
-    /**
-     * Include master's coprocessors.
-     */
-    public boolean includeMasterCoprocessors() {
-      return includeMasterCoprocessors;
-    }
-
-    /**
-     * Include balancer on info.
-     */
-    public boolean includeBalancerOn() {
-      return includeBalancerOn;
-    }
-
-    /**
-     * For an options reusable convenience, reset options to default.
-     */
-    public Options reset() {
-      includeHBaseVersion = true;
-      includeLiveServers = true;
-      includeDeadServers = true;
-      includeMaster = true;
-      includeBackupMasters = true;
-      includeRegionState = true;
-      includeClusterId = true;
-      includeMasterCoprocessors = true;
-      includeBalancerOn = true;
-      return this;
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder builder = new StringBuilder("ClusterStatus info: [");
-      builder.append("include hbase version: " + includeHBaseVersion + ", ");
-      builder.append("include cluster id: " + includeClusterId + ", ");
-      builder.append("include master info: " + includeMaster + ", ");
-      builder.append("include backup masters info: " + includeBackupMasters + ", ");
-      builder.append("include live servers info: " + includeLiveServers + ", ");
-      builder.append("include dead servers info: " + includeDeadServers + ", ");
-      builder.append("include masters coprocessors: " + includeMasterCoprocessors + ", ");
-      builder.append("include region state: " + includeRegionState + ", ");
-      builder.append("include balancer on: " + includeBalancerOn + "]");
-      return builder.toString();
-    }
+  public enum Status {
+    HBASE_VERSION, /** status about hbase version */
+    CLUSTER_ID, /** status about cluster id */
+    BALANCER_ON, /** status about balancer is on or not */
+    LIVE_SERVERS, /** status about live region servers */
+    DEAD_SERVERS, /** status about dead region servers */
+    MASTER, /** status about master */
+    BACKUP_MASTERS, /** status about backup masters */
+    MASTER_COPROCESSORS, /** status about master coprocessors */
+    REGIONS_IN_TRANSITION; /** status about regions in transition */
   }
 }
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Admin.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Admin.java
index 8de9f89fd1..c003f9621b 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Admin.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Admin.java
@@ -22,6 +22,7 @@ import java.io.Closeable;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.EnumSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -31,7 +32,7 @@ import java.util.regex.Pattern;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.Abortable;
 import org.apache.hadoop.hbase.ClusterStatus;
-import org.apache.hadoop.hbase.ClusterStatus.Options;
+import org.apache.hadoop.hbase.ClusterStatus.Status;
 import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
@@ -1322,11 +1323,11 @@ public interface Admin extends Abortable, Closeable {
   ClusterStatus getClusterStatus() throws IOException;
 
   /**
-   * Get cluster status with options to filter out unwanted status.
+   * Get cluster status with a set of {@link Status} to get desired status.
    * @return cluster status
    * @throws IOException if a remote or network exception occurs
    */
-  ClusterStatus getClusterStatus(Options options) throws IOException;
+  ClusterStatus getClusterStatus(EnumSet<Status> clusterStatus) throws IOException;
 
   /**
    * Get {@link RegionLoad} of all regions hosted on a regionserver.
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncAdmin.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncAdmin.java
index bdd047d632..551d536787 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncAdmin.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncAdmin.java
@@ -19,6 +19,7 @@ package org.apache.hadoop.hbase.client;
 
 import java.util.List;
 import java.util.Collection;
+import java.util.EnumSet;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
@@ -27,7 +28,7 @@ import java.util.function.Function;
 import java.util.regex.Pattern;
 
 import org.apache.hadoop.hbase.ClusterStatus;
-import org.apache.hadoop.hbase.ClusterStatus.Options;
+import org.apache.hadoop.hbase.ClusterStatus.Status;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.ProcedureInfo;
 import org.apache.hadoop.hbase.RegionLoad;
@@ -840,7 +841,7 @@ public interface AsyncAdmin {
   /**
    * @return cluster status wrapped by {@link CompletableFuture}
    */
-  CompletableFuture<ClusterStatus> getClusterStatus(Options options);
+  CompletableFuture<ClusterStatus> getClusterStatus(EnumSet<Status> clusterStatus);
 
   /**
    * @return current master server name wrapped by {@link CompletableFuture}
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncHBaseAdmin.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncHBaseAdmin.java
index df077fcdea..19e68262c1 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncHBaseAdmin.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncHBaseAdmin.java
@@ -18,6 +18,7 @@
 package org.apache.hadoop.hbase.client;
 
 import java.util.Collection;
+import java.util.EnumSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -36,7 +37,7 @@ import org.apache.hadoop.hbase.shaded.io.netty.util.TimerTask;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.ClusterStatus;
-import org.apache.hadoop.hbase.ClusterStatus.Options;
+import org.apache.hadoop.hbase.ClusterStatus.Status;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.ProcedureInfo;
 import org.apache.hadoop.hbase.RegionLoad;
@@ -495,12 +496,12 @@ public class AsyncHBaseAdmin implements AsyncAdmin {
 
   @Override
   public CompletableFuture<ClusterStatus> getClusterStatus() {
-    return getClusterStatus(Options.getDefaultOptions());
+    return getClusterStatus(EnumSet.allOf(Status.class));
   }
 
   @Override
-  public CompletableFuture<ClusterStatus> getClusterStatus(Options options) {
-    return wrap(rawAdmin.getClusterStatus(options));
+  public CompletableFuture<ClusterStatus> getClusterStatus(EnumSet<Status> status) {
+    return wrap(rawAdmin.getClusterStatus(status));
   }
 
   @Override
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
index a2fa7e0d20..e267cc8299 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
@@ -24,6 +24,7 @@ import java.io.InterruptedIOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.LinkedList;
@@ -45,7 +46,7 @@ import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.Abortable;
 import org.apache.hadoop.hbase.ClusterStatus;
-import org.apache.hadoop.hbase.ClusterStatus.Options;
+import org.apache.hadoop.hbase.ClusterStatus.Status;
 import org.apache.hadoop.hbase.CompoundConfiguration;
 import org.apache.hadoop.hbase.DoNotRetryIOException;
 import org.apache.hadoop.hbase.HBaseConfiguration;
@@ -2075,16 +2076,16 @@ public class HBaseAdmin implements Admin {
 
   @Override
   public ClusterStatus getClusterStatus() throws IOException {
-    return getClusterStatus(Options.getDefaultOptions());
+    return getClusterStatus(EnumSet.allOf(Status.class));
   }
 
   @Override
-  public ClusterStatus getClusterStatus(Options options) throws IOException {
+  public ClusterStatus getClusterStatus(EnumSet<Status> status) throws IOException {
     return executeCallable(new MasterCallable<ClusterStatus>(getConnection(),
         this.rpcControllerFactory) {
       @Override
       protected ClusterStatus rpcCall() throws Exception {
-        GetClusterStatusRequest req = RequestConverter.buildGetClusterStatusRequest(options);
+        GetClusterStatusRequest req = RequestConverter.buildGetClusterStatusRequest(status);
         return ProtobufUtil.convert(
           master.getClusterStatus(getRpcController(), req).getClusterStatus());
       }
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncHBaseAdmin.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncHBaseAdmin.java
index c5eb168820..6d0397e5f3 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncHBaseAdmin.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncHBaseAdmin.java
@@ -24,6 +24,7 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
@@ -51,6 +52,7 @@ import org.apache.commons.io.IOUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.ClusterStatus;
+import org.apache.hadoop.hbase.ClusterStatus.Status;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HRegionLocation;
 import org.apache.hadoop.hbase.MetaTableAccessor;
@@ -68,7 +70,6 @@ import org.apache.hadoop.hbase.TableNotDisabledException;
 import org.apache.hadoop.hbase.TableNotEnabledException;
 import org.apache.hadoop.hbase.TableNotFoundException;
 import org.apache.hadoop.hbase.UnknownRegionException;
-import org.apache.hadoop.hbase.ClusterStatus.Options;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.client.AsyncRpcRetryingCallerFactory.AdminRequestCallerBuilder;
 import org.apache.hadoop.hbase.client.AsyncRpcRetryingCallerFactory.MasterRequestCallerBuilder;
@@ -2422,17 +2423,17 @@ public class RawAsyncHBaseAdmin implements AsyncAdmin {
 
   @Override
   public CompletableFuture<ClusterStatus> getClusterStatus() {
-    return getClusterStatus(Options.getDefaultOptions());
+    return getClusterStatus(EnumSet.allOf(Status.class));
   }
 
   @Override
-  public CompletableFuture<ClusterStatus> getClusterStatus(Options options) {
+  public CompletableFuture<ClusterStatus>getClusterStatus(EnumSet<Status> status) {
     return this
         .<ClusterStatus> newMasterCaller()
         .action(
           (controller, stub) -> this
               .<GetClusterStatusRequest, GetClusterStatusResponse, ClusterStatus> call(controller,
-                stub, RequestConverter.buildGetClusterStatusRequest(options),
+                stub, RequestConverter.buildGetClusterStatusRequest(status),
                 (s, c, req, done) -> s.getClusterStatus(c, req, done),
                 resp -> ProtobufUtil.convert(resp.getClusterStatus()))).call();
   }
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/ProtobufUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/ProtobufUtil.java
index b6006f0811..2e0a8d6e24 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/ProtobufUtil.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/ProtobufUtil.java
@@ -25,6 +25,7 @@ import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
@@ -45,6 +46,7 @@ import org.apache.hadoop.hbase.CellScanner;
 import org.apache.hadoop.hbase.CellUtil;
 import org.apache.hadoop.hbase.ClusterId;
 import org.apache.hadoop.hbase.ClusterStatus;
+import org.apache.hadoop.hbase.ClusterStatus.Status;
 import org.apache.hadoop.hbase.DoNotRetryIOException;
 import org.apache.hadoop.hbase.HBaseConfiguration;
 import org.apache.hadoop.hbase.HBaseIOException;
@@ -2988,42 +2990,58 @@ public final class ProtobufUtil {
   }
 
   /**
-   * Convert proto ClusterStatus.Options to ClusterStatusProtos.Options
-   * @param opt
-   * @return proto ClusterStatus.Options
-   */
-  public static ClusterStatus.Options toOptions (ClusterStatusProtos.Options opt) {
-    ClusterStatus.Options option = ClusterStatus.Options.getDefaultOptions();
-    if (!opt.getIncludeHbaseVersion()) option.excludeHBaseVersion();
-    if (!opt.getIncludeLiveServers()) option.excludeLiveServers();
-    if (!opt.getIncludeDeadServers()) option.excludeDeadServers();
-    if (!opt.getIncludeRegionsState()) option.excludeRegionState();
-    if (!opt.getIncludeClusterId()) option.excludeClusterId();
-    if (!opt.getIncludeMasterCoprocessors()) option.excludeMasterCoprocessors();
-    if (!opt.getIncludeMaster()) option.excludeMaster();
-    if (!opt.getIncludeBackupMasters()) option.excludeBackupMasters();
-    if (!opt.getIncludeBalancerOn()) option.excludeBalancerOn();
-    return option;
-  }
-
-  /**
-   * Convert ClusterStatus.Options to proto ClusterStatusProtos.Options
-   * @param opt
-   * @return ClusterStatus.Options
-   */
-  public static ClusterStatusProtos.Options toOptions(ClusterStatus.Options opt) {
-    ClusterStatusProtos.Options.Builder option =
-        ClusterStatusProtos.Options.newBuilder();
-    option.setIncludeHbaseVersion(opt.includeHBaseVersion())
-          .setIncludeLiveServers(opt.includeLiveServers())
-          .setIncludeDeadServers(opt.includeDeadServers())
-          .setIncludeRegionsState(opt.includeRegionState())
-          .setIncludeClusterId(opt.includeClusterId())
-          .setIncludeMasterCoprocessors(opt.includeMasterCoprocessors())
-          .setIncludeMaster(opt.includeMaster())
-          .setIncludeBackupMasters(opt.includeBackupMasters())
-          .setIncludeBalancerOn(opt.includeBalancerOn());
-    return option.build();
+   * Convert ClusterStatusProtos.Status to ClusterStatus.Status
+   * @param status a ClusterStatusProtos.Status
+   * @return converted ClusterStatus.Status
+   */
+  public static ClusterStatus.Status toStatus(ClusterStatusProtos.Status status) {
+    switch (status) {
+      case HBASE_VERSION: return ClusterStatus.Status.HBASE_VERSION;
+      case LIVE_SERVERS: return ClusterStatus.Status.LIVE_SERVERS;
+      case DEAD_SERVERS: return ClusterStatus.Status.DEAD_SERVERS;
+      case REGIONS_IN_TRANSITION: return ClusterStatus.Status.REGIONS_IN_TRANSITION;
+      case CLUSTER_ID: return ClusterStatus.Status.CLUSTER_ID;
+      case MASTER_COPROCESSORS: return ClusterStatus.Status.MASTER_COPROCESSORS;
+      case MASTER: return ClusterStatus.Status.MASTER;
+      case BACKUP_MASTERS: return ClusterStatus.Status.BACKUP_MASTERS;
+      case BALANCER_ON: return ClusterStatus.Status.BALANCER_ON;
+      // should not reach here
+      default: throw new IllegalArgumentException("Invalid status: " + status);
+    }
+  }
+
+  /**
+   * Convert ClusterStatus.Status to ClusterStatusProtos.Status
+   * @param status a ClusterStatus.Status
+   * @return converted ClusterStatusProtos.Status
+   */
+  public static ClusterStatusProtos.Status toStatus(ClusterStatus.Status status) {
+    switch (status) {
+      case HBASE_VERSION: return ClusterStatusProtos.Status.HBASE_VERSION;
+      case LIVE_SERVERS: return ClusterStatusProtos.Status.LIVE_SERVERS;
+      case DEAD_SERVERS: return ClusterStatusProtos.Status.DEAD_SERVERS;
+      case REGIONS_IN_TRANSITION: return ClusterStatusProtos.Status.REGIONS_IN_TRANSITION;
+      case CLUSTER_ID: return ClusterStatusProtos.Status.CLUSTER_ID;
+      case MASTER_COPROCESSORS: return ClusterStatusProtos.Status.MASTER_COPROCESSORS;
+      case MASTER: return ClusterStatusProtos.Status.MASTER;
+      case BACKUP_MASTERS: return ClusterStatusProtos.Status.BACKUP_MASTERS;
+      case BALANCER_ON: return ClusterStatusProtos.Status.BALANCER_ON;
+      // should not reach here
+      default: throw new IllegalArgumentException("Invalid status: " + status);
+    }
+  }
+
+  /**
+   * Convert a list of ClusterStatusProtos.Status to EnumSet<ClusterStatus.Status>
+   * @param status
+   * @return an enum set of ClusterStatus.Status
+   */
+  public static EnumSet<Status> getStatus(List<ClusterStatusProtos.Status> status) {
+    EnumSet<Status> result = EnumSet.noneOf(Status.class);
+    for (ClusterStatusProtos.Status sts : status) {
+      result.add(toStatus(sts));
+    }
+    return result;
   }
 
   /**
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/RequestConverter.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/RequestConverter.java
index e620a9103c..051cddbccf 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/RequestConverter.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/RequestConverter.java
@@ -20,13 +20,14 @@ package org.apache.hadoop.hbase.shaded.protobuf;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.EnumSet;
 import java.util.List;
 import java.util.Optional;
 import java.util.Set;
 import java.util.regex.Pattern;
 
 import org.apache.hadoop.hbase.CellScannable;
-import org.apache.hadoop.hbase.ClusterStatus.Options;
+import org.apache.hadoop.hbase.ClusterStatus.Status;
 import org.apache.hadoop.hbase.DoNotRetryIOException;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.HRegionInfo;
@@ -1516,10 +1517,12 @@ public final class RequestConverter {
    *
    * @return A GetClusterStatusRequest
    */
-  public static GetClusterStatusRequest buildGetClusterStatusRequest(Options opt) {
-    return GetClusterStatusRequest.newBuilder()
-                                  .setClusterOptions(ProtobufUtil.toOptions(opt))
-                                  .build();
+  public static GetClusterStatusRequest buildGetClusterStatusRequest(EnumSet<Status> status) {
+    GetClusterStatusRequest.Builder request = GetClusterStatusRequest.newBuilder();
+    for (Status wantedStatus : status) {
+      request.addClusterStatus(ProtobufUtil.toStatus(wantedStatus));
+    }
+    return request.build();
   }
 
   /**
diff --git a/hbase-protocol-shaded/src/main/protobuf/ClusterStatus.proto b/hbase-protocol-shaded/src/main/protobuf/ClusterStatus.proto
index d647bb1fa6..eb9d6deefa 100644
--- a/hbase-protocol-shaded/src/main/protobuf/ClusterStatus.proto
+++ b/hbase-protocol-shaded/src/main/protobuf/ClusterStatus.proto
@@ -226,14 +226,14 @@ message ClusterStatus {
   optional bool balancer_on = 9;
 }
 
-message Options {
-  optional bool include_hbase_version = 1 [default = true];
-  optional bool include_live_servers = 2 [default = true];
-  optional bool include_dead_servers = 3 [default = true];
-  optional bool include_regions_state = 4 [default = true];
-  optional bool include_cluster_id = 5 [default = true];
-  optional bool include_master_coprocessors = 6 [default = true];
-  optional bool include_master = 7 [default = true];
-  optional bool include_backup_masters = 8 [default = true];
-  optional bool include_balancer_on = 9 [default = true];
+enum Status {
+  HBASE_VERSION = 0;
+  CLUSTER_ID = 1;
+  LIVE_SERVERS = 2;
+  DEAD_SERVERS = 3;
+  MASTER = 4;
+  BACKUP_MASTERS = 5;
+  MASTER_COPROCESSORS = 6;
+  REGIONS_IN_TRANSITION = 7;
+  BALANCER_ON = 8;
 }
diff --git a/hbase-protocol-shaded/src/main/protobuf/Master.proto b/hbase-protocol-shaded/src/main/protobuf/Master.proto
index 33f9bf31ff..15e5c6a33c 100644
--- a/hbase-protocol-shaded/src/main/protobuf/Master.proto
+++ b/hbase-protocol-shaded/src/main/protobuf/Master.proto
@@ -485,7 +485,7 @@ message GetTableStateResponse {
 }
 
 message GetClusterStatusRequest {
-  required Options cluster_options = 1;
+  repeated Status cluster_status = 1;
 }
 
 message GetClusterStatusResponse {
diff --git a/hbase-protocol/src/main/protobuf/ClusterStatus.proto b/hbase-protocol/src/main/protobuf/ClusterStatus.proto
index 4ae3230aeb..37f12c52e5 100644
--- a/hbase-protocol/src/main/protobuf/ClusterStatus.proto
+++ b/hbase-protocol/src/main/protobuf/ClusterStatus.proto
@@ -226,14 +226,14 @@ message ClusterStatus {
   optional bool balancer_on = 9;
 }
 
-message Options {
-  optional bool include_hbase_version = 1 [default = true];
-  optional bool include_live_servers = 2 [default = true];
-  optional bool include_dead_servers = 3 [default = true];
-  optional bool include_regions_state = 4 [default = true];
-  optional bool include_cluster_id = 5 [default = true];
-  optional bool include_master_coprocessors = 6 [default = true];
-  optional bool include_master = 7 [default = true];
-  optional bool include_backup_masters = 8 [default = true];
-  optional bool include_balancer_on = 9 [default = true];
+enum Status {
+  HBASE_VERSION = 0;
+  CLUSTER_ID = 1;
+  LIVE_SERVERS = 2;
+  DEAD_SERVERS = 3;
+  MASTER = 4;
+  BACKUP_MASTERS = 5;
+  MASTER_COPROCESSORS = 6;
+  REGIONS_IN_TRANSITION = 7;
+  BALANCER_ON = 8;
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
index 0912e067de..012171c1b2 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
@@ -29,6 +29,7 @@ import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Comparator;
+import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -56,7 +57,7 @@ import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.ClusterStatus;
-import org.apache.hadoop.hbase.ClusterStatus.Options;
+import org.apache.hadoop.hbase.ClusterStatus.Status;
 import org.apache.hadoop.hbase.CoordinatedStateException;
 import org.apache.hadoop.hbase.CoordinatedStateManager;
 import org.apache.hadoop.hbase.DoNotRetryIOException;
@@ -2460,43 +2461,51 @@ public class HMaster extends HRegionServer implements MasterServices {
    * @return cluster status
    */
   public ClusterStatus getClusterStatus() throws InterruptedIOException {
-    return getClusterStatus(Options.getDefaultOptions());
+    return getClusterStatus(EnumSet.allOf(Status.class));
   }
 
   /**
    * @return cluster status
    */
-  public ClusterStatus getClusterStatus(Options options) throws InterruptedIOException {
-    if (LOG.isDebugEnabled()) {
-      LOG.debug("Retrieving cluster status info. " + options);
-    }
+  public ClusterStatus getClusterStatus(EnumSet<Status> clusterStatus) throws InterruptedIOException {
     ClusterStatus.Builder builder = ClusterStatus.newBuilder();
-    if (options.includeHBaseVersion()) {
-      builder.setHBaseVersion(VersionInfo.getVersion());
-    }
-    if (options.includeClusterId()) {
-      builder.setClusterId(getClusterId());
-    }
-    if (options.includeLiveServers() && serverManager != null) {
-      builder.setLiveServers(serverManager.getOnlineServers());
-    }
-    if (options.includeDeadServers() && serverManager != null) {
-      builder.setDeadServers(serverManager.getDeadServers().copyServerNames());
-    }
-    if (options.includeMaster()) {
-      builder.setMaster(getServerName());
-    }
-    if (options.includeBackupMasters()) {
-      builder.setBackupMasters(getBackupMasters());
-    }
-    if (options.includeRegionState() && assignmentManager != null) {
-      builder.setRegionState(assignmentManager.getRegionStates().getRegionsStateInTransition());
-    }
-    if (options.includeMasterCoprocessors() && cpHost != null) {
-      builder.setMasterCoprocessors(getMasterCoprocessors());
-    }
-    if (options.includeBalancerOn() && loadBalancerTracker != null) {
-      builder.setBalancerOn(loadBalancerTracker.isBalancerOn());
+    for (Status status : clusterStatus) {
+      switch (status) {
+        case HBASE_VERSION: builder.setHBaseVersion(VersionInfo.getVersion()); break;
+        case CLUSTER_ID: builder.setClusterId(getClusterId()); break;
+        case MASTER: builder.setMaster(getServerName()); break;
+        case BACKUP_MASTERS: builder.setBackupMasters(getBackupMasters()); break;
+        case LIVE_SERVERS: {
+          if (serverManager != null) {
+            builder.setLiveServers(serverManager.getOnlineServers());
+          }
+          break;
+        }
+        case DEAD_SERVERS: {
+          if (serverManager != null) {
+            builder.setDeadServers(serverManager.getDeadServers().copyServerNames());
+          }
+          break;
+        }
+        case MASTER_COPROCESSORS: {
+          if (cpHost != null) {
+            builder.setMasterCoprocessors(getMasterCoprocessors());
+          }
+          break;
+        }
+        case REGIONS_IN_TRANSITION: {
+          if (assignmentManager != null) {
+            builder.setRegionState(assignmentManager.getRegionStates().getRegionsStateInTransition());
+          }
+          break;
+        }
+        case BALANCER_ON: {
+          if (loadBalancerTracker != null) {
+            builder.setBalancerOn(loadBalancerTracker.isBalancerOn());
+          }
+          break;
+        }
+      }
     }
     return builder.build();
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterRpcServices.java
index 3ec2c45c64..8eeef04a35 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterRpcServices.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterRpcServices.java
@@ -762,7 +762,7 @@ public class MasterRpcServices extends RSRpcServices
     try {
       master.checkInitialized();
       response.setClusterStatus(ProtobufUtil.convert(
-        master.getClusterStatus(ProtobufUtil.toOptions(req.getClusterOptions()))));
+        master.getClusterStatus(ProtobufUtil.getStatus(req.getClusterStatusList()))));
     } catch (IOException e) {
       throw new ServiceException(e);
     }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestClientClusterStatus.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestClientClusterStatus.java
index 484ee06e4c..1f88d79f41 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestClientClusterStatus.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestClientClusterStatus.java
@@ -17,18 +17,18 @@
  */
 package org.apache.hadoop.hbase.client;
 
+import java.util.EnumSet;
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.ClusterStatus;
 import org.apache.hadoop.hbase.HBaseConfiguration;
-import org.apache.hadoop.hbase.ClusterStatus.Options;
+import org.apache.hadoop.hbase.ClusterStatus.Status;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.MiniHBaseCluster;
 import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.master.HMaster;
-import org.apache.hadoop.hbase.master.LoadBalancer;
 import org.apache.hadoop.hbase.regionserver.HRegionServer;
 import org.apache.hadoop.hbase.security.User;
 import org.apache.hadoop.hbase.testclassification.SmallTests;
@@ -73,7 +73,7 @@ public class TestClientClusterStatus {
   @Test
   public void testDefaults() throws Exception {
     ClusterStatus origin = ADMIN.getClusterStatus();
-    ClusterStatus defaults = ADMIN.getClusterStatus(Options.getDefaultOptions());
+    ClusterStatus defaults = ADMIN.getClusterStatus(EnumSet.allOf(Status.class));
     Assert.assertEquals(origin.getHBaseVersion(), defaults.getHBaseVersion());
     Assert.assertEquals(origin.getClusterId(), defaults.getClusterId());
     Assert.assertTrue(origin.getAverageLoad() == defaults.getAverageLoad());
@@ -84,18 +84,8 @@ public class TestClientClusterStatus {
   }
 
   @Test
-  public void testExclude() throws Exception {
-    ClusterStatus.Options options = Options.getDefaultOptions();
-    // Only retrieve master's coprocessors which are null in this test env.
-    options.excludeHBaseVersion()
-           .excludeBackupMasters()
-           .excludeBalancerOn()
-           .excludeClusterId()
-           .excludeLiveServers()
-           .excludeDeadServers()
-           .excludeMaster()
-           .excludeRegionState();
-    ClusterStatus status = ADMIN.getClusterStatus(options);
+  public void testNone() throws Exception {
+    ClusterStatus status = ADMIN.getClusterStatus(EnumSet.noneOf(Status.class));
     // Other cluster status info should be either null or empty.
     Assert.assertTrue(status.getMasterCoprocessors().length == 0);
     Assert.assertNull(status.getHBaseVersion());
@@ -117,7 +107,7 @@ public class TestClientClusterStatus {
     CompletableFuture<ClusterStatus> originFuture =
         asyncAdmin.getClusterStatus();
     CompletableFuture<ClusterStatus> defaultsFuture =
-        asyncAdmin.getClusterStatus(Options.getDefaultOptions());
+        asyncAdmin.getClusterStatus(EnumSet.allOf(Status.class));
     ClusterStatus origin = originFuture.get();
     ClusterStatus defaults = defaultsFuture.get();
     Assert.assertEquals(origin.getHBaseVersion(), defaults.getHBaseVersion());
@@ -143,14 +133,7 @@ public class TestClientClusterStatus {
       }
     }
     // Retrieve live servers and dead servers info.
-    ClusterStatus.Options options = Options.getDefaultOptions();
-    options.excludeHBaseVersion()
-           .excludeBackupMasters()
-           .excludeBalancerOn()
-           .excludeClusterId()
-           .excludeMaster()
-           .excludeMasterCoprocessors()
-           .excludeRegionState();
+    EnumSet<Status> options = EnumSet.of(Status.LIVE_SERVERS, Status.DEAD_SERVERS);
     ClusterStatus status = ADMIN.getClusterStatus(options);
     Assert.assertNotNull(status);
     Assert.assertNotNull(status.getServers());
@@ -187,14 +170,7 @@ public class TestClientClusterStatus {
     Assert.assertEquals(1, numActive);
     Assert.assertEquals(MASTERS, masterThreads.size());
     // Retrieve master and backup masters infos only.
-    ClusterStatus.Options options = Options.getDefaultOptions();
-    options.excludeHBaseVersion()
-           .excludeBalancerOn()
-           .excludeClusterId()
-           .excludeLiveServers()
-           .excludeDeadServers()
-           .excludeMasterCoprocessors()
-           .excludeRegionState();
+    EnumSet<Status> options = EnumSet.of(Status.MASTER, Status.BACKUP_MASTERS);
     ClusterStatus status = ADMIN.getClusterStatus(options);
     Assert.assertTrue(status.getMaster().equals(activeName));
     Assert.assertEquals(MASTERS - 1, status.getBackupMastersSize());
@@ -202,12 +178,9 @@ public class TestClientClusterStatus {
 
   @Test
   public void testOtherStatusInfos() throws Exception {
-    ClusterStatus.Options options = Options.getDefaultOptions();
-    options.excludeMaster()
-           .excludeBackupMasters()
-           .excludeRegionState()
-           .excludeLiveServers()
-           .excludeBackupMasters();
+    EnumSet<Status> options =
+        EnumSet.of(Status.MASTER_COPROCESSORS, Status.HBASE_VERSION, 
+                   Status.CLUSTER_ID, Status.BALANCER_ON);
     ClusterStatus status = ADMIN.getClusterStatus(options);
     Assert.assertTrue(status.getMasterCoprocessors().length == 0);
     Assert.assertNotNull(status.getHBaseVersion());
-- 
2.11.0 (Apple Git-81)

