diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
index ca721e2..d7e3008 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
@@ -385,7 +385,7 @@ public class HMaster extends HRegionServer implements MasterServices, Server {
     // should we check encryption settings at master side, default true
     this.masterCheckEncryption = conf.getBoolean("hbase.master.check.encryption", true);
 
-    this.metricsMaster = new MetricsMaster( new MetricsMasterWrapperImpl(this));
+    this.metricsMaster = new MetricsMaster(new MetricsMasterWrapperImpl(this));
 
     // preload table descriptor at startup
     this.preLoadTableDescriptors = conf.getBoolean("hbase.master.preload.tabledescriptors", true);
@@ -1070,7 +1070,7 @@ public class HMaster extends HRegionServer implements MasterServices, Server {
    this.logCleaner =
       new LogCleaner(cleanerInterval,
          this, conf, getMasterFileSystem().getFileSystem(),
-         getMasterFileSystem().getOldLogDir());
+         getMasterFileSystem().getOldLogBaseDir());
     getChoreService().scheduleChore(logCleaner);
 
    //start the hfile archive cleaner thread
diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterFileSystem.java hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterFileSystem.java
index 9b95ae7..4e34098 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterFileSystem.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterFileSystem.java
@@ -83,8 +83,8 @@ public class MasterFileSystem {
   private final FileSystem fs;
   // Is the fileystem ok?
   private volatile boolean fsOk = true;
-  // The Path to the old logs dir
-  private final Path oldLogDir;
+  // The base path to the old logs dir
+  private final Path oldLogBaseDir;
   // root hbase directory on the FS
   private final Path rootdir;
   // hbase temp directory used for table construction and deletion
@@ -128,7 +128,7 @@ public class MasterFileSystem {
     fs.setConf(conf);
     // setup the filesystem variable
     // set up the archived logs path
-    this.oldLogDir = createInitialFileSystemLayout();
+    this.oldLogBaseDir = createInitialFileSystemLayout();
     HFileSystem.addLocationsOrderInterceptor(conf);
     this.splitLogManager =
         new SplitLogManager(master, master.getConfiguration(), master, services,
@@ -147,7 +147,7 @@ public class MasterFileSystem {
    * <li>Check if the meta region exists and is readable, if not create it.
    * Create hbase.version and the hbase:meta directory if not one.
    * </li>
-   * <li>Create a log archive directory for RS to put archived logs</li>
+   * <li>Create a log base archive directory for RS to put archived logs</li>
    * </ol>
    * Idempotent.
    */
@@ -158,14 +158,14 @@ public class MasterFileSystem {
     // check if temp directory exists and clean it
     checkTempDir(this.tempdir, conf, this.fs);
 
-    Path oldLogDir = new Path(this.rootdir, HConstants.HREGION_OLDLOGDIR_NAME);
+    Path oldLogBaseDir = new Path(this.rootdir, HConstants.HREGION_OLDLOGDIR_NAME);
 
     // Make sure the region servers can archive their old logs
-    if(!this.fs.exists(oldLogDir)) {
-      this.fs.mkdirs(oldLogDir);
+    if(!this.fs.exists(oldLogBaseDir)) {
+      this.fs.mkdirs(oldLogBaseDir);
     }
 
-    return oldLogDir;
+    return oldLogBaseDir;
   }
 
   public FileSystem getFileSystem() {
@@ -173,11 +173,11 @@ public class MasterFileSystem {
   }
 
   /**
-   * Get the directory where old logs go
+   * Get the base directory where old logs go
    * @return the dir
    */
-  public Path getOldLogDir() {
-    return this.oldLogDir;
+  public Path getOldLogBaseDir() {
+    return this.oldLogBaseDir;
   }
 
   /**
@@ -479,7 +479,8 @@ public class MasterFileSystem {
     // Make sure cluster ID exists
     if (!FSUtils.checkClusterIdExists(fs, rd, c.getInt(
         HConstants.THREAD_WAKE_FREQUENCY, 10 * 1000))) {
-      FSUtils.setClusterId(fs, rd, new ClusterId(), c.getInt(HConstants.THREAD_WAKE_FREQUENCY, 10 * 1000));
+      FSUtils.setClusterId(fs, rd, new ClusterId(),
+        c.getInt(HConstants.THREAD_WAKE_FREQUENCY, 10 * 1000));
     }
     clusterId = FSUtils.getClusterId(fs, rd);
 
diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
index 315659a..d1c4486 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
@@ -1610,7 +1610,7 @@ public class HRegionServer extends HasThread implements
    */
   private WALFactory setupWALAndReplication() throws IOException {
     // TODO Replication make assumptions here based on the default filesystem impl
-    final Path oldLogDir = new Path(rootDir, HConstants.HREGION_OLDLOGDIR_NAME);
+    final Path oldLogBaseDir = new Path(rootDir, HConstants.HREGION_OLDLOGDIR_NAME);
     final String logName = DefaultWALProvider.getWALDirectoryName(this.serverName.toString());
 
     Path logdir = new Path(rootDir, logName);
@@ -1622,7 +1622,7 @@ public class HRegionServer extends HasThread implements
 
     // Instantiate replication manager if replication enabled.  Pass it the
     // log directories.
-    createNewReplicationInstance(conf, this, this.fs, logdir, oldLogDir);
+    createNewReplicationInstance(conf, this, this.fs, logdir, oldLogBaseDir);
 
     // listeners the wal factory will add to wals it creates.
     final List<WALActionsListener> listeners = new ArrayList<WALActionsListener>();
@@ -2596,7 +2596,7 @@ public class HRegionServer extends HasThread implements
    * Load the replication service objects, if any
    */
   static private void createNewReplicationInstance(Configuration conf,
-    HRegionServer server, FileSystem fs, Path logDir, Path oldLogDir) throws IOException{
+    HRegionServer server, FileSystem fs, Path logDir, Path oldLogBaseDir) throws IOException{
 
     // If replication is not enabled, then return immediately.
     if (!conf.getBoolean(HConstants.REPLICATION_ENABLE_KEY,
@@ -2617,22 +2617,22 @@ public class HRegionServer extends HasThread implements
     if (sourceClassname.equals(sinkClassname)) {
       server.replicationSourceHandler = (ReplicationSourceService)
                                          newReplicationInstance(sourceClassname,
-                                         conf, server, fs, logDir, oldLogDir);
+                                         conf, server, fs, logDir, oldLogBaseDir);
       server.replicationSinkHandler = (ReplicationSinkService)
                                          server.replicationSourceHandler;
     } else {
       server.replicationSourceHandler = (ReplicationSourceService)
                                          newReplicationInstance(sourceClassname,
-                                         conf, server, fs, logDir, oldLogDir);
+                                         conf, server, fs, logDir, oldLogBaseDir);
       server.replicationSinkHandler = (ReplicationSinkService)
                                          newReplicationInstance(sinkClassname,
-                                         conf, server, fs, logDir, oldLogDir);
+                                         conf, server, fs, logDir, oldLogBaseDir);
     }
   }
 
   static private ReplicationService newReplicationInstance(String classname,
     Configuration conf, HRegionServer server, FileSystem fs, Path logDir,
-    Path oldLogDir) throws IOException{
+    Path oldLogBaseDir) throws IOException{
 
     Class<?> clazz = null;
     try {
@@ -2645,7 +2645,7 @@ public class HRegionServer extends HasThread implements
     // create an instance of the replication object.
     ReplicationService service = (ReplicationService)
                               ReflectionUtils.newInstance(clazz, conf);
-    service.initialize(server, fs, logDir, oldLogDir);
+    service.initialize(server, fs, logDir, oldLogBaseDir);
     return service;
   }
 
diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReplicationService.java hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReplicationService.java
index 25a27a9..6af1379 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReplicationService.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReplicationService.java
@@ -40,7 +40,7 @@ public interface ReplicationService {
    * @throws IOException
    */
   void initialize(
-    Server rs, FileSystem fs, Path logdir, Path oldLogDir
+    Server rs, FileSystem fs, Path logdir, Path oldLogBaseDir
   ) throws IOException;
 
   /**
diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/FSHLog.java hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/FSHLog.java
index fa69d63..aee61f8 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/FSHLog.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/FSHLog.java
@@ -396,7 +396,7 @@ public class FSHLog implements WAL {
    */
   public FSHLog(final FileSystem fs, final Path root, final String logDir, final Configuration conf)
       throws IOException {
-    this(fs, root, logDir, HConstants.HREGION_OLDLOGDIR_NAME, conf, null, true, null, null);
+    this(fs, root, logDir, null, conf, null, true, null, null);
   }
 
   /**
@@ -430,7 +430,12 @@ public class FSHLog implements WAL {
       throws IOException {
     this.fs = fs;
     this.fullPathLogDir = new Path(rootDir, logDir);
-    this.fullPathArchiveDir = new Path(rootDir, archiveDir);
+    if (archiveDir != null) {
+      this.fullPathArchiveDir = new Path(rootDir, archiveDir);
+    } else {
+      this.fullPathArchiveDir =
+          new Path(rootDir, DefaultWALProvider.getOldWALDirectoryName(fullPathLogDir.getName()));
+    }
     this.conf = conf;
 
     if (!fs.exists(fullPathLogDir) && !fs.mkdirs(fullPathLogDir)) {
@@ -880,6 +885,12 @@ public class FSHLog implements WAL {
   }
 
   private void archiveLogFile(final Path p) throws IOException {
+    if (!fs.exists(this.fullPathArchiveDir)) {
+      if (!fs.mkdirs(this.fullPathArchiveDir)) {
+        throw new IOException("Unable to mkdir " + this.fullPathArchiveDir);
+      }
+    }
+
     Path newPath = getWALArchivePath(this.fullPathArchiveDir, p);
     // Tell our listeners that a log is going to be archived.
     if (!this.listeners.isEmpty()) {
@@ -1537,7 +1548,9 @@ public class FSHLog implements WAL {
     }
 
     final Path baseDir = FSUtils.getRootDir(conf);
-    final Path archiveDir = new Path(baseDir, HConstants.HREGION_OLDLOGDIR_NAME);
+    String serverName = DefaultWALProvider.getServerNameFromWALDirectoryName(p).getServerName();
+    final Path archiveDir =
+        new Path(baseDir, DefaultWALProvider.getOldWALDirectoryName(serverName));
     WALSplitter.split(baseDir, p, archiveDir, fs, conf, WALFactory.getInstance(conf));
   }
 
diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/Replication.java hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/Replication.java
index b396dfc..8bf4b3b 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/Replication.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/Replication.java
@@ -90,12 +90,12 @@ public class Replication extends WALActionsListener.Base implements
    * @param server Hosting server
    * @param fs handle to the filesystem
    * @param logDir
-   * @param oldLogDir directory where logs are archived
+   * @param oldLogBaseDir the base directory where old logs are archived
    * @throws IOException
    */
   public Replication(final Server server, final FileSystem fs,
-      final Path logDir, final Path oldLogDir) throws IOException{
-    initialize(server, fs, logDir, oldLogDir);
+      final Path logDir, final Path oldLogBaseDir) throws IOException{
+    initialize(server, fs, logDir, oldLogBaseDir);
   }
 
   /**
@@ -105,7 +105,7 @@ public class Replication extends WALActionsListener.Base implements
   }
 
   public void initialize(final Server server, final FileSystem fs,
-      final Path logDir, final Path oldLogDir) throws IOException {
+      final Path logDir, final Path oldLogBaseDir) throws IOException {
     this.server = server;
     this.conf = this.server.getConfiguration();
     this.replication = isReplication(this.conf);
@@ -136,7 +136,7 @@ public class Replication extends WALActionsListener.Base implements
       }
       this.replicationManager =
           new ReplicationSourceManager(replicationQueues, replicationPeers, replicationTracker,
-              conf, this.server, fs, logDir, oldLogDir, clusterId);
+              conf, this.server, fs, logDir, oldLogBaseDir, clusterId);
       this.statsThreadPeriod =
           this.conf.getInt("replication.stats.thread.period.seconds", 5 * 60);
       LOG.debug("ReplicationStatisticsThread " + this.statsThreadPeriod);
diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java
index 2126f6d..57609b3 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java
@@ -514,6 +514,18 @@ public class ReplicationSource extends Thread
         this.reader = repLogReader.openReader(this.currentPath);
       } catch (FileNotFoundException fnfe) {
         if (this.replicationQueueInfo.isQueueRecovered()) {
+          // try old version archived log location
+          Path oldArchivedLogLocation =
+              new Path(manager.getOldLogBaseDir(), currentPath.getName());
+          if (this.manager.getFs().exists(oldArchivedLogLocation)) {
+            currentPath = oldArchivedLogLocation;
+            LOG.info("Log " + this.currentPath + " was moved to " +
+                oldArchivedLogLocation);
+            // Open the log at the new location
+            this.openReader(sleepMultiplier);
+            return true;
+          }
+
           // We didn't find the log in the archive directory, look if it still
           // exists in the dead RS folder (there could be a chain of failures
           // to look at)
@@ -573,15 +585,28 @@ public class ReplicationSource extends Thread
               "nowhere to be found", fnfe);
         } else {
           // If the log was archived, continue reading from there
-          Path archivedLogLocation =
-              new Path(manager.getOldLogDir(), currentPath.getName());
+          String servername =
+              DefaultWALProvider.getServerNameFromWALDirectoryName(currentPath).toString();
+          Path oldLogDir = new Path(manager.getOldLogBaseDir(), servername);
+          Path archivedLogLocation = new Path(oldLogDir, currentPath.getName());
           if (this.manager.getFs().exists(archivedLogLocation)) {
             currentPath = archivedLogLocation;
             LOG.info("Log " + this.currentPath + " was moved to " +
                 archivedLogLocation);
             // Open the log at the new location
             this.openReader(sleepMultiplier);
-
+            return true;
+          }
+          // try old version archived log location
+          Path oldArchivedLogLocation =
+              new Path(manager.getOldLogBaseDir(), currentPath.getName());
+          if (this.manager.getFs().exists(oldArchivedLogLocation)) {
+            currentPath = oldArchivedLogLocation;
+            LOG.info("Log " + this.currentPath + " was moved to " +
+                oldArchivedLogLocation);
+            // Open the log at the new location
+            this.openReader(sleepMultiplier);
+            return true;
           }
           // TODO What happens the log is missing in both places?
         }
diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java
index 0c8f6f9..40a7389 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java
@@ -101,7 +101,7 @@ public class ReplicationSourceManager implements ReplicationListener {
   // Path to the wals directories
   private final Path logDir;
   // Path to the wal archive
-  private final Path oldLogDir;
+  private final Path oldLogBaseDir;
   // The number of ms that we wait before moving znodes, HBASE-3596
   private final long sleepBeforeFailover;
   // Homemade executer service for replication
@@ -119,13 +119,13 @@ public class ReplicationSourceManager implements ReplicationListener {
    * @param server the server for this region server
    * @param fs the file system to use
    * @param logDir the directory that contains all wal directories of live RSs
-   * @param oldLogDir the directory where old logs are archived
+   * @param oldLogBaseDir the base directory where old logs are archived
    * @param clusterId
    */
   public ReplicationSourceManager(final ReplicationQueues replicationQueues,
       final ReplicationPeers replicationPeers, final ReplicationTracker replicationTracker,
       final Configuration conf, final Server server, final FileSystem fs, final Path logDir,
-      final Path oldLogDir, final UUID clusterId) {
+      final Path oldLogBaseDir, final UUID clusterId) {
     //CopyOnWriteArrayList is thread-safe.
     //Generally, reading is more than modifying.
     this.sources = new CopyOnWriteArrayList<ReplicationSourceInterface>();
@@ -139,7 +139,7 @@ public class ReplicationSourceManager implements ReplicationListener {
     this.conf = conf;
     this.fs = fs;
     this.logDir = logDir;
-    this.oldLogDir = oldLogDir;
+    this.oldLogBaseDir = oldLogBaseDir;
     this.sleepBeforeFailover =
         conf.getLong("replication.sleep.before.failover", 30000); // 30 seconds
     this.clusterId = clusterId;
@@ -583,6 +583,8 @@ public class ReplicationSourceManager implements ReplicationListener {
         try {
           // there is not an actual peer defined corresponding to peerId for the failover.
           ReplicationQueueInfo replicationQueueInfo = new ReplicationQueueInfo(peerId);
+          String fromServer = replicationQueueInfo.getDeadRegionServers().get(0);
+          Path oldLogDir = new Path(oldLogBaseDir, fromServer);
           String actualPeerId = replicationQueueInfo.getPeerId();
           ReplicationPeer peer = replicationPeers.getPeer(actualPeerId);
           ReplicationPeerConfig peerConfig = null;
@@ -620,11 +622,11 @@ public class ReplicationSourceManager implements ReplicationListener {
   }
 
   /**
-   * Get the directory where wals are archived
+   * Get the base directory where wals are archived
    * @return the directory where wals are archived
    */
-  public Path getOldLogDir() {
-    return this.oldLogDir;
+  public Path getOldLogBaseDir() {
+    return this.oldLogBaseDir;
   }
 
   /**
diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSyncUp.java hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSyncUp.java
index 8d38b09..8eae8d8 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSyncUp.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSyncUp.java
@@ -76,7 +76,7 @@ public class ReplicationSyncUp extends Configured implements Tool {
     Replication replication;
     ReplicationSourceManager manager;
     FileSystem fs;
-    Path oldLogDir, logDir, rootDir;
+    Path oldLogBaseDir, logDir, rootDir;
     ZooKeeperWatcher zkw;
 
     Abortable abortable = new Abortable() {
@@ -96,11 +96,11 @@ public class ReplicationSyncUp extends Configured implements Tool {
 
     rootDir = FSUtils.getRootDir(conf);
     fs = FileSystem.get(conf);
-    oldLogDir = new Path(rootDir, HConstants.HREGION_OLDLOGDIR_NAME);
+    oldLogBaseDir = new Path(rootDir, HConstants.HREGION_OLDLOGDIR_NAME);
     logDir = new Path(rootDir, HConstants.HREGION_LOGDIR_NAME);
 
     System.out.println("Start Replication Server start");
-    replication = new Replication(new DummyServer(zkw), fs, logDir, oldLogDir);
+    replication = new Replication(new DummyServer(zkw), fs, logDir, oldLogBaseDir);
     manager = replication.getReplicationManager();
     manager.init();
 
diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/wal/DefaultWALProvider.java hbase-server/src/main/java/org/apache/hadoop/hbase/wal/DefaultWALProvider.java
index b41bbfb..638cd07 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/wal/DefaultWALProvider.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/wal/DefaultWALProvider.java
@@ -92,7 +92,7 @@ public class DefaultWALProvider implements WALProvider {
     }
     final String logPrefix = factory.factoryId + WAL_FILE_NAME_DELIMITER + providerId;
     log = new FSHLog(FileSystem.get(conf), FSUtils.getRootDir(conf),
-        getWALDirectoryName(factory.factoryId), HConstants.HREGION_OLDLOGDIR_NAME, conf, listeners,
+        getWALDirectoryName(factory.factoryId), getOldWALDirectoryName(factory.factoryId), conf, listeners,
         true, logPrefix, META_WAL_PROVIDER_ID.equals(providerId) ? META_WAL_PROVIDER_ID : null);
   }
 
@@ -220,6 +220,22 @@ public class DefaultWALProvider implements WALProvider {
   }
 
   /**
+   * Construct the directory name for all old WALs on a given server.
+   *
+   * @param serverName
+   *          Server name formatted as described in {@link ServerName}
+   * @return the relative odl WAL directory name, e.g.
+   *         <code>oldWALs/1.example.org,60030,12345</code> if
+   *         <code>serverName</code><code>1.example.org,60030,12345</code>
+   */
+  public static String getOldWALDirectoryName(final String serverName) {
+    StringBuilder dirName = new StringBuilder(HConstants.HREGION_OLDLOGDIR_NAME);
+    dirName.append("/");
+    dirName.append(serverName);
+    return dirName.toString();
+  }
+
+  /**
    * Construct the directory name for all WALs on a given server.
    *
    * @param serverName
diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALSplitter.java hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALSplitter.java
index 51043e4..ba3f041 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALSplitter.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALSplitter.java
@@ -425,13 +425,15 @@ public class WALSplitter {
   public static void finishSplitLogFile(String logfile,
       Configuration conf)  throws IOException {
     Path rootdir = FSUtils.getRootDir(conf);
-    Path oldLogDir = new Path(rootdir, HConstants.HREGION_OLDLOGDIR_NAME);
     Path logPath;
     if (FSUtils.isStartingWithPath(rootdir, logfile)) {
       logPath = new Path(logfile);
     } else {
       logPath = new Path(rootdir, logfile);
     }
+    String serverName =
+        DefaultWALProvider.getServerNameFromWALDirectoryName(logPath).getServerName();
+    Path oldLogDir = new Path(rootdir, DefaultWALProvider.getOldWALDirectoryName(serverName));
     finishSplitLogFile(rootdir, oldLogDir, logPath, conf);
   }
 
@@ -446,6 +448,7 @@ public class WALSplitter {
     } else {
       processedLogs.add(logPath);
     }
+
     archiveLogs(corruptedLogs, processedLogs, oldLogDir, fs, conf);
     Path stagingDir = ZKSplitLog.getSplitLogDir(rootdir, logPath.getName());
     fs.delete(stagingDir, true);
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestWALObserver.java hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestWALObserver.java
index a3c106d..c65788e 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestWALObserver.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestWALObserver.java
@@ -134,7 +134,7 @@ public class TestWALObserver {
     this.hbaseRootDir = FSUtils.getRootDir(conf);
     this.dir = new Path(this.hbaseRootDir, TestWALObserver.class.getName());
     this.oldLogDir = new Path(this.hbaseRootDir,
-        HConstants.HREGION_OLDLOGDIR_NAME);
+      DefaultWALProvider.getOldWALDirectoryName(currentTest.getMethodName()));
     this.logDir = new Path(this.hbaseRootDir,
         DefaultWALProvider.getWALDirectoryName(currentTest.getMethodName()));
     this.logName = HConstants.HREGION_LOGDIR_NAME;
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java
index 8f551f8..bacbfb1 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java
@@ -412,7 +412,7 @@ public class TestSplitLogManager {
 
     slm = new SplitLogManager(ds, conf, stopper, master, DUMMY_MASTER);
     TaskBatch batch = new TaskBatch();
-    String tasknode = submitTaskAndWait(batch, "foo/1");
+    String tasknode = submitTaskAndWait(batch, ServerName.valueOf("failed-worker,1,1") + "/1");
     final ServerName worker1 = ServerName.valueOf("worker1,1,1");
     SplitLogTask slt = new SplitLogTask.Done(worker1, this.mode);
     ZKUtil.setData(zkw, tasknode, slt.toByteArray());
@@ -581,7 +581,7 @@ public class TestSplitLogManager {
     FileSystem fs = TEST_UTIL.getTestFileSystem();
     Path dir = TEST_UTIL.getDataTestDirOnTestFS("testLogFilesAreArchived");
     conf.set(HConstants.HBASE_DIR, dir.toString());
-    Path logDirPath = new Path(dir, UUID.randomUUID().toString());
+    Path logDirPath = new Path(dir, ServerName.valueOf("foo", 1, 1).toString());
     fs.mkdirs(logDirPath);
     // create an empty log file
     String logFile = ServerName.valueOf("foo", 1, 1).toString();
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestFSHLog.java hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestFSHLog.java
index 28ae46a..7a822b7 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestFSHLog.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestFSHLog.java
@@ -141,7 +141,7 @@ public class TestFSHLog {
     FSHLog log = null;
     try {
       log = new FSHLog(fs, FSUtils.getRootDir(conf), dir.toString(),
-          HConstants.HREGION_OLDLOGDIR_NAME, conf, null, true, null, null);
+        null, conf, null, true, null, null);
       WALCoprocessorHost host = log.getCoprocessorHost();
       Coprocessor c = host.findCoprocessor(SampleRegionWALObserver.class.getName());
       assertNotNull(c);
@@ -186,7 +186,7 @@ public class TestFSHLog {
     FSHLog walMeta = null;
     try {
       wal1 = new FSHLog(fs, FSUtils.getRootDir(conf), dir.toString(),
-          HConstants.HREGION_OLDLOGDIR_NAME, conf, null, true, null, null);
+        null, conf, null, true, null, null);
       LOG.debug("Log obtained is: " + wal1);
       Comparator<Path> comp = wal1.LOG_NAME_COMPARATOR;
       Path p1 = wal1.computeFilename(11);
@@ -243,8 +243,8 @@ public class TestFSHLog {
     LOG.debug("testFindMemStoresEligibleForFlush");
     Configuration conf1 = HBaseConfiguration.create(conf);
     conf1.setInt("hbase.regionserver.maxlogs", 1);
-    FSHLog wal = new FSHLog(fs, FSUtils.getRootDir(conf1), dir.toString(),
-        HConstants.HREGION_OLDLOGDIR_NAME, conf1, null, true, null, null);
+    FSHLog wal = new FSHLog(fs, FSUtils.getRootDir(conf1), dir.toString(), null,
+      conf1, null, true, null, null);
     HTableDescriptor t1 =
         new HTableDescriptor(TableName.valueOf("t1")).addFamily(new HColumnDescriptor("row"));
     HTableDescriptor t2 =
@@ -322,7 +322,7 @@ public class TestFSHLog {
   @Test(expected=IOException.class)
   public void testFailedToCreateWALIfParentRenamed() throws IOException {
     final String name = "testFailedToCreateWALIfParentRenamed";
-    FSHLog log = new FSHLog(fs, FSUtils.getRootDir(conf), name, HConstants.HREGION_OLDLOGDIR_NAME,
+    FSHLog log = new FSHLog(fs, FSUtils.getRootDir(conf), name, null,
         conf, null, true, null, null);
     long filenum = System.currentTimeMillis();
     Path path = log.computeFilename(filenum);
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestLogRollAbort.java hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestLogRollAbort.java
index 4e07040..2490590 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestLogRollAbort.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestLogRollAbort.java
@@ -71,7 +71,6 @@ public class TestLogRollAbort {
 
   /* For the split-then-roll test */
   private static final Path HBASEDIR = new Path("/hbase");
-  private static final Path OLDLOGDIR = new Path(HBASEDIR, HConstants.HREGION_OLDLOGDIR_NAME);
 
   // Need to override this setup so we can edit the config before it gets sent
   // to the HDFS & HBase cluster startup.
@@ -182,6 +181,8 @@ public class TestLogRollAbort {
     LOG.info("Verify wal roll after split starts will fail.");
     String logName = "testLogRollAfterSplitStart";
     Path thisTestsDir = new Path(HBASEDIR, DefaultWALProvider.getWALDirectoryName(logName));
+    Path oldLogDir = new Path(HBASEDIR, DefaultWALProvider.getOldWALDirectoryName(logName));
+
     final WALFactory wals = new WALFactory(conf, null, logName);
 
     try {
@@ -218,7 +219,7 @@ public class TestLogRollAbort {
       LOG.debug("Renamed region directory: " + rsSplitDir);
 
       LOG.debug("Processing the old log files.");
-      WALSplitter.split(HBASEDIR, rsSplitDir, OLDLOGDIR, fs, conf, wals);
+      WALSplitter.split(HBASEDIR, rsSplitDir, oldLogDir, fs, conf, wals);
 
       LOG.debug("Trying to roll the WAL.");
       try {
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestWALReplay.java hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestWALReplay.java
index c943d12..d24d8db 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestWALReplay.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestWALReplay.java
@@ -144,9 +144,11 @@ public class TestWALReplay {
     this.conf = HBaseConfiguration.create(TEST_UTIL.getConfiguration());
     this.fs = TEST_UTIL.getDFSCluster().getFileSystem();
     this.hbaseRootDir = FSUtils.getRootDir(this.conf);
-    this.oldLogDir = new Path(this.hbaseRootDir, HConstants.HREGION_OLDLOGDIR_NAME);
     this.logName = DefaultWALProvider.getWALDirectoryName(currentTest.getMethodName() + "-manual");
     this.logDir = new Path(this.hbaseRootDir, logName);
+    this.oldLogDir =
+        new Path(this.hbaseRootDir, DefaultWALProvider.getOldWALDirectoryName(currentTest
+            .getMethodName() + "-manual"));
     if (TEST_UTIL.getDFSCluster().getFileSystem().exists(this.hbaseRootDir)) {
       TEST_UTIL.getDFSCluster().getFileSystem().delete(this.hbaseRootDir, true);
     }
@@ -927,7 +929,7 @@ public class TestWALReplay {
 
     public MockWAL(FileSystem fs, Path rootDir, String logName, Configuration conf)
         throws IOException {
-      super(fs, rootDir, logName, HConstants.HREGION_OLDLOGDIR_NAME, conf, null, true, null, null);
+      super(fs, rootDir, logName, null, conf, null, true, null, null);
     }
 
     @Override
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationSource.java hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationSource.java
index aac966e..cd85d7c 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationSource.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationSource.java
@@ -52,7 +52,7 @@ public class TestReplicationSource {
   private final static HBaseTestingUtility TEST_UTIL =
       new HBaseTestingUtility();
   private static FileSystem FS;
-  private static Path oldLogDir;
+  private static Path oldLogBaseDir;
   private static Path logDir;
   private static Configuration conf = HBaseConfiguration.create();
 
@@ -64,8 +64,8 @@ public class TestReplicationSource {
     TEST_UTIL.startMiniDFSCluster(1);
     FS = TEST_UTIL.getDFSCluster().getFileSystem();
     Path rootDir = TEST_UTIL.createRootDir();
-    oldLogDir = new Path(rootDir, HConstants.HREGION_OLDLOGDIR_NAME);
-    if (FS.exists(oldLogDir)) FS.delete(oldLogDir, true);
+    oldLogBaseDir = new Path(rootDir, HConstants.HREGION_OLDLOGDIR_NAME);
+    if (FS.exists(oldLogBaseDir)) FS.delete(oldLogBaseDir, true);
     logDir = new Path(rootDir, HConstants.HREGION_LOGDIR_NAME);
     if (FS.exists(logDir)) FS.delete(logDir, true);
   }
@@ -80,7 +80,7 @@ public class TestReplicationSource {
   public void testLogMoving() throws Exception{
     Path logPath = new Path(logDir, "log");
     if (!FS.exists(logDir)) FS.mkdirs(logDir);
-    if (!FS.exists(oldLogDir)) FS.mkdirs(oldLogDir);
+    if (!FS.exists(oldLogBaseDir)) FS.mkdirs(oldLogBaseDir);
     WALProvider.Writer writer = WALFactory.createWALWriter(FS, logPath,
         TEST_UTIL.getConfiguration());
     for(int i = 0; i < 3; i++) {
@@ -99,7 +99,7 @@ public class TestReplicationSource {
     WAL.Entry entry = reader.next();
     assertNotNull(entry);
 
-    Path oldLogPath = new Path(oldLogDir, "log");
+    Path oldLogPath = new Path(oldLogBaseDir, "log");
     FS.rename(logPath, oldLogPath);
 
     entry = reader.next();
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationSourceManager.java hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationSourceManager.java
index 571be26..b50e4bf 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationSourceManager.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationSourceManager.java
@@ -114,7 +114,7 @@ public class TestReplicationSourceManager {
 
   private static FileSystem fs;
 
-  private static Path oldLogDir;
+  private static Path oldLogBaseDir;
 
   private static Path logDir;
 
@@ -150,11 +150,11 @@ public class TestReplicationSourceManager {
     ZKClusterId.setClusterId(zkw, new ClusterId());
     FSUtils.setRootDir(utility.getConfiguration(), utility.getDataTestDir());
     fs = FileSystem.get(conf);
-    oldLogDir = new Path(utility.getDataTestDir(),
+    oldLogBaseDir = new Path(utility.getDataTestDir(),
         HConstants.HREGION_OLDLOGDIR_NAME);
     logDir = new Path(utility.getDataTestDir(),
         HConstants.HREGION_LOGDIR_NAME);
-    replication = new Replication(new DummyServer(), fs, logDir, oldLogDir);
+    replication = new Replication(new DummyServer(), fs, logDir, oldLogBaseDir);
     manager = replication.getReplicationManager();
 
     manager.addSource(slaveId);
@@ -179,7 +179,7 @@ public class TestReplicationSourceManager {
   @Before
   public void setUp() throws Exception {
     fs.delete(logDir, true);
-    fs.delete(oldLogDir, true);
+    fs.delete(oldLogBaseDir, true);
   }
 
   @After
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/wal/IOTestProvider.java hbase-server/src/test/java/org/apache/hadoop/hbase/wal/IOTestProvider.java
index d2581a1..674a140 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/wal/IOTestProvider.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/wal/IOTestProvider.java
@@ -103,7 +103,7 @@ public class IOTestProvider implements WALProvider {
     final String logPrefix = factory.factoryId + WAL_FILE_NAME_DELIMITER + providerId;
     log = new IOTestWAL(FileSystem.get(conf), FSUtils.getRootDir(conf),
         DefaultWALProvider.getWALDirectoryName(factory.factoryId),
-        HConstants.HREGION_OLDLOGDIR_NAME, conf, listeners,
+        DefaultWALProvider.getOldWALDirectoryName(factory.factoryId), conf, listeners,
         true, logPrefix, META_WAL_PROVIDER_ID.equals(providerId) ? META_WAL_PROVIDER_ID : null);
   }
 
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALFactory.java hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALFactory.java
index e393c13..5a5ff9d 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALFactory.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALFactory.java
@@ -167,7 +167,8 @@ public class TestWALFactory {
     final byte [] rowName = tableName.getName();
     final Path logdir = new Path(hbaseDir,
         DefaultWALProvider.getWALDirectoryName(currentTest.getMethodName()));
-    Path oldLogDir = new Path(hbaseDir, HConstants.HREGION_OLDLOGDIR_NAME);
+    Path oldLogDir =
+        new Path(hbaseDir, DefaultWALProvider.getOldWALDirectoryName(currentTest.getMethodName()));
     final int howmany = 3;
     HRegionInfo[] infos = new HRegionInfo[3];
     Path tabledir = FSUtils.getTableDir(hbaseDir, tableName);
diff --git hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALSplit.java hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALSplit.java
index 0fd44f5..f62ae91 100644
--- hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALSplit.java
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/wal/TestWALSplit.java
@@ -174,7 +174,6 @@ public class TestWALSplit {
     LOG.info("Cleaning up cluster for new test.");
     fs = TEST_UTIL.getDFSCluster().getFileSystem();
     HBASEDIR = TEST_UTIL.createRootDir();
-    OLDLOGDIR = new Path(HBASEDIR, HConstants.HREGION_OLDLOGDIR_NAME);
     CORRUPTDIR = new Path(HBASEDIR, HConstants.CORRUPT_DIR_NAME);
     TABLEDIR = FSUtils.getTableDir(HBASEDIR, TABLE_NAME);
     REGIONS.clear();
@@ -184,6 +183,7 @@ public class TestWALSplit {
         RecoveryMode.LOG_REPLAY : RecoveryMode.LOG_SPLITTING);
     wals = new WALFactory(conf, null, name.getMethodName());
     WALDIR = new Path(HBASEDIR, DefaultWALProvider.getWALDirectoryName(name.getMethodName()));
+    OLDLOGDIR = new Path(HBASEDIR, DefaultWALProvider.getOldWALDirectoryName(name.getMethodName()));
     //fs.mkdirs(WALDIR);
   }
 
