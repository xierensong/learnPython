From c706e30d02343e0ba36bdea1ac6f746da0ee5e54 Mon Sep 17 00:00:00 2001
From: Andrew Purtell <apurtell@apache.org>
Date: Sun, 7 Aug 2016 17:41:25 -0700
Subject: [PATCH] Amend HBASE-16321; javac 6 does not like the replacement
 NonNull and Nullable annotations

---
 .../apache/hadoop/hbase/protobuf/ResponseConverter.java    |  2 --
 .../java/org/apache/hadoop/hbase/codec/BaseDecoder.java    |  2 --
 .../java/org/apache/hadoop/hbase/master/LoadBalancer.java  |  1 -
 .../apache/hadoop/hbase/util/AbstractFileStatusFilter.java |  8 +++-----
 .../main/java/org/apache/hadoop/hbase/util/FSUtils.java    | 14 ++++++--------
 .../hbase/mapreduce/TestMultiTableSnapshotInputFormat.java |  2 --
 6 files changed, 9 insertions(+), 20 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ResponseConverter.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ResponseConverter.java
index e059c31..89382dd 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ResponseConverter.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ResponseConverter.java
@@ -21,7 +21,6 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
@@ -348,7 +347,6 @@ public final class ResponseConverter {
    * @return exception if any, or null; Will return DoNotRetryIOException for string represented
    * failure causes in controller.
    */
-  @Nullable
   public static IOException getControllerException(RpcController controller) throws IOException {
     if (controller != null && controller.failed()) {
       if (controller instanceof ServerRpcController) {
diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/BaseDecoder.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/BaseDecoder.java
index 485b88a..62c73d8 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/BaseDecoder.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/BaseDecoder.java
@@ -22,7 +22,6 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.PushbackInputStream;
 
-import edu.umd.cs.findbugs.annotations.NonNull;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.Cell;
@@ -98,7 +97,6 @@ public abstract class BaseDecoder implements Codec.Decoder {
    * thrown if EOF is reached prematurely. Does not return null.
    * @throws IOException
    */
-  @NonNull
   protected abstract Cell parseCell() throws IOException;
 
   @Override
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java
index 119b01d..e24d745 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java
@@ -21,7 +21,6 @@ package org.apache.hadoop.hbase.master;
 import java.util.List;
 import java.util.Map;
 
-import edu.umd.cs.findbugs.annotations.Nullable;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.conf.Configurable;
 import org.apache.hadoop.hbase.ClusterStatus;
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/AbstractFileStatusFilter.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/AbstractFileStatusFilter.java
index eef66bd..8ea7dbf 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/AbstractFileStatusFilter.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/AbstractFileStatusFilter.java
@@ -26,8 +26,6 @@ import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.fs.PathFilter;
 
-import edu.umd.cs.findbugs.annotations.CheckForNull;
-
 /**
  * Typical base class for file status filter.  Works more efficiently when
  * filtering file statuses, otherwise implementation will need to lookup filestatus
@@ -45,7 +43,7 @@ public abstract class AbstractFileStatusFilter implements PathFilter, FileStatus
    * @param isDir   An optional boolean indicating whether the path is a directory or not
    * @return        true if the path is accepted, false if the path is filtered out
    */
-  protected abstract boolean accept(Path p, @CheckForNull Boolean isDir);
+  protected abstract boolean accept(Path p, Boolean isDir);
 
   @Override
   public boolean accept(FileStatus f) {
@@ -57,11 +55,11 @@ public abstract class AbstractFileStatusFilter implements PathFilter, FileStatus
     return accept(p, null);
   }
 
-  protected boolean isFile(FileSystem fs, @CheckForNull Boolean isDir, Path p) throws IOException {
+  protected boolean isFile(FileSystem fs, Boolean isDir, Path p) throws IOException {
     return !isDirectory(fs, isDir, p);
   }
 
-  protected boolean isDirectory(FileSystem fs, @CheckForNull Boolean isDir, Path p) throws IOException {
+  protected boolean isDirectory(FileSystem fs, Boolean isDir, Path p) throws IOException {
     return isDir != null ? isDir : fs.isDirectory(p);
   }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSUtils.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSUtils.java
index 218cc18..c99fa97 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSUtils.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSUtils.java
@@ -93,8 +93,6 @@ import com.google.common.base.Throwables;
 import com.google.common.collect.Iterators;
 import com.google.common.primitives.Ints;
 
-import edu.umd.cs.findbugs.annotations.CheckForNull;
-
 /**
  * Utility methods for interacting with the underlying file system.
  */
@@ -1173,7 +1171,7 @@ public abstract class FSUtils {
     }
 
     @Override
-    protected boolean accept(Path p, @CheckForNull Boolean isDir) {
+    protected boolean accept(Path p, Boolean isDir) {
       try {
         return isFile(fs, isDir, p);
       } catch (IOException e) {
@@ -1205,7 +1203,7 @@ public abstract class FSUtils {
     }
 
     @Override
-    protected boolean accept(Path p, @CheckForNull Boolean isDir) {
+    protected boolean accept(Path p, Boolean isDir) {
       if (!isValidName(p.getName())) {
         return false;
       }
@@ -1364,7 +1362,7 @@ public abstract class FSUtils {
     }
 
     @Override
-    protected boolean accept(Path p, @CheckForNull Boolean isDir) {
+    protected boolean accept(Path p, Boolean isDir) {
       if (!regionDirPattern.matcher(p.getName()).matches()) {
         return false;
       }
@@ -1413,7 +1411,7 @@ public abstract class FSUtils {
     }
 
     @Override
-    protected boolean accept(Path p, @CheckForNull Boolean isDir) {
+    protected boolean accept(Path p, Boolean isDir) {
       try {
         // throws IAE if invalid
         HColumnDescriptor.isLegalFamilyName(Bytes.toBytes(p.getName()));
@@ -1475,7 +1473,7 @@ public abstract class FSUtils {
     }
 
     @Override
-    protected boolean accept(Path p, @CheckForNull Boolean isDir) {
+    protected boolean accept(Path p, Boolean isDir) {
       if (!StoreFileInfo.isHFile(p)) {
         return false;
       }
@@ -1499,7 +1497,7 @@ public abstract class FSUtils {
     }
 
     @Override
-    protected boolean accept(Path p, @CheckForNull Boolean isDir) {
+    protected boolean accept(Path p, Boolean isDir) {
       if (!StoreFileInfo.isReference(p)) {
         return false;
       }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestMultiTableSnapshotInputFormat.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestMultiTableSnapshotInputFormat.java
index 933c7f6..2b3a877 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestMultiTableSnapshotInputFormat.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestMultiTableSnapshotInputFormat.java
@@ -21,7 +21,6 @@ package org.apache.hadoop.hbase.mapreduce;
 import com.google.common.base.Function;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Multimaps;
-import edu.umd.cs.findbugs.annotations.Nullable;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.Scan;
@@ -76,7 +75,6 @@ public class TestMultiTableSnapshotInputFormat extends MultiTableInputFormatTest
 
   protected Map<String, Collection<Scan>> getSnapshotScanMapping(final List<Scan> scans) {
     return Multimaps.index(scans, new Function<Scan, String>() {
-      @Nullable
       @Override
       public String apply(Scan input) {
         return snapshotNameForTable(
-- 
2.7.4

