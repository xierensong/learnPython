diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/client/SharedExecutorHTableFactory.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/client/SharedExecutorHTableFactory.java
new file mode 100644
index 0000000..aea59f6
--- /dev/null
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/client/SharedExecutorHTableFactory.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright The Apache Software Foundation
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with this
+ * work for additional information regarding copyright ownership. The ASF
+ * licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.hadoop.hbase.client;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hbase.ZooKeeperConnectionException;
+import org.apache.hadoop.hbase.util.Threads;
+
+import java.io.IOException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.SynchronousQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+public class SharedExecutorHTableFactory implements HTableInterfaceFactory {
+
+  private volatile HConnection connection;
+  private final ExecutorService threadPool;
+  private final Configuration conf;
+
+  public SharedExecutorHTableFactory(Configuration conf) throws ZooKeeperConnectionException {
+    this.conf = conf;
+
+    int maxThreads = conf.getInt("hbase.htable.threads.max", Integer.MAX_VALUE);
+    if (maxThreads == 0) {
+      maxThreads = 1; // is there a better default?
+    }
+    long keepAliveTime = conf.getLong("hbase.htable.threads.keepalivetime", 60);
+    this.threadPool = new ThreadPoolExecutor(1, maxThreads, keepAliveTime, TimeUnit.SECONDS,
+        new SynchronousQueue<Runnable>(),
+        Threads.newDaemonThreadFactory("hbase-pool-shared-executor"));
+    ((ThreadPoolExecutor) this.threadPool).allowCoreThreadTimeOut(true);
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public HTableInterface createHTableInterface(Configuration config, byte[] tableName) {
+    try {
+      if (this.connection == null || this.connection.isClosed()) {
+        // create new connection or recover existing one
+        synchronized (this) {
+          if (this.connection == null || this.connection.isClosed()) {
+            this.connection = HConnectionManager.createConnection(this.conf);
+          }
+        }
+      }
+      return new HTable(tableName, connection, threadPool);
+    } catch (IOException e) {
+      // Not fortunate, we'd need to bubble up this execption to caller
+      // for now we rethrow it as unchecked exception
+      throw new IllegalStateException(e);
+    }
+  }
+
+  @Override
+  public void releaseHTableInterface(HTableInterface table) throws IOException {
+    table.close();
+  }
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestHTablePool.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestHTablePool.java
index 49f75aa..fe893e6 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestHTablePool.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestHTablePool.java
@@ -35,7 +35,10 @@ import org.junit.runners.Suite;
  * Tests HTablePool.
  */
 @RunWith(Suite.class)
-@Suite.SuiteClasses({TestHTablePool.TestHTableReusablePool.class, TestHTablePool.TestHTableThreadLocalPool.class})
+@Suite.SuiteClasses({ TestHTablePool.TestHTableReusablePool.class,
+                      TestHTablePool.TestHTableThreadLocalPool.class,
+                      TestHTablePool.TestHTableReusablePoolSharedExecutor.class,
+                      TestHTablePool.TestHTableThreadLocalPoolSharedExecutor.class })
 @Category(MediumTests.class)
 public class TestHTablePool {
 	private static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();
@@ -54,11 +57,12 @@ public class TestHTablePool {
 
 	public abstract static class TestHTablePoolType extends TestCase {
 		protected abstract PoolType getPoolType();
+		protected abstract HTableInterfaceFactory getHTableFactory() throws IOException;
 
 		@Test
 		public void testTableWithStringName() throws Exception {
 			HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(),
-					Integer.MAX_VALUE, getPoolType());
+					Integer.MAX_VALUE, getHTableFactory(), getPoolType());
 			String tableName = Bytes.toString(TABLENAME);
 
 			// Request a table from an empty pool
@@ -78,7 +82,7 @@ public class TestHTablePool {
 		@Test
 		public void testTableWithByteArrayName() throws IOException {
 			HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(),
-					Integer.MAX_VALUE, getPoolType());
+					Integer.MAX_VALUE, getHTableFactory(), getPoolType());
 
 			// Request a table from an empty pool
 			HTableInterface table = pool.getTable(TABLENAME);
@@ -97,7 +101,7 @@ public class TestHTablePool {
 		@Test
 		public void testTablesWithDifferentNames() throws IOException {
 			HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(),
-					Integer.MAX_VALUE, getPoolType());
+					Integer.MAX_VALUE, getHTableFactory(), getPoolType());
       // We add the class to the table name as the HBase cluster is reused
       //  during the tests: this gives naming unicity.
 			byte[] otherTable = Bytes.toBytes(
@@ -125,9 +129,9 @@ public class TestHTablePool {
 					((HTablePool.PooledHTable) sameTable2).getWrappedTable());
 		}
     @Test
-    public void testProxyImplementationReturned() {
+    public void testProxyImplementationReturned() throws IOException {
       HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(),
-          Integer.MAX_VALUE);
+          Integer.MAX_VALUE, getHTableFactory(), getPoolType());
       String tableName = Bytes.toString(TABLENAME);// Request a table from
                               // an
                               // empty pool
@@ -140,7 +144,7 @@ public class TestHTablePool {
     @Test
     public void testDeprecatedUsagePattern() throws IOException {
       HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(),
-          Integer.MAX_VALUE);
+          Integer.MAX_VALUE, getHTableFactory(), getPoolType());
       String tableName = Bytes.toString(TABLENAME);// Request a table from
                               // an
                               // empty pool
@@ -162,7 +166,7 @@ public class TestHTablePool {
     @Test
     public void testReturnDifferentTable() throws IOException {
       HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(),
-          Integer.MAX_VALUE);
+          Integer.MAX_VALUE, getHTableFactory(), getPoolType());
       String tableName = Bytes.toString(TABLENAME);// Request a table from
                               // an
                               // empty pool
@@ -186,15 +190,19 @@ public class TestHTablePool {
 
   @Category(MediumTests.class)
 	public static class TestHTableReusablePool extends TestHTablePoolType {
-		@Override
-		protected PoolType getPoolType() {
-			return PoolType.Reusable;
-		}
+    @Override
+    protected PoolType getPoolType() {
+      return PoolType.Reusable;
+    }
+
+    protected HTableInterfaceFactory getHTableFactory() throws IOException {
+      return new HTableFactory();
+    }
 
 		@Test
 		public void testTableWithMaxSize() throws Exception {
 			HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(), 2,
-					getPoolType());
+					getHTableFactory(), getPoolType());
 
 			// Request tables from an empty pool
 			HTableInterface table1 = pool.getTable(TABLENAME);
@@ -225,7 +233,7 @@ public class TestHTablePool {
 		@Test
 		public void testCloseTablePool() throws IOException {
 			HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(), 4,
-					getPoolType());
+					getHTableFactory(), getPoolType());
 			HBaseAdmin admin = new HBaseAdmin(TEST_UTIL.getConfiguration());
 
 			if (admin.tableExists(TABLENAME)) {
@@ -259,6 +267,14 @@ public class TestHTablePool {
 		}
 	}
 
+  public static class TestHTableReusablePoolSharedExecutor extends TestHTableReusablePool {
+    @Override
+    protected HTableInterfaceFactory getHTableFactory() throws IOException {
+      return new SharedExecutorHTableFactory(TEST_UTIL.getConfiguration());
+    }
+
+  }
+
   @Category(MediumTests.class)
 	public static class TestHTableThreadLocalPool extends TestHTablePoolType {
 		@Override
@@ -266,10 +282,15 @@ public class TestHTablePool {
 			return PoolType.ThreadLocal;
 		}
 
+    @Override
+    protected HTableInterfaceFactory getHTableFactory() throws IOException {
+      return new HTableFactory();
+    }
+
 		@Test
 		public void testTableWithMaxSize() throws Exception {
 			HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(), 2,
-					getPoolType());
+					getHTableFactory(), getPoolType());
 
 			// Request tables from an empty pool
 			HTableInterface table1 = pool.getTable(TABLENAME);
@@ -301,7 +322,7 @@ public class TestHTablePool {
 		@Test
 		public void testCloseTablePool() throws IOException {
 			HTablePool pool = new HTablePool(TEST_UTIL.getConfiguration(), 4,
-					getPoolType());
+					getHTableFactory(), getPoolType());
 			HBaseAdmin admin = new HBaseAdmin(TEST_UTIL.getConfiguration());
 
 			if (admin.tableExists(TABLENAME)) {
@@ -335,4 +356,12 @@ public class TestHTablePool {
 		}
 	}
 
+  public static class TestHTableThreadLocalPoolSharedExecutor extends TestHTableThreadLocalPool {
+    @Override
+    protected HTableInterfaceFactory getHTableFactory() throws IOException {
+      return new SharedExecutorHTableFactory(TEST_UTIL.getConfiguration());
+    }
+
+  }
+
 }

