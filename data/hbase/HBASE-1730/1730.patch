Index: src/test/org/apache/hadoop/hbase/TestHColumnDescriptor.java
===================================================================
--- src/test/org/apache/hadoop/hbase/TestHColumnDescriptor.java	(revision 0)
+++ src/test/org/apache/hadoop/hbase/TestHColumnDescriptor.java	(revision 0)
@@ -0,0 +1,219 @@
+package org.apache.hadoop.hbase;
+
+import static org.junit.Assert.*;
+
+import org.apache.hadoop.hbase.io.hfile.Compression;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.sun.org.apache.xml.internal.security.algorithms.Algorithm;
+
+public class TestHColumnDescriptor {
+
+  @Before
+  public void setUp() throws Exception {
+  }
+
+  @After
+  public void tearDown() throws Exception {
+  }
+
+  @Test
+  public void testHashCode() {
+    HColumnDescriptor hcd = new HColumnDescriptor("a");
+    HColumnDescriptor hcd2 = new HColumnDescriptor("a");
+    assertEquals(hcd.hashCode(), hcd2.hashCode());
+    hcd2.setTimeToLive(23);
+    assertNotSame(hcd.hashCode(), hcd2.hashCode());
+    HColumnDescriptor hcd3 = new HColumnDescriptor("b");
+    assertNotSame(hcd.hashCode(), hcd3.hashCode());
+    HColumnDescriptor hcd4 = new HColumnDescriptor(hcd);
+    assertEquals(hcd.hashCode(), hcd4.hashCode());
+  }
+
+  @Test
+  public void testIsLegalFamilyName() {
+    HColumnDescriptor.isLegalFamilyName("a");
+  }
+
+  @Test (expected=IllegalArgumentException.class)
+  public void testIllegalFamilyName1() {
+    HColumnDescriptor.isLegalFamilyName("a:");
+  }
+
+  @Test (expected=IllegalArgumentException.class)
+  public void testIllegalFamilyName2() {
+    HColumnDescriptor.isLegalFamilyName(".META.");
+  }
+
+  @Test (expected=IllegalAccessError.class)
+  public void testChangeNamePostConstruction() {
+    HColumnDescriptor hcd = new HColumnDescriptor("a");
+    hcd.put(HColumnDescriptor.NAME, "b");
+  }
+
+  @Test
+  public void testGetCompression() {
+    HColumnDescriptor hcd = new HColumnDescriptor("a");
+    assertEquals(Compression.Algorithm.NONE, hcd.getCompression());
+    hcd.setCompressionType(Compression.Algorithm.LZO);
+    assertEquals(Compression.Algorithm.LZO, hcd.getCompression());
+  }
+
+  @Test
+  public void testGetMaxVersions() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testSetMaxVersions() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testGetBlocksize() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testSetBlocksize() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testGetCompressionType() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testSetCompressionType() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testIsInMemory() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testSetInMemory() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testGetTimeToLive() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testSetTimeToLive() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testIsBlockCacheEnabled() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testSetBlockCacheEnabled() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testIsBloomfilter() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testSetBloomfilter() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testToString() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testEqualsObject() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testReadFields() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testWrite() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testCompareTo() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testClear() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testContainsKey() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testContainsValue() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testEntrySet() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testGet() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testIsEmpty() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testKeySet() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testPut() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testPutAll() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testRemove() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testSize() {
+    fail("Not yet implemented");
+  }
+
+  @Test
+  public void testValues() {
+    fail("Not yet implemented");
+  }
+
+}
Index: src/java/org/apache/hadoop/hbase/HColumnDescriptor.java
===================================================================
--- src/java/org/apache/hadoop/hbase/HColumnDescriptor.java	(revision 831471)
+++ src/java/org/apache/hadoop/hbase/HColumnDescriptor.java	(working copy)
@@ -22,52 +22,39 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
-import java.util.Collections;
-import java.util.HashMap;
+import java.io.StringWriter;
+import java.util.Collection;
 import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
 
-import org.apache.hadoop.hbase.io.ImmutableBytesWritable;
 import org.apache.hadoop.hbase.io.hfile.Compression;
 import org.apache.hadoop.hbase.io.hfile.HFile;
 import org.apache.hadoop.hbase.util.Bytes;
-import org.apache.hadoop.io.Text;
+import org.apache.hadoop.hdfs.server.namenode.UnsupportedActionException;
 import org.apache.hadoop.io.WritableComparable;
+import org.codehaus.jackson.JsonGenerationException;
+import org.codehaus.jackson.map.JsonMappingException;
+import org.codehaus.jackson.map.ObjectMapper;
 
+import sun.reflect.generics.reflectiveObjects.NotImplementedException;
+
 /**
  * An HColumnDescriptor contains information about a column family such as the
  * number of versions, compression settings, etc.
  * 
- * It is used as input when creating a table or adding a column. Once set, the
- * parameters that specify a column cannot be changed without deleting the
- * column and recreating it. If there is data stored in the column, it will be
- * deleted when the column is deleted.
+ * Not thread-safe.
  */
-public class HColumnDescriptor implements WritableComparable<HColumnDescriptor> {
-  // For future backward compatibility
-
+public class HColumnDescriptor
+implements Map<String, Object>, WritableComparable<HColumnDescriptor> {
   // Version 3 was when column names become byte arrays and when we picked up
   // Time-to-live feature.  Version 4 was when we moved to byte arrays, HBASE-82.
   // Version 5 was when bloom filter descriptors were removed.
   // Version 6 adds metadata as a map where keys and values are byte[].
   // Version 7 -- add new compression and hfile blocksize to HColumnDescriptor (HBASE-1217)
-  private static final byte COLUMN_DESCRIPTOR_VERSION = (byte)7;
+  // Version 8 moves off Writable to Map
+  private static final byte COLUMN_DESCRIPTOR_VERSION = (byte)8;
 
-  /** 
-   * The type of compression.
-   * @see org.apache.hadoop.io.SequenceFile.Writer
-   * @deprecated Compression now means which compression library
-   * rather than 'what' to compress.
-   */
-  @Deprecated
-  public static enum CompressionType {
-    /** Do not compress records. */
-    NONE, 
-    /** Compress values only, each separately. */
-    RECORD,
-    /** Compress sequences of records together in blocks. */
-    BLOCK
-  }
-
   public static final String COMPRESSION = "COMPRESSION";
   public static final String BLOCKCACHE = "BLOCKCACHE";
   public static final String BLOCKSIZE = "BLOCKSIZE";
@@ -75,8 +62,7 @@
   public static final String TTL = "TTL";
   public static final String BLOOMFILTER = "BLOOMFILTER";
   public static final String FOREVER = "FOREVER";
-  public static final String MAPFILE_INDEX_INTERVAL =
-      "MAPFILE_INDEX_INTERVAL";
+  public static final String NAME = "NAME";
 
   /**
    * Default compression type.
@@ -89,12 +75,6 @@
    */
   public static final int DEFAULT_VERSIONS = 3;
 
-  /*
-   * Cache here the HCD value.
-   * Question: its OK to cache since when we're reenable, we create a new HCD?
-   */
-  private volatile Integer blocksize = null;
-
   /**
    * Default setting for whether to serve from memory or not.
    */
@@ -112,32 +92,33 @@
   public static final int DEFAULT_BLOCKSIZE = HFile.DEFAULT_BLOCKSIZE;
 
   /**
-   * Default setting for whether or not to use bloomfilters.
-   */
-  public static final boolean DEFAULT_BLOOMFILTER = false;
-  
-  /**
    * Default time to live of cell contents.
    */
   public static final int DEFAULT_TTL = HConstants.FOREVER;
 
-  // Column family name
-  private byte [] name;
+  // Keep differences only rather than all attributes.
+  // Make it sorted so items come out same every time.
+  private Map<String, Object> properties =  new TreeMap<String, Object>();
 
-  // Column metadata
-  protected Map<ImmutableBytesWritable,ImmutableBytesWritable> values =
-    new HashMap<ImmutableBytesWritable,ImmutableBytesWritable>();
+  /*
+   * Cache here the HCD value.
+   * Question: its OK to cache since when we're reenable, we create a new HCD?
+   */
+  private volatile int blocksize = -1;
 
   /*
    * Cache the max versions rather than calculate it every time.
    */
-  private int cachedMaxVersions = -1;
+  private volatile int cachedMaxVersions = -1;
 
+  private final ObjectMapper mapper = new ObjectMapper();
+
   /**
    * Default constructor. Must be present for Writable.
+   * @deprecated Used when this class implemented Writable
    */
   public HColumnDescriptor() {
-    this.name = null;
+    super();
   }
 
   /**
@@ -146,11 +127,12 @@
    * 
    * @param familyName Column family name. Must be 'printable' -- digit or
    * letter -- and may not contain a <code>:<code>
+   * @deprecated Use {@link #HColumnDescriptor(String)}
    */
-  public HColumnDescriptor(final String familyName) {
-    this(Bytes.toBytes(familyName));
+  public HColumnDescriptor(final byte [] familyName) {
+    this(Bytes.toString(familyName));
   }
-  
+
   /**
    * Construct a column descriptor specifying only the family name 
    * The other attributes are defaulted.
@@ -158,11 +140,8 @@
    * @param familyName Column family name. Must be 'printable' -- digit or
    * letter -- and may not contain a <code>:<code>
    */
-  public HColumnDescriptor(final byte [] familyName) {
-    this (familyName == null || familyName.length <= 0?
-      HConstants.EMPTY_BYTE_ARRAY: familyName, DEFAULT_VERSIONS,
-      DEFAULT_COMPRESSION, DEFAULT_IN_MEMORY, DEFAULT_BLOCKCACHE,
-      DEFAULT_TTL, false);
+  public HColumnDescriptor(final String familyName) {
+    this.properties.put(NAME, familyName);
   }
 
   /**
@@ -172,12 +151,7 @@
    * @param desc The descriptor.
    */
   public HColumnDescriptor(HColumnDescriptor desc) {
-    super();
-    this.name = desc.name.clone();
-    for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> e:
-        desc.values.entrySet()) {
-      this.values.put(e.getKey(), e.getValue());
-    }
+    this.properties.putAll(desc);
   }
 
   /**
@@ -197,15 +171,39 @@
    * other than 'word' characters: i.e. <code>[a-zA-Z_0-9]</code> or contains
    * a <code>:</code>
    * @throws IllegalArgumentException if the number of versions is &lt;= 0
+   * @deprecated Use {@link #HColumnDescriptor(byte[], int, String, boolean, boolean, int)}
    */
   public HColumnDescriptor(final byte [] familyName, final int maxVersions,
       final String compression, final boolean inMemory,
       final boolean blockCacheEnabled,
+      final int timeToLive) {
+  }
+
+  /**
+   * Constructor
+   * @param familyName Column family name. Must be 'printable' -- digit or
+   * letter -- and may not contain a <code>:<code>
+   * @param maxVersions Maximum number of versions to keep
+   * @param compression Compression type
+   * @param inMemory If true, column data should be kept in an HRegionServer's
+   * cache
+   * @param blockCacheEnabled If true, MapFile blocks should be cached
+   * @param timeToLive Time-to-live of cell contents, in seconds
+   * (use HConstants.FOREVER for unlimited TTL)
+   * 
+   * @throws IllegalArgumentException if passed a family name that is made of 
+   * other than 'word' characters: i.e. <code>[a-zA-Z_0-9]</code> or contains
+   * a <code>:</code>
+   * @throws IllegalArgumentException if the number of versions is &lt;= 0
+   */
+  public HColumnDescriptor(final String familyName, final int maxVersions,
+      final String compression, final boolean inMemory,
+      final boolean blockCacheEnabled,
       final int timeToLive, final boolean bloomFilter) {
     this(familyName, maxVersions, compression, inMemory, blockCacheEnabled,
-      DEFAULT_BLOCKSIZE, timeToLive, bloomFilter);
+      DEFAULT_BLOCKSIZE, timeToLive);
   }
-  
+
   /**
    * Constructor
    * @param familyName Column family name. Must be 'printable' -- digit or
@@ -224,14 +222,40 @@
    * other than 'word' characters: i.e. <code>[a-zA-Z_0-9]</code> or contains
    * a <code>:</code>
    * @throws IllegalArgumentException if the number of versions is &lt;= 0
+   * @deprecated Use {@link #HColumnDescriptor(String, int, String, boolean, boolean, int, int)}
    */
   public HColumnDescriptor(final byte [] familyName, final int maxVersions,
       final String compression, final boolean inMemory,
       final boolean blockCacheEnabled, final int blocksize,
       final int timeToLive, final boolean bloomFilter) {
-    isLegalFamilyName(familyName);
-    this.name = familyName;
+    this(Bytes.toString(familyName), maxVersions, compression, inMemory,
+      blockCacheEnabled, blocksize, timeToLive);
+  }
 
+  /**
+   * Constructor
+   * @param familyName Column family name. Must be 'printable' -- digit or
+   * letter -- and may not contain a <code>:<code>
+   * @param maxVersions Maximum number of versions to keep
+   * @param compression Compression type
+   * @param inMemory If true, column data should be kept in an HRegionServer's
+   * cache
+   * @param blockCacheEnabled If true, MapFile blocks should be cached
+   * @param blocksize
+   * @param timeToLive Time-to-live of cell contents, in seconds
+   * (use HConstants.FOREVER for unlimited TTL)
+   * 
+   * @throws IllegalArgumentException if passed a family name that is made of 
+   * other than 'word' characters: i.e. <code>[a-zA-Z_0-9]</code> or contains
+   * a <code>:</code>
+   * @throws IllegalArgumentException if the number of versions is &lt;= 0
+   */
+  public HColumnDescriptor(final String familyName, final int maxVersions,
+      final String compression, final boolean inMemory,
+      final boolean blockCacheEnabled, final int blocksize,
+      final int timeToLive) {
+    isLegalFamilyName(familyName);
+    this.properties.put(NAME, familyName);
     if (maxVersions <= 0) {
       // TODO: Allow maxVersion of 0 to be the way you say "Keep all versions".
       // Until there is support, consider 0 or < 0 -- a configuration error.
@@ -243,7 +267,6 @@
     setTimeToLive(timeToLive);
     setCompressionType(Compression.Algorithm.
       valueOf(compression.toUpperCase()));
-    setBloomfilter(bloomFilter);
     setBlocksize(blocksize);
   }
 
@@ -254,104 +277,67 @@
    * name: i.e. 'printable' and ends in a ':' (Null passes are allowed because
    * <code>b</code> can be null when deserializing).  Cannot start with a '.'
    * either.
+   * @deprecated Use {@link #isLegalFamilyName(String)}
    */
   public static byte [] isLegalFamilyName(final byte [] b) {
+    String s = isLegalFamilyName(Bytes.toString(b));
+    return s == null? null: Bytes.toBytes(s);
+  }
+
+  /**
+   * @param b Family name.
+   * @return <code>b</code>
+   * @throws IllegalArgumentException If not null and not a legitimate family
+   * name: i.e. 'printable' and ends in a ':' (Null passes are allowed because
+   * <code>b</code> can be null when deserializing).  Cannot start with a '.'
+   * either.
+   */
+  public static String isLegalFamilyName(final String b) {
     if (b == null) {
       return b;
     }
-    if (b[0] == '.') {
+    if (b.charAt(0) == '.') {
       throw new IllegalArgumentException("Family names cannot start with a " +
-        "period: " + Bytes.toString(b));
+        "period: " + b);
     }
-    for (int i = 0; i < b.length; i++) {
-      if (Character.isISOControl(b[i]) || b[i] == ':') {
-        throw new IllegalArgumentException("Illegal character <" + b[i] +
-          ">. Family names cannot contain control characters or colons: " +
-          Bytes.toString(b));
+    for (int i = 0; i < b.length(); i++) {
+      char c = b.charAt(i);
+      if (Character.isISOControl(c) || c == ':') {
+        throw new IllegalArgumentException("Illegal character <" + c +
+          ">. Family names cannot contain control characters or colons: " + b);
       }
     }
     return b;
   }
 
   /**
-   * @return Name of this column family
+   * @return Name of this column family as a byte array.
+   * @deprecated Use {@link #getNameAsString()}; Later we'll rename getNameAsString
+   * as getName.
    */
   public byte [] getName() {
-    return name;
+    String name = (String)this.properties.get(NAME);
+    return name == null? null: Bytes.toBytes(name);
   }
-  
+
   /**
    * @return Name of this column family
    */
   public String getNameAsString() {
-    return Bytes.toString(this.name);
+    return (String)this.properties.get(NAME);
   }
 
-  /**
-   * @param key The key.
-   * @return The value.
-   */
-  public byte[] getValue(byte[] key) {
-    ImmutableBytesWritable ibw = values.get(new ImmutableBytesWritable(key));
-    if (ibw == null)
-      return null;
-    return ibw.get();
-  }
-
-  /**
-   * @param key The key.
-   * @return The value as a string.
-   */
-  public String getValue(String key) {
-    byte[] value = getValue(Bytes.toBytes(key));
-    if (value == null)
-      return null;
-    return Bytes.toString(value);
-  }
-
-  /**
-   * @return All values.
-   */
-  public Map<ImmutableBytesWritable,ImmutableBytesWritable> getValues() {
-    return Collections.unmodifiableMap(values);
-  }
-
-  /**
-   * @param key The key.
-   * @param value The value.
-   */
-  public void setValue(byte[] key, byte[] value) {
-    values.put(new ImmutableBytesWritable(key),
-      new ImmutableBytesWritable(value));
-  }
-
-  /**
-   * @param key Key whose key and value we're to remove from HCD parameters.
-   */
-  public void remove(final byte [] key) {
-    values.remove(new ImmutableBytesWritable(key));
-  }
-
-  /**
-   * @param key The key.
-   * @param value The value.
-   */
-  public void setValue(String key, String value) {
-    setValue(Bytes.toBytes(key), Bytes.toBytes(value));
-  }
-
   /** @return compression type being used for the column family */
   public Compression.Algorithm getCompression() {
-    String n = getValue(COMPRESSION);
-    return Compression.Algorithm.valueOf(n.toUpperCase());
+    Object v = this.properties.get(COMPRESSION);
+    return v == null? Compression.Algorithm.NONE:
+      Compression.Algorithm.valueOf(((String)v).toUpperCase());
   }
   
   /** @return maximum number of versions */
-  public synchronized int getMaxVersions() {
+  public int getMaxVersions() {
     if (this.cachedMaxVersions == -1) {
-      String value = getValue(HConstants.VERSIONS);
-      this.cachedMaxVersions = (value != null)?
-        Integer.valueOf(value).intValue(): DEFAULT_VERSIONS;
+      this.blocksize = getInt(HConstants.VERSIONS, DEFAULT_VERSIONS);
     }
     return this.cachedMaxVersions;
   }
@@ -360,27 +346,24 @@
    * @param maxVersions maximum number of versions
    */
   public void setMaxVersions(int maxVersions) {
-    setValue(HConstants.VERSIONS, Integer.toString(maxVersions));
+    this.properties.put(HConstants.VERSIONS, maxVersions);
   }
 
   /**
    * @return Blocksize.
    */
-  public synchronized int getBlocksize() {
-    if (this.blocksize == null) {
-      String value = getValue(BLOCKSIZE);
-      this.blocksize = (value != null)?
-        Integer.decode(value): Integer.valueOf(DEFAULT_BLOCKSIZE);
+  public int getBlocksize() {
+    if (this.blocksize == -1) {
+      this.blocksize = getInt(BLOCKSIZE, DEFAULT_BLOCKSIZE);
     }
-    return this.blocksize.intValue();
+    return this.blocksize;
   }
 
   /**
    * @param s
    */
   public void setBlocksize(int s) {
-    setValue(BLOCKSIZE, Integer.toString(s));
-    this.blocksize = null;
+    this.properties.put(BLOCKSIZE, s);
   }
 
   /**
@@ -404,17 +387,14 @@
       case GZ: compressionType = "GZ"; break;
       default: compressionType = "NONE"; break;
     }
-    setValue(COMPRESSION, compressionType);
+    this.properties.put(COMPRESSION, compressionType);
   }
 
   /**
    * @return True if we are to keep all in use HRegionServer cache.
    */
   public boolean isInMemory() {
-    String value = getValue(HConstants.IN_MEMORY);
-    if (value != null)
-      return Boolean.valueOf(value).booleanValue();
-    return DEFAULT_IN_MEMORY;
+    return getBoolean(HConstants.IN_MEMORY, DEFAULT_IN_MEMORY);
   }
   
   /**
@@ -422,93 +402,73 @@
    * cache
    */
   public void setInMemory(boolean inMemory) {
-    setValue(HConstants.IN_MEMORY, Boolean.toString(inMemory));
+    this.properties.put(HConstants.IN_MEMORY,
+      inMemory? Boolean.TRUE: Boolean.FALSE);
   }
 
   /**
    * @return Time-to-live of cell contents, in seconds.
    */
   public int getTimeToLive() {
-    String value = getValue(TTL);
-    return (value != null)? Integer.valueOf(value).intValue(): DEFAULT_TTL;
+    return getInt(TTL, DEFAULT_TTL);
   }
 
   /**
    * @param timeToLive Time-to-live of cell contents, in seconds.
    */
   public void setTimeToLive(int timeToLive) {
-    setValue(TTL, Integer.toString(timeToLive));
+    this.properties.put(TTL, timeToLive);
   }
 
   /**
    * @return True if MapFile blocks should be cached.
    */
   public boolean isBlockCacheEnabled() {
-    String value = getValue(BLOCKCACHE);
-    if (value != null)
-      return Boolean.valueOf(value).booleanValue();
-    return DEFAULT_BLOCKCACHE;
+    return getBoolean(BLOCKCACHE, DEFAULT_BLOCKCACHE);
   }
 
   /**
    * @param blockCacheEnabled True if MapFile blocks should be cached.
    */
   public void setBlockCacheEnabled(boolean blockCacheEnabled) {
-    setValue(BLOCKCACHE, Boolean.toString(blockCacheEnabled));
+    this.properties.put(BLOCKCACHE, blockCacheEnabled);
   }
 
   /**
    * @return true if a bloom filter is enabled
    */
   public boolean isBloomfilter() {
-    String value = getValue(BLOOMFILTER);
-    if (value != null)
-      return Boolean.valueOf(value).booleanValue();
-    return DEFAULT_BLOOMFILTER;
+    throw new NotImplementedException();
   }
 
   /**
    * @param onOff Enable/Disable bloom filter
    */
   public void setBloomfilter(final boolean onOff) {
-    setValue(BLOOMFILTER, Boolean.toString(onOff));
+    throw new NotImplementedException();
   }
 
   /**
-   * @param interval The number of entries that are added to the store MapFile before
-   * an index entry is added.
-   */
-  public void setMapFileIndexInterval(int interval) {
-    setValue(MAPFILE_INDEX_INTERVAL, Integer.toString(interval));
-  }
-
-  /**
    * @see java.lang.Object#toString()
    */
   @Override
   public String toString() {
-    StringBuffer s = new StringBuffer();
-    s.append('{');
-    s.append(HConstants.NAME);
-    s.append(" => '");
-    s.append(Bytes.toString(name));
-    s.append("'");
-    for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> e:
-        values.entrySet()) {
-      String key = Bytes.toString(e.getKey().get());
-      String value = Bytes.toString(e.getValue().get());
-      if (key != null && key.toUpperCase().equals(BLOOMFILTER)) {
-        // Don't emit bloomfilter.  Its not working.
-        continue;
-      }
-      s.append(", ");
-      s.append(key);
-      s.append(" => '");
-      s.append(value);
-      s.append("'");
+    StringWriter sw = new StringWriter();
+    try {
+      this.mapper.writeValue(sw, this);
+    } catch (JsonGenerationException e) {
+      e.printStackTrace();
+    } catch (JsonMappingException e) {
+      e.printStackTrace();
+    } catch (IOException e) {
+      e.printStackTrace();
     }
-    s.append('}');
-    return s.toString();
+    try {
+      sw.close();
+    } catch (IOException e) {
+      e.printStackTrace();
+    }
+    return sw.toString();
   }
 
   /**
@@ -533,9 +493,8 @@
    */
   @Override
   public int hashCode() {
-    int result = Bytes.hashCode(this.name);
+    int result = this.properties.hashCode();
     result ^= Byte.valueOf(COLUMN_DESCRIPTOR_VERSION).hashCode();
-    result ^= values.hashCode();
     return result;
   }
   
@@ -544,75 +503,26 @@
   public void readFields(DataInput in) throws IOException {
     int version = in.readByte();
     if (version < 6) {
-      if (version <= 2) {
-        Text t = new Text();
-        t.readFields(in);
-        this.name = t.getBytes();
-//        if(KeyValue.getFamilyDelimiterIndex(this.name, 0, this.name.length)
-//            > 0) {
-//          this.name = stripColon(this.name);
-//        }
-      } else {
-        this.name = Bytes.readByteArray(in);
-      }
-      this.values.clear();
-      setMaxVersions(in.readInt());
-      int ordinal = in.readInt();
-      setCompressionType(Compression.Algorithm.values()[ordinal]);
-      setInMemory(in.readBoolean());
-      setBloomfilter(in.readBoolean());
-      if (isBloomfilter() && version < 5) {
-        // If a bloomFilter is enabled and the column descriptor is less than
-        // version 5, we need to skip over it to read the rest of the column
-        // descriptor. There are no BloomFilterDescriptors written to disk for
-        // column descriptors with a version number >= 5
-        throw new UnsupportedClassVersionError(this.getClass().getName() +
-            " does not support backward compatibility with versions older " +
-            "than version 5");
-      }
-      if (version > 1) {
-        setBlockCacheEnabled(in.readBoolean());
-      }
-      if (version > 2) {
-       setTimeToLive(in.readInt());
-      }
+      throw new UnsupportedActionException("We don't migrate older than v6");
     } else {
-      // version 7+
-      this.name = Bytes.readByteArray(in);
-      this.values.clear();
-      int numValues = in.readInt();
-      for (int i = 0; i < numValues; i++) {
-        ImmutableBytesWritable key = new ImmutableBytesWritable();
-        ImmutableBytesWritable value = new ImmutableBytesWritable();
-        key.readFields(in);
-        value.readFields(in);
-        values.put(key, value);
-      }
-      if (version == 6) {
-        // Convert old values.
-        setValue(COMPRESSION, Compression.Algorithm.NONE.getName());
-      }
+      throw new UnsupportedActionException("No support for " +
+        "Writable#readFields -- fix for migration!!!!");
     }
   }
 
   public void write(DataOutput out) throws IOException {
-    out.writeByte(COLUMN_DESCRIPTOR_VERSION);
-    Bytes.writeByteArray(out, this.name);
-    out.writeInt(values.size());
-    for (Map.Entry<ImmutableBytesWritable, ImmutableBytesWritable> e:
-        values.entrySet()) {
-      e.getKey().write(out);
-      e.getValue().write(out);
-    }
+    throw new UnsupportedActionException("No support for Writable#write");
   }
 
   // Comparable
 
   public int compareTo(HColumnDescriptor o) {
-    int result = Bytes.compareTo(this.name, o.getName());
+    String myname = getNameAsString();
+    String hername = o.getNameAsString();
+    int result = myname.compareTo(hername);
     if (result == 0) {
-      // punt on comparison for ordering, just calculate difference
-      result = this.values.hashCode() - o.values.hashCode();
+      // Punt on comparison for ordering, just calculate difference
+      result = this.properties.hashCode() - o.properties.hashCode();
       if (result < 0)
         result = -1;
       else if (result > 0)
@@ -620,4 +530,82 @@
     }
     return result;
   }
-}
+
+  @Override
+  public void clear() {
+    this.properties.clear();
+  }
+
+  @Override
+  public boolean containsKey(Object key) {
+    return this.properties.containsKey(key);
+  }
+
+  @Override
+  public boolean containsValue(Object value) {
+    return this.properties.containsValue(value);
+  }
+
+  @Override
+  public Set<java.util.Map.Entry<String, Object>> entrySet() {
+    return this.properties.entrySet();
+  }
+
+  @Override
+  public Object get(Object key) {
+    return this.properties.get(key);
+  }
+
+  @Override
+  public boolean isEmpty() {
+    return this.properties.isEmpty();
+  }
+
+  @Override
+  public Set<String> keySet() {
+    return this.properties.keySet();
+  }
+
+  @Override
+  public Object put(String key, Object value) {
+    if (key.toUpperCase().equals(NAME)) {
+      throw new IllegalAccessError("Cannot set name post-construction");
+    }
+    return this.properties.put(key, value);
+  }
+
+  @Override
+  public void putAll(Map<? extends String, ? extends Object> m) {
+    this.properties.putAll(m);
+  }
+
+  @Override
+  public Object remove(Object key) {
+    return this.properties.remove(key);
+  }
+
+  @Override
+  public int size() {
+    return this.properties.size();
+  }
+
+  @Override
+  public Collection<Object> values() {
+    return this.properties.values();
+  }
+
+  private int getInt(final String key, final int defaultValue) {
+    Integer v = (Integer)this.properties.get(key);
+    return v == null? defaultValue: v.intValue();
+  }
+
+  private boolean getBoolean(final String key, final boolean defaultValue) {
+    Boolean v = (Boolean)this.properties.get(key);
+    return v == null? defaultValue: v.booleanValue();
+  }
+
+  private String getString(final String key, final String defaultValue) {
+    String v = (String)this.properties.get(key);
+    return v == null? defaultValue: v;
+  }
+}
\ No newline at end of file
