From cd3840d4c5381b397b20e1aeaa6aac848ddb74ff Mon Sep 17 00:00:00 2001
From: Gary Helmling <garyh@apache.org>
Date: Mon, 18 Apr 2016 02:03:18 -0700
Subject: [PATCH] HBASE-15658 Avoid excess meta cache clearing for
 RegionServerCallable

---
 .../org/apache/hadoop/hbase/client/MetaCache.java  |   2 +-
 .../hadoop/hbase/client/MetricsConnection.java     |   4 +-
 .../hadoop/hbase/client/RegionServerCallable.java  |  11 +-
 .../hadoop/hbase/client/RpcRetryingCaller.java     |   1 +
 .../hadoop/hbase/regionserver/RSRpcServices.java   |   3 +-
 .../apache/hadoop/hbase/client/TestMetaCache.java  | 302 ++++++++++++++-------
 6 files changed, 224 insertions(+), 99 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetaCache.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetaCache.java
index a1ff3d3..95b5950 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetaCache.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetaCache.java
@@ -55,7 +55,7 @@ public class MetaCache {
 
   // The presence of a server in the map implies it's likely that there is an
   // entry in cachedRegionLocations that map to this server; but the absence
-  // of a server in this map guarentees that there is no entry in cache that
+  // of a server in this map guarantees that there is no entry in cache that
   // maps to the absent server.
   // The access to this attribute must be protected by a lock on cachedRegionLocations
   private final Set<ServerName> cachedServers = new CopyOnWriteArraySet<>();
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java
index a7c2eda..b3c8180 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java
@@ -275,8 +275,8 @@ public class MetricsConnection implements StatisticTrackable {
   @VisibleForTesting protected final CallTracker putTracker;
   @VisibleForTesting protected final CallTracker multiTracker;
   @VisibleForTesting protected final RunnerStats runnerStats;
-  private final Counter metaCacheNumClearServer;
-  private final Counter metaCacheNumClearRegion;
+  @VisibleForTesting protected final Counter metaCacheNumClearServer;
+  @VisibleForTesting protected final Counter metaCacheNumClearRegion;
 
   // dynamic metrics
 
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionServerCallable.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionServerCallable.java
index c71fb2e..45acd16 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionServerCallable.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionServerCallable.java
@@ -27,6 +27,7 @@ import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HRegionLocation;
 import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.TableNotEnabledException;
 import org.apache.hadoop.hbase.protobuf.generated.ClientProtos.ClientService;
 import org.apache.hadoop.hbase.util.Bytes;
 
@@ -66,13 +67,19 @@ public abstract class RegionServerCallable<T> implements RetryingCallable<T> {
   /**
    * Prepare for connection to the server hosting region with row from tablename.  Does lookup
    * to find region location and hosting server.
-   * @param reload Set this to true if connection should re-find the region
+   * @param reload Set to true to re-check the table state
    * @throws IOException e
    */
   @Override
   public void prepare(final boolean reload) throws IOException {
+    // check table state if this is a retry
+    if (reload &&
+        !tableName.equals(TableName.META_TABLE_NAME) &&
+        getConnection().isTableDisabled(tableName)) {
+      throw new TableNotEnabledException(tableName.getNameAsString() + " is disabled.");
+    }
     try (RegionLocator regionLocator = connection.getRegionLocator(tableName)) {
-      this.location = regionLocator.getRegionLocation(row, reload);
+      this.location = regionLocator.getRegionLocation(row);
     }
     if (this.location == null) {
       throw new IOException("Failed to find location, tableName=" + tableName +
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RpcRetryingCaller.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RpcRetryingCaller.java
index bb19d5f..8240936 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RpcRetryingCaller.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RpcRetryingCaller.java
@@ -121,6 +121,7 @@ public class RpcRetryingCaller<T> {
     for (int tries = 0;; tries++) {
       long expectedSleep;
       try {
+        // bad cache entries are cleared in the call to RetryingCallable#throwable() in catch block
         callable.prepare(tries != 0); // if called with false, check table status on ZK
         interceptor.intercept(context.prepare(callable, tries));
         return callable.call(getRemainingTime(callTimeout));
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
index b91156f..dc31298 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java
@@ -1083,7 +1083,8 @@ public class RSRpcServices implements HBaseRPCErrorHandler,
    * @throws IOException if the specifier is not null,
    *    but failed to find the region
    */
-  Region getRegion(
+  @VisibleForTesting
+  public Region getRegion(
       final RegionSpecifier regionSpecifier) throws IOException {
     ByteString value = regionSpecifier.getValue();
     RegionSpecifierType type = regionSpecifier.getType();
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMetaCache.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMetaCache.java
index a388715..7499ab7 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMetaCache.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMetaCache.java
@@ -26,16 +26,15 @@ import org.apache.hadoop.hbase.exceptions.ClientExceptionsUtil;
 import org.apache.hadoop.hbase.exceptions.RegionOpeningException;
 import org.apache.hadoop.hbase.protobuf.generated.ClientProtos;
 import org.apache.hadoop.hbase.protobuf.generated.ClientProtos.GetResponse;
+import org.apache.hadoop.hbase.protobuf.generated.HBaseProtos;
 import org.apache.hadoop.hbase.quotas.ThrottlingException;
 import org.apache.hadoop.hbase.regionserver.HRegionServer;
 import org.apache.hadoop.hbase.regionserver.RSRpcServices;
+import org.apache.hadoop.hbase.regionserver.Region;
 import org.apache.hadoop.hbase.testclassification.ClientTests;
 import org.apache.hadoop.hbase.testclassification.MediumTests;
 import org.apache.hadoop.hbase.util.Bytes;
-import org.apache.hadoop.hbase.util.JVMClusterUtil;
-import org.junit.After;
 import org.junit.AfterClass;
-import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
@@ -44,7 +43,11 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.junit.Assert.*;
+import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
 @Category({MediumTests.class, ClientTests.class})
 public class TestMetaCache {
@@ -52,8 +55,8 @@ public class TestMetaCache {
   private static final TableName TABLE_NAME = TableName.valueOf("test_table");
   private static final byte[] FAMILY = Bytes.toBytes("fam1");
   private static final byte[] QUALIFIER = Bytes.toBytes("qual");
-  private ConnectionManager.HConnectionImplementation conn;
-  private HRegionServer badRS;
+
+  private static HRegionServer badRS;
 
   /**
    * @throws java.lang.Exception
@@ -61,10 +64,18 @@ public class TestMetaCache {
   @BeforeClass
   public static void setUpBeforeClass() throws Exception {
     Configuration conf = TEST_UTIL.getConfiguration();
-    conf.set("hbase.client.retries.number", "1");
+    conf.setStrings(HConstants.REGION_SERVER_IMPL,
+        RegionServerWithFakeRpcServices.class.getName());
     TEST_UTIL.startMiniCluster(1);
     TEST_UTIL.getHBaseCluster().waitForActiveAndReadyMaster();
     TEST_UTIL.waitUntilAllRegionsAssigned(TABLE_NAME.META_TABLE_NAME);
+    badRS = TEST_UTIL.getHBaseCluster().getRegionServer(0);
+    assertTrue(badRS.getRSRpcServices() instanceof FakeRSRpcServices);
+    HTableDescriptor table = new HTableDescriptor(TABLE_NAME);
+    HColumnDescriptor fam = new HColumnDescriptor(FAMILY);
+    fam.setMaxVersions(2);
+    table.addFamily(fam);
+    TEST_UTIL.createTable(table, null);
   }
 
 
@@ -76,88 +87,101 @@ public class TestMetaCache {
     TEST_UTIL.shutdownMiniCluster();
   }
 
-  /**
-   * @throws java.lang.Exception
-   */
-  @Before
-  public void setup() throws Exception {
-    MiniHBaseCluster cluster = TEST_UTIL.getHBaseCluster();
-
-    cluster.getConfiguration().setStrings(HConstants.REGION_SERVER_IMPL,
-      RegionServerWithFakeRpcServices.class.getName());
-    JVMClusterUtil.RegionServerThread rsThread = cluster.startRegionServer();
-    rsThread.waitForServerOnline();
-    badRS = rsThread.getRegionServer();
-    assertTrue(badRS.getRSRpcServices() instanceof FakeRSRpcServices);
-    cluster.getConfiguration().setStrings(HConstants.REGION_SERVER_IMPL,
-      HRegionServer.class.getName());
+  @Test
+  public void testPreserveMetaCacheOnException() throws Exception {
+    ((FakeRSRpcServices)badRS.getRSRpcServices()).setExceptionInjector(
+        new RoundRobinExceptionInjector());
+    Configuration conf = new Configuration(TEST_UTIL.getConfiguration());
+    conf.set("hbase.client.retries.number", "1");
+    ConnectionManager.HConnectionImplementation conn =
+        (ConnectionManager.HConnectionImplementation) ConnectionFactory.createConnection(conf);
+    try {
+      Table table = conn.getTable(TABLE_NAME);
+      byte[] row = Bytes.toBytes("row1");
 
-    assertEquals(2, cluster.getRegionServerThreads().size());
+      Put put = new Put(row);
+      put.addColumn(FAMILY, QUALIFIER, Bytes.toBytes(10));
+      Get get = new Get(row);
+      Append append = new Append(row);
+      append.add(FAMILY, QUALIFIER, Bytes.toBytes(11));
+      Increment increment = new Increment(row);
+      increment.addColumn(FAMILY, QUALIFIER, 10);
+      Delete delete = new Delete(row);
+      delete.addColumn(FAMILY, QUALIFIER);
+      RowMutations mutations = new RowMutations(row);
+      mutations.add(put);
+      mutations.add(delete);
 
-    conn = (ConnectionManager.HConnectionImplementation)ConnectionFactory.createConnection(
-      TEST_UTIL.getConfiguration());
-    HTableDescriptor table = new HTableDescriptor(TABLE_NAME);
-    HColumnDescriptor fam = new HColumnDescriptor(FAMILY);
-    fam.setMaxVersions(2);
-    table.addFamily(fam);
-    try (Admin admin = conn.getAdmin()) {
-      admin.createTable(table, HBaseTestingUtility.KEYS_FOR_HBA_CREATE_TABLE);
+      Exception exp;
+      boolean success;
+      for (int i = 0; i < 50; i++) {
+        exp = null;
+        success = false;
+        try {
+          table.put(put);
+          // If at least one operation succeeded, we should have cached the region location.
+          success = true;
+          table.get(get);
+          table.append(append);
+          table.increment(increment);
+          table.delete(delete);
+          table.mutateRow(mutations);
+        } catch (IOException ex) {
+          // Only keep track of the last exception that updated the meta cache
+          if (ClientExceptionsUtil.isMetaClearingException(ex) || success) {
+            exp = ex;
+          }
+        }
+        // Do not test if we did not touch the meta cache in this iteration.
+        if (exp != null && ClientExceptionsUtil.isMetaClearingException(exp)) {
+          assertNull(conn.getCachedLocation(TABLE_NAME, row));
+        } else if (success) {
+          assertNotNull(conn.getCachedLocation(TABLE_NAME, row));
+        }
+      }
+    } finally {
+      conn.close();
     }
-    TEST_UTIL.waitUntilAllRegionsAssigned(TABLE_NAME);
-  }
-
-  /**
-   * @throws java.lang.Exception
-   */
-  @After
-  public void tearDown() throws Exception {
-    // Nothing to do.
   }
 
   @Test
-  public void testPreserveMetaCacheOnException() throws Exception {
-    Table table = conn.getTable(TABLE_NAME);
-    byte[] row = badRS.getOnlineRegions().get(0).getRegionInfo().getStartKey();
-
-    Put put = new Put(row);
-    put.addColumn(FAMILY, QUALIFIER, Bytes.toBytes(10));
-    Get get = new Get(row);
-    Append append = new Append(row);
-    append.add(FAMILY, QUALIFIER, Bytes.toBytes(11));
-    Increment increment = new Increment(row);
-    increment.addColumn(FAMILY, QUALIFIER, 10);
-    Delete delete = new Delete(row);
-    delete.addColumn(FAMILY, QUALIFIER);
-    RowMutations mutations = new RowMutations(row);
-    mutations.add(put);
-    mutations.add(delete);
-
-    Exception exp;
-    boolean success;
-    for (int i = 0; i < 50; i++) {
-      exp = null;
-      success =false;
+  public void testCacheClearingOnCallQueueTooBig() throws Exception {
+    ((FakeRSRpcServices)badRS.getRSRpcServices()).setExceptionInjector(
+        new CallQueueTooBigExceptionInjector());
+    Configuration conf = new Configuration(TEST_UTIL.getConfiguration());
+    conf.set("hbase.client.retries.number", "2");
+    conf.set(MetricsConnection.CLIENT_SIDE_METRICS_ENABLED_KEY, "true");
+    ConnectionManager.HConnectionImplementation conn =
+        (ConnectionManager.HConnectionImplementation) ConnectionFactory.createConnection(conf);
+    try {
+      Table table = conn.getTable(TABLE_NAME);
+      byte[] row = Bytes.toBytes("row1");
+
+      Put put = new Put(row);
+      put.addColumn(FAMILY, QUALIFIER, Bytes.toBytes(10));
+      table.put(put);
+
+      // obtain the client metrics
+      MetricsConnection metrics = conn.getConnectionMetrics();
+      long preGetRegionClears = metrics.metaCacheNumClearRegion.count();
+      long preGetServerClears = metrics.metaCacheNumClearServer.count();
+
+      // attempt a get on the test table
+      Get get = new Get(row);
       try {
-        table.put(put);
-        // If at least one operation succeeded, we should have cached the region location.
-        success = true;
         table.get(get);
-        table.append(append);
-        table.increment(increment);
-        table.delete(delete);
-        table.mutateRow(mutations);
-      } catch (IOException ex) {
-        // Only keep track of the last exception that updated the meta cache
-        if (ClientExceptionsUtil.isMetaClearingException(ex) || success) {
-          exp = ex;
-        }
-      }
-      // Do not test if we did not touch the meta cache in this iteration.
-      if(exp != null && ClientExceptionsUtil.isMetaClearingException(exp)) {
-        assertNull(conn.getCachedLocation(TABLE_NAME, row));
-      } else if (success) {
-        assertNotNull(conn.getCachedLocation(TABLE_NAME, row));
+        fail("Expected CallQueueTooBigException");
+      } catch (RetriesExhaustedException ree) {
+        // expected
       }
+
+      // verify that no cache clearing took place
+      long postGetRegionClears = metrics.metaCacheNumClearRegion.count();
+      long postGetServerClears = metrics.metaCacheNumClearServer.count();
+      assertEquals(preGetRegionClears, postGetRegionClears);
+      assertEquals(preGetServerClears, postGetServerClears);
+    } finally {
+      conn.close();
     }
   }
 
@@ -172,7 +196,8 @@ public class TestMetaCache {
     }};
   }
 
-  protected static class RegionServerWithFakeRpcServices extends HRegionServer {
+  public static class RegionServerWithFakeRpcServices extends HRegionServer {
+    private FakeRSRpcServices rsRpcServices;
 
     public RegionServerWithFakeRpcServices(Configuration conf, CoordinatedStateManager cp)
       throws IOException, InterruptedException {
@@ -181,47 +206,115 @@ public class TestMetaCache {
 
     @Override
     protected RSRpcServices createRpcServices() throws IOException {
-      return new FakeRSRpcServices(this);
+      this.rsRpcServices = new FakeRSRpcServices(this);
+      return rsRpcServices;
+    }
+
+    public void setExceptionInjector(ExceptionInjector injector) {
+      rsRpcServices.setExceptionInjector(injector);
     }
   }
 
-  protected static class FakeRSRpcServices extends RSRpcServices {
+  public static class FakeRSRpcServices extends RSRpcServices {
 
-    private int numReqs = -1;
-    private int expCount = -1;
-    private List<Throwable> metaCachePreservingExceptions = metaCachePreservingExceptions();
+    private ExceptionInjector exceptions;
 
     public FakeRSRpcServices(HRegionServer rs) throws IOException {
       super(rs);
+      exceptions = new RoundRobinExceptionInjector();
+    }
+
+    public void setExceptionInjector(ExceptionInjector injector) {
+      this.exceptions = injector;
     }
 
     @Override
     public GetResponse get(final RpcController controller,
                            final ClientProtos.GetRequest request) throws ServiceException {
-      throwSomeExceptions();
+      exceptions.throwOnGet(this, request);
       return super.get(controller, request);
     }
 
     @Override
     public ClientProtos.MutateResponse mutate(final RpcController controller,
-                                              final ClientProtos.MutateRequest request) throws ServiceException {
-      throwSomeExceptions();
+        final ClientProtos.MutateRequest request) throws ServiceException {
+      exceptions.throwOnMutate(this, request);
       return super.mutate(controller, request);
     }
 
     @Override
     public ClientProtos.ScanResponse scan(final RpcController controller,
-                                          final ClientProtos.ScanRequest request) throws ServiceException {
-      throwSomeExceptions();
+        final ClientProtos.ScanRequest request) throws ServiceException {
+      exceptions.throwOnScan(this, request);
       return super.scan(controller, request);
     }
 
+    public Region getRegion(
+        final HBaseProtos.RegionSpecifier regionSpecifier) throws IOException {
+      return super.getRegion(regionSpecifier);
+    }
+  }
+
+  public static abstract class ExceptionInjector {
+    protected boolean isTestTable(FakeRSRpcServices rpcServices,
+                                  HBaseProtos.RegionSpecifier regionSpec) throws ServiceException {
+      try {
+        return TABLE_NAME.equals(
+            rpcServices.getRegion(regionSpec).getTableDesc().getTableName());
+      } catch (IOException ioe) {
+        throw new ServiceException(ioe);
+      }
+    }
+
+    public abstract void throwOnGet(FakeRSRpcServices rpcServices, ClientProtos.GetRequest request)
+        throws ServiceException;
+
+    public abstract void throwOnMutate(FakeRSRpcServices rpcServices, ClientProtos.MutateRequest request)
+        throws ServiceException;
+
+    public abstract void throwOnScan(FakeRSRpcServices rpcServices, ClientProtos.ScanRequest request)
+        throws ServiceException;
+  }
+
+  /**
+   * Rotates through the possible cache clearing and non-cache clearing exceptions
+   * for requests.
+   */
+  public static class RoundRobinExceptionInjector extends ExceptionInjector {
+    private int numReqs = -1;
+    private int expCount = -1;
+    private List<Throwable> metaCachePreservingExceptions = metaCachePreservingExceptions();
+
+    public void throwOnGet(FakeRSRpcServices rpcServices, ClientProtos.GetRequest request)
+        throws ServiceException {
+      throwSomeExceptions(rpcServices, request.getRegion());
+    }
+
+    public void throwOnMutate(FakeRSRpcServices rpcServices, ClientProtos.MutateRequest request)
+        throws ServiceException {
+      throwSomeExceptions(rpcServices, request.getRegion());
+    }
+
+    public void throwOnScan(FakeRSRpcServices rpcServices, ClientProtos.ScanRequest request)
+        throws ServiceException {
+      if (!request.hasScannerId()) {
+        // only handle initial scan requests
+        throwSomeExceptions(rpcServices, request.getRegion());
+      }
+    }
+
     /**
      * Throw some exceptions. Mostly throw exceptions which do not clear meta cache.
      * Periodically throw NotSevingRegionException which clears the meta cache.
      * @throws ServiceException
      */
-    private void throwSomeExceptions() throws ServiceException {
+    private void throwSomeExceptions(FakeRSRpcServices rpcServices,
+                                     HBaseProtos.RegionSpecifier regionSpec)
+        throws ServiceException {
+      if (!isTestTable(rpcServices, regionSpec)) {
+        return;
+      }
+
       numReqs++;
       // Succeed every 5 request, throw cache clearing exceptions twice every 5 requests and throw
       // meta cache preserving exceptions otherwise.
@@ -236,8 +329,31 @@ public class TestMetaCache {
       // single Gets.
       expCount++;
       Throwable t = metaCachePreservingExceptions.get(
-        expCount % metaCachePreservingExceptions.size());
+          expCount % metaCachePreservingExceptions.size());
       throw new ServiceException(t);
     }
   }
+
+  /**
+   * Throws CallQueueTooBigException for all gets.
+   */
+  public static class CallQueueTooBigExceptionInjector extends ExceptionInjector {
+    @Override
+    public void throwOnGet(FakeRSRpcServices rpcServices, ClientProtos.GetRequest request)
+        throws ServiceException {
+      if (isTestTable(rpcServices, request.getRegion())) {
+        throw new ServiceException(new CallQueueTooBigException());
+      }
+    }
+
+    @Override
+    public void throwOnMutate(FakeRSRpcServices rpcServices, ClientProtos.MutateRequest request)
+        throws ServiceException {
+    }
+
+    @Override
+    public void throwOnScan(FakeRSRpcServices rpcServices, ClientProtos.ScanRequest request)
+        throws ServiceException {
+    }
+  }
 }
\ No newline at end of file
-- 
2.5.0

