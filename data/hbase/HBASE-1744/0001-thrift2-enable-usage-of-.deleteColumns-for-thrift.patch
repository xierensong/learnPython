From ef1dd48f3ce01a064931d27c40c24e557e5c335d Mon Sep 17 00:00:00 2001
From: Bob Copeland <me@bobcopeland.com>
Date: Mon, 10 Oct 2011 17:11:04 -0400
Subject: [PATCH] thrift2: enable usage of .deleteColumns() for thrift

This change adds an enum, TDeleteType, which can be passed to
the server to select wheterh deleteColumn() (default) or
deleteColumns() is used.
---
 .../hadoop/hbase/thrift2/ThriftUtilities.java      |   12 ++-
 .../hadoop/hbase/thrift2/generated/TDelete.java    |  113 +++++++++++++++++++-
 .../hbase/thrift2/generated/TDeleteType.java       |   49 +++++++++
 .../org/apache/hadoop/hbase/thrift2/hbase.thrift   |   15 +++-
 4 files changed, 182 insertions(+), 7 deletions(-)
 create mode 100644 src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDeleteType.java

diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/ThriftUtilities.java b/src/main/java/org/apache/hadoop/hbase/thrift2/ThriftUtilities.java
index dacd190..9aa31f3 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/ThriftUtilities.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/ThriftUtilities.java
@@ -198,9 +198,17 @@ public class ThriftUtilities {
       for (TColumn column : in.getColumns()) {
         if (column.isSetQualifier()) {
           if (column.isSetTimestamp()) {
-            out.deleteColumn(column.getFamily(), column.getQualifier(), column.getTimestamp());
+            if (in.isSetDeleteType() &&
+                in.getDeleteType().equals(TDeleteType.DELETE_COLUMNS))
+              out.deleteColumns(column.getFamily(), column.getQualifier(), column.getTimestamp());
+            else
+              out.deleteColumn(column.getFamily(), column.getQualifier(), column.getTimestamp());
           } else {
-            out.deleteColumn(column.getFamily(), column.getQualifier());
+            if (in.isSetDeleteType() &&
+                in.getDeleteType().equals(TDeleteType.DELETE_COLUMNS))
+              out.deleteColumns(column.getFamily(), column.getQualifier());
+            else
+              out.deleteColumn(column.getFamily(), column.getQualifier());
           }
 
         } else {
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDelete.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDelete.java
index 7576cb1..d3df039 100644
--- a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDelete.java
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDelete.java
@@ -34,14 +34,14 @@ import org.slf4j.LoggerFactory;
  * Specifying a family and a column qualifier in a TColumn will delete only
  * this qualifier. If a timestamp is specified only versions equal
  * to this timestamp will be deleted. If no timestamp is specified the
- * most recent version will be deleted.
+ * most recent version will be deleted.  To delete all previous versions,
+ * specify the DELETE_COLUMNS TDeleteType.
  * 
  * The top level timestamp is only used if a complete row should be deleted
  * (i.e. no columns are passed) and if it is specified it works the same way
  * as if you had added a TColumn for every column family and this timestamp
  * (i.e. all versions older than or equal in all column families will be deleted)
  * 
- * TODO: This is missing the KeyValue.Type.DeleteColumn semantic. I could add a DeleteType or something like that
  */
 public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields>, java.io.Serializable, Cloneable {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDelete");
@@ -49,16 +49,27 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
   private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)1);
   private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
   private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
+  private static final org.apache.thrift.protocol.TField DELETE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("deleteType", org.apache.thrift.protocol.TType.I32, (short)4);
 
   public ByteBuffer row; // required
   public List<TColumn> columns; // required
   public long timestamp; // required
+  /**
+   * 
+   * @see TDeleteType
+   */
+  public TDeleteType deleteType; // required
 
   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
     ROW((short)1, "row"),
     COLUMNS((short)2, "columns"),
-    TIMESTAMP((short)3, "timestamp");
+    TIMESTAMP((short)3, "timestamp"),
+    /**
+     * 
+     * @see TDeleteType
+     */
+    DELETE_TYPE((short)4, "deleteType");
 
     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -79,6 +90,8 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
           return COLUMNS;
         case 3: // TIMESTAMP
           return TIMESTAMP;
+        case 4: // DELETE_TYPE
+          return DELETE_TYPE;
         default:
           return null;
       }
@@ -132,6 +145,8 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
             new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumn.class))));
     tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
         new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
+    tmpMap.put(_Fields.DELETE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("deleteType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
+        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDeleteType.class)));
     metaDataMap = Collections.unmodifiableMap(tmpMap);
     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDelete.class, metaDataMap);
   }
@@ -164,6 +179,9 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
       this.columns = __this__columns;
     }
     this.timestamp = other.timestamp;
+    if (other.isSetDeleteType()) {
+      this.deleteType = other.deleteType;
+    }
   }
 
   public TDelete deepCopy() {
@@ -176,6 +194,7 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
     this.columns = null;
     setTimestampIsSet(false);
     this.timestamp = 0;
+    this.deleteType = null;
   }
 
   public byte[] getRow() {
@@ -274,6 +293,38 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
     __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
   }
 
+  /**
+   * 
+   * @see TDeleteType
+   */
+  public TDeleteType getDeleteType() {
+    return this.deleteType;
+  }
+
+  /**
+   * 
+   * @see TDeleteType
+   */
+  public TDelete setDeleteType(TDeleteType deleteType) {
+    this.deleteType = deleteType;
+    return this;
+  }
+
+  public void unsetDeleteType() {
+    this.deleteType = null;
+  }
+
+  /** Returns true if field deleteType is set (has been assigned a value) and false otherwise */
+  public boolean isSetDeleteType() {
+    return this.deleteType != null;
+  }
+
+  public void setDeleteTypeIsSet(boolean value) {
+    if (!value) {
+      this.deleteType = null;
+    }
+  }
+
   public void setFieldValue(_Fields field, Object value) {
     switch (field) {
     case ROW:
@@ -300,6 +351,14 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
       }
       break;
 
+    case DELETE_TYPE:
+      if (value == null) {
+        unsetDeleteType();
+      } else {
+        setDeleteType((TDeleteType)value);
+      }
+      break;
+
     }
   }
 
@@ -314,6 +373,9 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
     case TIMESTAMP:
       return Long.valueOf(getTimestamp());
 
+    case DELETE_TYPE:
+      return getDeleteType();
+
     }
     throw new IllegalStateException();
   }
@@ -331,6 +393,8 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
       return isSetColumns();
     case TIMESTAMP:
       return isSetTimestamp();
+    case DELETE_TYPE:
+      return isSetDeleteType();
     }
     throw new IllegalStateException();
   }
@@ -375,6 +439,15 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
         return false;
     }
 
+    boolean this_present_deleteType = true && this.isSetDeleteType();
+    boolean that_present_deleteType = true && that.isSetDeleteType();
+    if (this_present_deleteType || that_present_deleteType) {
+      if (!(this_present_deleteType && that_present_deleteType))
+        return false;
+      if (!this.deleteType.equals(that.deleteType))
+        return false;
+    }
+
     return true;
   }
 
@@ -421,6 +494,16 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
         return lastComparison;
       }
     }
+    lastComparison = Boolean.valueOf(isSetDeleteType()).compareTo(typedOther.isSetDeleteType());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetDeleteType()) {
+      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteType, typedOther.deleteType);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
     return 0;
   }
 
@@ -471,6 +554,13 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
             org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
           }
           break;
+        case 4: // DELETE_TYPE
+          if (field.type == org.apache.thrift.protocol.TType.I32) {
+            this.deleteType = TDeleteType.findByValue(iprot.readI32());
+          } else { 
+            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
+          }
+          break;
         default:
           org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
       }
@@ -510,6 +600,13 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
       oprot.writeI64(this.timestamp);
       oprot.writeFieldEnd();
     }
+    if (this.deleteType != null) {
+      if (isSetDeleteType()) {
+        oprot.writeFieldBegin(DELETE_TYPE_FIELD_DESC);
+        oprot.writeI32(this.deleteType.getValue());
+        oprot.writeFieldEnd();
+      }
+    }
     oprot.writeFieldStop();
     oprot.writeStructEnd();
   }
@@ -542,6 +639,16 @@ public class TDelete implements org.apache.thrift.TBase<TDelete, TDelete._Fields
       sb.append(this.timestamp);
       first = false;
     }
+    if (isSetDeleteType()) {
+      if (!first) sb.append(", ");
+      sb.append("deleteType:");
+      if (this.deleteType == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.deleteType);
+      }
+      first = false;
+    }
     sb.append(")");
     return sb.toString();
   }
diff --git a/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDeleteType.java b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDeleteType.java
new file mode 100644
index 0000000..2abdee0
--- /dev/null
+++ b/src/main/java/org/apache/hadoop/hbase/thrift2/generated/TDeleteType.java
@@ -0,0 +1,49 @@
+/**
+ * Autogenerated by Thrift Compiler (0.7.0)
+ *
+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
+ */
+package org.apache.hadoop.hbase.thrift2.generated;
+
+
+import java.util.Map;
+import java.util.HashMap;
+import org.apache.thrift.TEnum;
+
+/**
+ * Specify type of delete:
+ *  - DELETE_COLUMN means exactly one version will be removed,
+ *  - DELETE_COLUMNS means previous versions will also be removed.
+ */
+public enum TDeleteType implements org.apache.thrift.TEnum {
+  DELETE_COLUMN(0),
+  DELETE_COLUMNS(1);
+
+  private final int value;
+
+  private TDeleteType(int value) {
+    this.value = value;
+  }
+
+  /**
+   * Get the integer value of this enum value, as defined in the Thrift IDL.
+   */
+  public int getValue() {
+    return value;
+  }
+
+  /**
+   * Find a the enum type by its integer value, as defined in the Thrift IDL.
+   * @return null if the value is not found.
+   */
+  public static TDeleteType findByValue(int value) { 
+    switch (value) {
+      case 0:
+        return DELETE_COLUMN;
+      case 1:
+        return DELETE_COLUMNS;
+      default:
+        return null;
+    }
+  }
+}
diff --git a/src/main/resources/org/apache/hadoop/hbase/thrift2/hbase.thrift b/src/main/resources/org/apache/hadoop/hbase/thrift2/hbase.thrift
index 28fe58a..81013da 100644
--- a/src/main/resources/org/apache/hadoop/hbase/thrift2/hbase.thrift
+++ b/src/main/resources/org/apache/hadoop/hbase/thrift2/hbase.thrift
@@ -68,6 +68,16 @@ struct TResult {
 }
 
 /**
+ * Specify type of delete:
+ *  - DELETE_COLUMN means exactly one version will be removed,
+ *  - DELETE_COLUMNS means previous versions will also be removed.
+ */
+enum TDeleteType {
+  DELETE_COLUMN = 0,
+  DELETE_COLUMNS = 1
+}
+
+/**
  * Used to perform Get operations on a single row.
  *
  * The scope can be further narrowed down by specifying a list of
@@ -124,19 +134,20 @@ struct TPut {
  * Specifying a family and a column qualifier in a TColumn will delete only
  * this qualifier. If a timestamp is specified only versions equal
  * to this timestamp will be deleted. If no timestamp is specified the
- * most recent version will be deleted.
+ * most recent version will be deleted.  To delete all previous versions,
+ * specify the DELETE_COLUMNS TDeleteType.
  *
  * The top level timestamp is only used if a complete row should be deleted
  * (i.e. no columns are passed) and if it is specified it works the same way
  * as if you had added a TColumn for every column family and this timestamp
  * (i.e. all versions older than or equal in all column families will be deleted)
  *
- * TODO: This is missing the KeyValue.Type.DeleteColumn semantic. I could add a DeleteType or something like that
  */
 struct TDelete {
   1: required binary row,
   2: optional list<TColumn> columns
   3: optional i64 timestamp
+  4: optional TDeleteType deleteType
 }
 
 /**
-- 
1.7.2.5

