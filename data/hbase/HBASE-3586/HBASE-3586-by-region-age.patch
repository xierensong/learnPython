diff --git a/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java b/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java
index 3d102c1..dd4d7f7 100644
--- a/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java
+++ b/src/main/java/org/apache/hadoop/hbase/master/LoadBalancer.java
@@ -25,6 +25,7 @@ import java.util.Comparator;
 import java.util.List;
 import java.util.Map;
 import java.util.NavigableSet;
+import java.util.PriorityQueue;
 import java.util.Random;
 import java.util.TreeMap;
 import java.util.TreeSet;
@@ -77,6 +78,8 @@ public class LoadBalancer {
    * <li>Iterate down the most loaded servers, shedding regions from each so
    *     each server hosts exactly <b>MAX</b> regions.  Stop once you reach a
    *     server that already has &lt;= <b>MAX</b> regions.
+   *     <p>
+   *     When selecting regions, choose young regions first.
    *
    * <li>Iterate down the least loaded servers, assigning regions so each server
    *     has exactly </b>MIN</b> regions.  Stop once you reach a server that
@@ -184,7 +187,9 @@ public class LoadBalancer {
       List<HRegionInfo> regions = server.getValue();
       int numToOffload = Math.min(regionCount - max, regions.size());
       int numTaken = 0;
-      for (HRegionInfo hri: regions) {
+      // regions are added to the tail of the list
+      for (int i = regions.size()-1; i >= 0; i--) {
+        HRegionInfo hri = regions.get(i);
         // Don't rebalance meta regions.
         if (hri.isMetaRegion()) continue;
         regionsToMove.add(new RegionPlan(hri, serverInfo, null));
