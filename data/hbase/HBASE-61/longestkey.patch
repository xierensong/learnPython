--- TFile.java	2009-02-01 00:49:25.000000000 -0800
+++ /tmp/TFile.stack.java	2009-02-01 00:48:08.000000000 -0800
@@ -595,6 +595,7 @@
             throw new IllegalStateException("Incorrect key length: expected="
                 + expectedLength + " actual=" + len);
           }
+          metaTFileMeta.checkLongestKey(len);
 
           Utils.writeVInt(blkAppender, len);
           blkAppender.write(key, 0, len);
@@ -1386,9 +1387,7 @@
         endLocation = end;
 
         valTransferBuffer = new BytesWritable();
-        // TODO: remember the longest key in a TFile, and use it to replace
-        // MAX_KEY_SIZE.
-        keyBuffer = new byte[MAX_KEY_SIZE];
+        keyBuffer = new byte[reader.metaTFileMeta.getLongestKey()];
         keyBufferInputStream = new ResettableByteArrayInputStream(keyBuffer, 0);
         keyDataInputStream = new DataInputStream(keyBufferInputStream);
         valueBufferInputStream = new ChunkDecoder();
@@ -2129,6 +2128,7 @@
     private long recordCount;
     private final String strComparator;
     private final BytesComparator comparator;
+    private int longestkey = -1;
 
     // ctor for writes
     public MetaBlockTFileMeta(String comparator) {
@@ -2148,6 +2148,7 @@
       recordCount = Utils.readVLong(in);
       strComparator = Utils.readString(in);
       comparator = makeComparator(strComparator);
+      this.longestkey = Utils.readVInt(in);
     }
 
     @SuppressWarnings("unchecked")
@@ -2184,6 +2185,7 @@
       TFile.API_VERSION.write(out);
       Utils.writeVLong(out, recordCount);
       Utils.writeString(out, strComparator);
+      Utils.writeVInt(out, this.longestkey);
     }
 
     public long getRecordCount() {
@@ -2193,6 +2195,16 @@
     public void incRecordCount() {
       ++recordCount;
     }
+    
+    public void checkLongestKey(final int keyLength) {
+      if (this.longestkey < keyLength) {
+        this.longestkey = keyLength;
+      }
+    }
+    
+    public int getLongestKey() {
+      return this.longestkey;
+    }
 
     public boolean isSorted() {
       return !strComparator.equals("");
