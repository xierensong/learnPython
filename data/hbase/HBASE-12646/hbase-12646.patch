From d784b6e8e60dfa079731fa002cbadb9f52adca01 Mon Sep 17 00:00:00 2001
From: Jonathan M Hsieh <jmhsieh@apache.org>
Date: Sat, 6 Dec 2014 08:47:14 -0800
Subject: [PATCH] HBASE-xxxxx Add MobPath to HFileLink Resolver

---
 .../java/org/apache/hadoop/hbase/io/HFileLink.java | 29 ++++++++++++++++++----
 .../apache/hadoop/hbase/snapshot/SnapshotInfo.java |  8 +++++-
 2 files changed, 31 insertions(+), 6 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/HFileLink.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/HFileLink.java
index 5b2b874..6e97a76 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/HFileLink.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/HFileLink.java
@@ -31,6 +31,7 @@ import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.HRegionInfo;
+import org.apache.hadoop.hbase.mob.MobConstants;
 import org.apache.hadoop.hbase.regionserver.HRegion;
 import org.apache.hadoop.hbase.regionserver.StoreFileInfo;
 import org.apache.hadoop.hbase.util.FSUtils;
@@ -89,6 +90,7 @@ public class HFileLink extends FileLink {
 
   private final Path archivePath;
   private final Path originPath;
+  private final Path mobPath;
   private final Path tempPath;
 
   /**
@@ -103,14 +105,26 @@ public class HFileLink extends FileLink {
   /**
    * @param rootDir Path to the root directory where hbase files are stored
    * @param archiveDir Path to the hbase archive directory
+   * @param mobDir path to the hbase mob directory
+   * @param path The path of the HFile Link.
+   */
+    public HFileLink(final Path rootDir, final Path archiveDir, final Path mobDir, final Path path) {
+        Path hfilePath = getRelativeTablePath(path);
+        this.tempPath = new Path(new Path(rootDir, HConstants.HBASE_TEMP_DIRECTORY), hfilePath);
+        this.originPath = new Path(rootDir, hfilePath);
+        this.mobPath = new Path(mobDir, hfilePath);
+        this.archivePath = new Path(archiveDir, hfilePath);
+        setLocations(originPath, mobPath, tempPath, archivePath);
+    }
+
+
+    /**
+   * @param rootDir Path to the root directory where hbase files are stored
+   * @param archiveDir Path to the hbase archive directory
    * @param path The path of the HFile Link.
    */
   public HFileLink(final Path rootDir, final Path archiveDir, final Path path) {
-    Path hfilePath = getRelativeTablePath(path);
-    this.tempPath = new Path(new Path(rootDir, HConstants.HBASE_TEMP_DIRECTORY), hfilePath);
-    this.originPath = new Path(rootDir, hfilePath);
-    this.archivePath = new Path(archiveDir, hfilePath);
-    setLocations(originPath, tempPath, archivePath);
+    this(rootDir, archiveDir, new Path(rootDir, MobConstants.MOB_DIR_NAME), path);
   }
 
   /**
@@ -159,6 +173,11 @@ public class HFileLink extends FileLink {
   }
 
   /**
+   * @return the path of the mob hfiles.
+   */
+  public Path getMobPath() { return this.mobPath; }
+
+    /**
    * @param path Path to check.
    * @return True if the path is a HFileLink.
    */
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/snapshot/SnapshotInfo.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/snapshot/SnapshotInfo.java
index de25394..214e89a 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/snapshot/SnapshotInfo.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/snapshot/SnapshotInfo.java
@@ -119,10 +119,12 @@ public final class SnapshotInfo extends Configured implements Tool {
     private AtomicInteger hfilesCorrupted = new AtomicInteger();
     private AtomicInteger hfilesMissing = new AtomicInteger();
     private AtomicInteger hfilesCount = new AtomicInteger();
+    private AtomicInteger hfileMobCount = new AtomicInteger();
     private AtomicInteger logsMissing = new AtomicInteger();
     private AtomicInteger logsCount = new AtomicInteger();
     private AtomicLong hfileArchiveSize = new AtomicLong();
     private AtomicLong hfileSize = new AtomicLong();
+    private AtomicLong hfileMobSize = new AtomicLong();
     private AtomicLong logSize = new AtomicLong();
 
     private final SnapshotDescription snapshot;
@@ -209,7 +211,7 @@ public final class SnapshotInfo extends Configured implements Tool {
      * Add the specified store file to the stats
      * @param region region encoded Name
      * @param family family name
-     * @param hfile store file name
+     * @param storeFile store file name
      * @return the store file information
      */
     FileInfo addStoreFile(final HRegionInfo region, final String family,
@@ -224,6 +226,10 @@ public final class SnapshotInfo extends Configured implements Tool {
           size = fs.getFileStatus(link.getArchivePath()).getLen();
           hfileArchiveSize.addAndGet(size);
           hfileArchiveCount.incrementAndGet();
+        } else if (inArchive = fs.exists(link.getMobPath())) {
+          size = fs.getFileStatus(link.getMobPath()).getLen();
+          hfileMobSize.addAndGet(size);
+          hfileMobCount.incrementAndGet();
         } else {
           size = link.getFileStatus(fs).getLen();
           hfileSize.addAndGet(size);
-- 
1.9.1

