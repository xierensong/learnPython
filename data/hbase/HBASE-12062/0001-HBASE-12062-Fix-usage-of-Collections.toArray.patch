From 1fb32e12fc3598a599628c215ad61d8ad57ece04 Mon Sep 17 00:00:00 2001
From: Elliott Clark <eclark@apache.org>
Date: Mon, 22 Sep 2014 21:44:01 -0700
Subject: [PATCH] HBASE-12062 Fix usage of Collections.toArray

---
 .../java/org/apache/hadoop/hbase/ServerLoad.java   |  2 +-
 .../hbase/security/visibility/Authorizations.java  |  4 +---
 .../java/org/apache/hadoop/hbase/TestKeyValue.java |  9 +++-----
 .../hadoop/hbase/util/TestConcatenatedLists.java   |  2 +-
 .../hadoop/hbase/mapreduce/IndexBuilder.java       |  4 +---
 .../chaos/actions/RollingBatchRestartRsAction.java |  2 +-
 .../hbase/test/IntegrationTestBigLinkedList.java   |  3 +--
 .../java/org/apache/hadoop/hbase/io/FileLink.java  |  4 +---
 .../hadoop/hbase/master/SplitLogManager.java       |  3 +--
 .../hadoop/hbase/metrics/MetricsMBeanBase.java     |  2 +-
 .../hbase/regionserver/StripeStoreFileManager.java |  5 ++---
 .../java/org/apache/hadoop/hbase/rest/RowSpec.java |  5 ++---
 .../expression/NonLeafExpressionNode.java          |  5 ++---
 .../hadoop/hbase/util/CollectionBackedScanner.java |  4 +---
 .../org/apache/hadoop/hbase/util/HBaseFsck.java    |  2 +-
 .../hadoop/hbase/util/MunkresAssignment.java       |  4 +---
 .../apache/hadoop/hbase/util/RegionSplitter.java   |  2 +-
 .../apache/hadoop/hbase/HBaseTestingUtility.java   | 10 +++------
 .../hadoop/hbase/client/TestFromClientSide.java    |  5 ++---
 .../hadoop/hbase/client/TestSnapshotMetadata.java  |  9 +++-----
 .../hbase/filter/TestInvocationRecordFilter.java   | 24 +++++++++++-----------
 .../compactions/TestStripeCompactionPolicy.java    |  4 +---
 .../org/apache/hadoop/hbase/security/TestUser.java |  6 ++++--
 .../org/apache/hadoop/hbase/util/LoadTestTool.java |  4 +---
 .../hbase/thrift/TestThriftServerCmdLine.java      |  2 +-
 25 files changed, 49 insertions(+), 77 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/ServerLoad.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/ServerLoad.java
index 6f5051b..afc5ba0 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/ServerLoad.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/ServerLoad.java
@@ -235,7 +235,7 @@ public class ServerLoad {
     for (Coprocessor coprocessor : obtainServerLoadPB().getCoprocessorsList()) {
       coprocessSet.add(coprocessor.getName());
     }
-    return coprocessSet.toArray(new String[0]);
+    return coprocessSet.toArray(new String[coprocessSet.size()]);
   }
 
   /**
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/security/visibility/Authorizations.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/security/visibility/Authorizations.java
index a82d6d8..0cbd60e 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/security/visibility/Authorizations.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/security/visibility/Authorizations.java
@@ -35,9 +35,7 @@ public class Authorizations {
   private List<String> labels;
   public Authorizations(String... labels) {
     this.labels = new ArrayList<String>(labels.length);
-    for (String label : labels) {
-      this.labels.add(label);
-    }
+    Collections.addAll(this.labels, labels);
   }
 
   public Authorizations(List<String> labels) {
diff --git a/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java b/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java
index b472743..45c2b39 100644
--- a/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java
+++ b/hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java
@@ -20,6 +20,7 @@ package org.apache.hadoop.hbase;
 
 import java.io.IOException;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
@@ -228,9 +229,7 @@ public class TestKeyValue extends TestCase {
       new KeyValue(Bytes.toBytes("a,a,0"), fam, qf, 0, nb),
     };
     // Add to set with bad comparator
-    for (int i = 0; i < keys.length; i++) {
-      set.add(keys[i]);
-    }
+    Collections.addAll(set, keys);
     // This will output the keys incorrectly.
     boolean assertion = false;
     int count = 0;
@@ -245,9 +244,7 @@ public class TestKeyValue extends TestCase {
     assertTrue(assertion);
     // Make set with good comparator
     set = new TreeSet<KeyValue>(new KeyValue.MetaComparator());
-    for (int i = 0; i < keys.length; i++) {
-      set.add(keys[i]);
-    }
+    Collections.addAll(set, keys);
     count = 0;
     for (KeyValue k: set) {
       assertTrue(count++ == k.getTimestamp());
diff --git a/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestConcatenatedLists.java b/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestConcatenatedLists.java
index ce1a616..9758b0f 100644
--- a/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestConcatenatedLists.java
+++ b/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestConcatenatedLists.java
@@ -118,7 +118,7 @@ public class TestConcatenatedLists {
     assertEquals((last == -1), c.isEmpty());
     assertEquals(last + 1, c.size());
     assertTrue(c.containsAll(c));
-    Long[] array = c.toArray(new Long[0]);
+    Long[] array = c.toArray(new Long[c.size()]);
     List<Long> all = new ArrayList<Long>();
     Iterator<Long> iter = c.iterator();
     for (Long i = 0L; i <= last; ++i) {
diff --git a/hbase-examples/src/main/java/org/apache/hadoop/hbase/mapreduce/IndexBuilder.java b/hbase-examples/src/main/java/org/apache/hadoop/hbase/mapreduce/IndexBuilder.java
index 79c6bbe..6df345b 100644
--- a/hbase-examples/src/main/java/org/apache/hadoop/hbase/mapreduce/IndexBuilder.java
+++ b/hbase-examples/src/main/java/org/apache/hadoop/hbase/mapreduce/IndexBuilder.java
@@ -124,9 +124,7 @@ public class IndexBuilder {
     conf.set("index.tablename", tableName);
     conf.set("index.familyname", columnFamily);
     String[] fields = new String[args.length - 2];
-    for(int i = 0; i < fields.length; i++) {
-      fields[i] = args[i + 2];
-    }
+    System.arraycopy(args, 2, fields, 0, fields.length);
     conf.setStrings("index.fields", fields);
     Job job = new Job(conf, tableName);
     job.setJarByClass(IndexBuilder.class);
diff --git a/hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/actions/RollingBatchRestartRsAction.java b/hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/actions/RollingBatchRestartRsAction.java
index 6df10cb..2125529 100644
--- a/hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/actions/RollingBatchRestartRsAction.java
+++ b/hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/actions/RollingBatchRestartRsAction.java
@@ -101,7 +101,7 @@ public class RollingBatchRestartRsAction extends BatchRestartRsAction {
         for (int i = 0; i < 4; i++) {
           serverNames.add(ServerName.valueOf(i + ".example.org", i, i));
         }
-        return serverNames.toArray(new ServerName [] {});
+        return serverNames.toArray(new ServerName[serverNames.size()]);
       }
 
       @Override
diff --git a/hbase-it/src/test/java/org/apache/hadoop/hbase/test/IntegrationTestBigLinkedList.java b/hbase-it/src/test/java/org/apache/hadoop/hbase/test/IntegrationTestBigLinkedList.java
index 7e3eaa3..5abcaf6 100644
--- a/hbase-it/src/test/java/org/apache/hadoop/hbase/test/IntegrationTestBigLinkedList.java
+++ b/hbase-it/src/test/java/org/apache/hadoop/hbase/test/IntegrationTestBigLinkedList.java
@@ -399,8 +399,7 @@ public class IntegrationTestBigLinkedList extends IntegrationTestBase {
 
       private static <T> void circularLeftShift(T[] first) {
         T ez = first[0];
-        for (int i = 0; i < first.length - 1; i++)
-          first[i] = first[i + 1];
+        System.arraycopy(first, 1, first, 0, first.length - 1);
         first[first.length - 1] = ez;
       }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/FileLink.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/FileLink.java
index 3789148..820008d 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/FileLink.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/FileLink.java
@@ -413,9 +413,7 @@ public class FileLink {
     assert this.locations == null : "Link locations already set";
     this.locations = new Path[1 + alternativePaths.length];
     this.locations[0] = originPath;
-    for (int i = 0; i < alternativePaths.length; i++) {
-      this.locations[i + 1] = alternativePaths[i];
-    }
+    System.arraycopy(alternativePaths, 0, this.locations, 1, alternativePaths.length);
   }
 
   /**
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/SplitLogManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/SplitLogManager.java
index 192cd9e..62e50b7 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/SplitLogManager.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/SplitLogManager.java
@@ -253,8 +253,7 @@ public class SplitLogManager extends ZooKeeperListener {
       if (logfiles == null || logfiles.length == 0) {
         LOG.info(hLogDir + " is empty dir, no logs to split");
       } else {
-        for (FileStatus status : logfiles)
-          fileStatus.add(status);
+        Collections.addAll(fileStatus, logfiles);
       }
     }
     FileStatus[] a = new FileStatus[fileStatus.size()];
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/metrics/MetricsMBeanBase.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/metrics/MetricsMBeanBase.java
index 372115b..23b6e9b 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/metrics/MetricsMBeanBase.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/metrics/MetricsMBeanBase.java
@@ -161,7 +161,7 @@ public class MetricsMBeanBase extends MetricsDynamicMBeanBase {
 
     LOG.info("new MBeanInfo");
     this.extendedInfo = new MBeanInfo( this.getClass().getName(),
-        this.description, attributes.toArray( new MBeanAttributeInfo[0] ),
+        this.description, attributes.toArray(new MBeanAttributeInfo[attributes.size()]),
         parentInfo.getConstructors(), parentInfo.getOperations(),
         parentInfo.getNotifications() );
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreFileManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreFileManager.java
index f88fd43..c7a9fac 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreFileManager.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StripeStoreFileManager.java
@@ -22,6 +22,7 @@ import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.LinkedList;
@@ -913,9 +914,7 @@ public class StripeStoreFileManager
     if (this.state.stripeFiles.isEmpty()) return new ArrayList<byte[]>();
     ArrayList<byte[]> result = new ArrayList<byte[]>(this.state.stripeEndRows.length + 2);
     result.add(OPEN_KEY);
-    for (int i = 0; i < this.state.stripeEndRows.length; ++i) {
-      result.add(this.state.stripeEndRows[i]);
-    }
+    Collections.addAll(result, this.state.stripeEndRows);
     result.add(OPEN_KEY);
     return result;
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/rest/RowSpec.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/rest/RowSpec.java
index 0bb1c70..071f171 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/rest/RowSpec.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/rest/RowSpec.java
@@ -23,6 +23,7 @@ import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import java.util.TreeSet;
 
@@ -270,9 +271,7 @@ public class RowSpec {
     this.row = startRow;
     this.endRow = endRow;
     if (columns != null) {
-      for (byte[] col: columns) {
-        this.columns.add(col);
-      }
+      Collections.addAll(this.columns, columns);
     }
     this.startTime = startTime;
     this.endTime = endTime;
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/expression/NonLeafExpressionNode.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/expression/NonLeafExpressionNode.java
index 03def94..2bf2268 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/expression/NonLeafExpressionNode.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/expression/NonLeafExpressionNode.java
@@ -18,6 +18,7 @@
 package org.apache.hadoop.hbase.security.visibility.expression;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import org.apache.hadoop.classification.InterfaceAudience;
@@ -46,9 +47,7 @@ public class NonLeafExpressionNode implements ExpressionNode {
   public NonLeafExpressionNode(Operator op, ExpressionNode... exps) {
     this.op = op;
     List<ExpressionNode> expLst = new ArrayList<ExpressionNode>();
-    for (ExpressionNode exp : exps) {
-      expLst.add(exp);
-    }
+    Collections.addAll(expLst, exps);
     this.childExps = expLst;
   }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java
index 7232123..3c6596b 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java
@@ -67,9 +67,7 @@ public class CollectionBackedScanner extends NonReversedNonLazyKeyValueScanner {
     this.comparator = comparator;
 
     List<KeyValue> tmp = new ArrayList<KeyValue>(array.length);
-    for( int i = 0; i < array.length ; ++i) {
-      tmp.add(array[i]);
-    }
+    Collections.addAll(tmp, array);
     Collections.sort(tmp, comparator);
     data = tmp;
     init();
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java
index 1ca7f39..e8b6341 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java
@@ -1209,7 +1209,7 @@ public class HBaseFsck extends Configured {
         "You may need to restore the previously sidelined hbase:meta");
       return false;
     }
-    meta.batchMutate(puts.toArray(new Put[0]));
+    meta.batchMutate(puts.toArray(new Put[puts.size()]));
     HRegion.closeHRegion(meta);
     LOG.info("Success! hbase:meta table rebuilt.");
     LOG.info("Old hbase:meta is moved into " + backupDir);
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/MunkresAssignment.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/MunkresAssignment.java
index e39e9f6..de8baaa 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/MunkresAssignment.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/MunkresAssignment.java
@@ -129,9 +129,7 @@ public class MunkresAssignment {
       }
     } else {
       for (int r = 0; r < rows; r++) {
-        for (int c = 0; c < cols; c++) {
-          cost[r][c] = costMatrix[r][c];
-        }
+        System.arraycopy(costMatrix[r], 0, cost[r], 0, cols);
       }
     }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/RegionSplitter.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/RegionSplitter.java
index 57a1664..d232980 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/RegionSplitter.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/RegionSplitter.java
@@ -681,7 +681,7 @@ public class RegionSplitter {
         LinkedList<HRegionInfo> check = Lists.newLinkedList();
         check.add(table.getRegionLocation(start).getRegionInfo());
         check.add(table.getRegionLocation(split).getRegionInfo());
-        for (HRegionInfo hri : check.toArray(new HRegionInfo[] {})) {
+        for (HRegionInfo hri : check.toArray(new HRegionInfo[check.size()])) {
           byte[] sk = hri.getStartKey();
           if (sk.length == 0)
             sk = splitAlgo.firstRow();
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
index 3cc8140..4422d89 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
@@ -1944,9 +1944,7 @@ public class HBaseTestingUtility extends HBaseCommonTestingUtility {
     byte [] endKey = Bytes.toBytes("zzzzz");
     byte [][] splitKeys = Bytes.split(startKey, endKey, numRegions - 3);
     byte [][] regionStartKeys = new byte[splitKeys.length+1][];
-    for (int i=0;i<splitKeys.length;i++) {
-      regionStartKeys[i+1] = splitKeys[i];
-    }
+    System.arraycopy(splitKeys, 0, regionStartKeys, 1, splitKeys.length);
     regionStartKeys[0] = HConstants.EMPTY_BYTE_ARRAY;
     return createMultiRegions(c, table, family, regionStartKeys);
   }
@@ -2887,9 +2885,7 @@ public class HBaseTestingUtility extends HBaseCommonTestingUtility {
     assertTrue(numRegions>3);
     byte [][] tmpSplitKeys = Bytes.split(startKey, endKey, numRegions - 3);
     byte [][] result = new byte[tmpSplitKeys.length+1][];
-    for (int i=0;i<tmpSplitKeys.length;i++) {
-      result[i+1] = tmpSplitKeys[i];
-    }
+    System.arraycopy(tmpSplitKeys, 0, result, 1, tmpSplitKeys.length);
     result[0] = HConstants.EMPTY_BYTE_ARRAY;
     return result;
   }
@@ -3387,6 +3383,6 @@ public class HBaseTestingUtility extends HBaseCommonTestingUtility {
         // this algo is not available
       }
     }
-    return supportedAlgos.toArray(new Compression.Algorithm[0]);
+    return supportedAlgos.toArray(new Algorithm[supportedAlgos.size()]);
   }
 }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
index 7a44e5a..b927a1a 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
@@ -31,6 +31,7 @@ import java.io.IOException;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -4157,9 +4158,7 @@ public class TestFromClientSide {
     HBaseAdmin admin = new HBaseAdmin(TEST_UTIL.getConfiguration());
     HTableDescriptor[] ts = admin.listTables();
     HashSet<HTableDescriptor> result = new HashSet<HTableDescriptor>(ts.length);
-    for (int i = 0; i < ts.length; i++) {
-      result.add(ts[i]);
-    }
+    Collections.addAll(result, ts);
     int size = result.size();
     assertTrue(size >= tables.length);
     for (int i = 0; i < tables.length && i < size; i++) {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotMetadata.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotMetadata.java
index 965316f..fab5c89 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotMetadata.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotMetadata.java
@@ -22,6 +22,7 @@ import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import org.apache.commons.logging.Log;
@@ -192,9 +193,7 @@ public class TestSnapshotMetadata {
 
     // restore the snapshot into a cloned table and examine the output
     List<byte[]> familiesList = new ArrayList<byte[]>();
-    for (byte[] family : families) {
-      familiesList.add(family);
-    }
+    Collections.addAll(familiesList, families);
 
     // Create a snapshot in which all families are empty
     SnapshotTestingUtils.createSnapshotAndValidate(admin, originalTableName, null,
@@ -276,9 +275,7 @@ public class TestSnapshotMetadata {
       }
       familiesWithDataList.add(familyForUpdate);
     } else {
-      for (byte[] family : families) {
-        emptyFamiliesList.add(family);
-      }
+      Collections.addAll(emptyFamiliesList, families);
     }
 
     // take a "disabled" snapshot
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestInvocationRecordFilter.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestInvocationRecordFilter.java
index 718f2fd..ba712f3 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestInvocationRecordFilter.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/filter/TestInvocationRecordFilter.java
@@ -86,33 +86,33 @@ public class TestInvocationRecordFilter {
     List<Integer> expectedQualifiers = new ArrayList<Integer>();
 
     selectQualifiers.add(-1);
-    verifyInvocationResults(selectQualifiers.toArray(new Integer[0]),
-        expectedQualifiers.toArray(new Integer[0]));
+    verifyInvocationResults(selectQualifiers.toArray(new Integer[selectQualifiers.size()]),
+        expectedQualifiers.toArray(new Integer[expectedQualifiers.size()]));
 
     selectQualifiers.clear();
 
     selectQualifiers.add(0);
     expectedQualifiers.add(0);
-    verifyInvocationResults(selectQualifiers.toArray(new Integer[0]),
-        expectedQualifiers.toArray(new Integer[0]));
+    verifyInvocationResults(selectQualifiers.toArray(new Integer[selectQualifiers.size()]),
+        expectedQualifiers.toArray(new Integer[expectedQualifiers.size()]));
 
     selectQualifiers.add(3);
-    verifyInvocationResults(selectQualifiers.toArray(new Integer[0]),
-        expectedQualifiers.toArray(new Integer[0]));
+    verifyInvocationResults(selectQualifiers.toArray(new Integer[selectQualifiers.size()]),
+        expectedQualifiers.toArray(new Integer[expectedQualifiers.size()]));
 
     selectQualifiers.add(4);
     expectedQualifiers.add(4);
-    verifyInvocationResults(selectQualifiers.toArray(new Integer[0]),
-        expectedQualifiers.toArray(new Integer[0]));
+    verifyInvocationResults(selectQualifiers.toArray(new Integer[selectQualifiers.size()]),
+        expectedQualifiers.toArray(new Integer[expectedQualifiers.size()]));
 
     selectQualifiers.add(5);
-    verifyInvocationResults(selectQualifiers.toArray(new Integer[0]),
-        expectedQualifiers.toArray(new Integer[0]));
+    verifyInvocationResults(selectQualifiers.toArray(new Integer[selectQualifiers.size()]),
+        expectedQualifiers.toArray(new Integer[expectedQualifiers.size()]));
 
     selectQualifiers.add(8);
     expectedQualifiers.add(8);
-    verifyInvocationResults(selectQualifiers.toArray(new Integer[0]),
-        expectedQualifiers.toArray(new Integer[0]));
+    verifyInvocationResults(selectQualifiers.toArray(new Integer[selectQualifiers.size()]),
+        expectedQualifiers.toArray(new Integer[expectedQualifiers.size()]));
   }
 
   public void verifyInvocationResults(Integer[] selectQualifiers,
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/TestStripeCompactionPolicy.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/TestStripeCompactionPolicy.java
index 46e65f5..e38a20f 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/TestStripeCompactionPolicy.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/compactions/TestStripeCompactionPolicy.java
@@ -645,9 +645,7 @@ public class TestStripeCompactionPolicy {
     byte[][] keys = new byte[][] { KEY_A, KEY_B, KEY_C, KEY_D, KEY_E };
     assert stripeCount <= keys.length + 1;
     List<byte[]> boundaries = new ArrayList<byte[]>();
-    for (int i = 0; i < stripeCount - 1; ++i) {
-      boundaries.add(keys[i]);
-    }
+    boundaries.addAll(Arrays.asList(keys).subList(0, stripeCount - 1));
     return boundaries;
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestUser.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestUser.java
index be74710..8310021 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestUser.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestUser.java
@@ -133,11 +133,13 @@ public class TestUser {
     final String username = "testuser";
     final ImmutableSet<String> singleGroups = ImmutableSet.of("group");
     final Configuration conf = HBaseConfiguration.create();
-    User user = User.createUserForTesting(conf, username, singleGroups.toArray(new String[]{}));
+    User user = User.createUserForTesting(conf, username,
+        singleGroups.toArray(new String[singleGroups.size()]));
     assertUserGroup(user, singleGroups);
 
     final ImmutableSet<String> multiGroups = ImmutableSet.of("group", "group1", "group2");
-    user = User.createUserForTesting(conf, username, multiGroups.toArray(new String[]{}));
+    user = User.createUserForTesting(conf, username,
+        multiGroups.toArray(new String[multiGroups.size()]));
     assertUserGroup(user, multiGroups);
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/LoadTestTool.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/LoadTestTool.java
index c0050ef..b207202 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/LoadTestTool.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/LoadTestTool.java
@@ -693,9 +693,7 @@ public class LoadTestTool extends AbstractHBaseTool {
       newArgs = new String[cmdLineArgs.length + 2];
       newArgs[0] = "-" + LoadTestTool.OPT_TABLE_NAME;
       newArgs[1] = LoadTestTool.DEFAULT_TABLE_NAME;
-      for (int i = 0; i < cmdLineArgs.length; i++) {
-        newArgs[i + 2] = cmdLineArgs[i];
-      }
+      System.arraycopy(cmdLineArgs, 0, newArgs, 2, cmdLineArgs.length);
     } else {
       newArgs = cmdLineArgs;
     }
diff --git a/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/TestThriftServerCmdLine.java b/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/TestThriftServerCmdLine.java
index 53d2fbd..0f27569 100644
--- a/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/TestThriftServerCmdLine.java
+++ b/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/TestThriftServerCmdLine.java
@@ -171,7 +171,7 @@ public class TestThriftServerCmdLine {
     args.add("start");
 
     thriftServer = new ThriftServer(TEST_UTIL.getConfiguration());
-    startCmdLineThread(args.toArray(new String[0]));
+    startCmdLineThread(args.toArray(new String[args.size()]));
 
     // wait up to 10s for the server to start
     for (int i = 0; i < 100
-- 
2.0.0

