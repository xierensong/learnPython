From f7938688d3d00216b6794cb78636e46b9b16c3da Mon Sep 17 00:00:00 2001
From: Ashish Singhi <ashish.singhi@huawei.com>
Date: Thu, 20 Nov 2014 16:01:50 +0530
Subject: [PATCH] HBASE-8572 Enhance delete_snapshot.rb to call snapshot
 deletion API with regex

---
 .../org/apache/hadoop/hbase/client/HBaseAdmin.java | 29 ++++++----
 hbase-shell/src/main/ruby/hbase/admin.rb           |  6 +++
 hbase-shell/src/main/ruby/shell.rb                 |  1 +
 .../ruby/shell/commands/delete_all_snapshot.rb     | 61 ++++++++++++++++++++++
 4 files changed, 87 insertions(+), 10 deletions(-)
 create mode 100644 hbase-shell/src/main/ruby/shell/commands/delete_all_snapshot.rb

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
index aec5ae8..82ceb03 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java
@@ -3577,18 +3577,27 @@ public class HBaseAdmin implements Admin {
   public void deleteSnapshots(final Pattern pattern) throws IOException {
     List<SnapshotDescription> snapshots = listSnapshots(pattern);
     for (final SnapshotDescription snapshot : snapshots) {
-      // do the delete
-      executeCallable(new MasterCallable<Void>(getConnection()) {
-        @Override
-        public Void call(int callTimeout) throws ServiceException {
-          this.master.deleteSnapshot(null,
-            DeleteSnapshotRequest.newBuilder().setSnapshot(snapshot).build());
-          return null;
-        }
-      });
+      try {
+        internalDeleteSnapshot(snapshot);
+      } catch (IOException ex) {
+        LOG.info(
+          "Failed to delete snapshot " + snapshot.getName() + " for table " + snapshot.getTable(),
+          ex);
+      }
     }
   }
 
+  private void internalDeleteSnapshot(final SnapshotDescription snapshot) throws IOException {
+    executeCallable(new MasterCallable<Void>(getConnection()) {
+      @Override
+      public Void call(int callTimeout) throws ServiceException {
+        this.master.deleteSnapshot(null, DeleteSnapshotRequest.newBuilder().setSnapshot(snapshot)
+            .build());
+        return null;
+      }
+    });
+  }
+
   /**
    * Apply the new quota settings.
    *
@@ -3734,7 +3743,7 @@ public class HBaseAdmin implements Admin {
   public CoprocessorRpcChannel coprocessorService(ServerName sn) {
     return new RegionServerCoprocessorRpcChannel(connection, sn);
   }
-  
+
   @Override
   public void updateConfiguration(ServerName server) throws IOException {
     try {
diff --git a/hbase-shell/src/main/ruby/hbase/admin.rb b/hbase-shell/src/main/ruby/hbase/admin.rb
index 971df06..b08b5eb 100644
--- a/hbase-shell/src/main/ruby/hbase/admin.rb
+++ b/hbase-shell/src/main/ruby/hbase/admin.rb
@@ -781,6 +781,12 @@ module Hbase
     end
 
     #----------------------------------------------------------------------------------------------
+    # Deletes the snapshots matching the given regex
+    def delete_all_snapshot(regex)
+      @admin.deleteSnapshots(regex).to_a
+    end
+
+    #----------------------------------------------------------------------------------------------
     # Returns a list of snapshots
     def list_snapshot(regex = ".*")
       @admin.listSnapshots(regex).to_a
diff --git a/hbase-shell/src/main/ruby/shell.rb b/hbase-shell/src/main/ruby/shell.rb
index a06371a..ac81af2 100644
--- a/hbase-shell/src/main/ruby/shell.rb
+++ b/hbase-shell/src/main/ruby/shell.rb
@@ -357,6 +357,7 @@ Shell.load_command_group(
     restore_snapshot
     rename_snapshot
     delete_snapshot
+    delete_all_snapshot
     list_snapshots
   ]
 )
diff --git a/hbase-shell/src/main/ruby/shell/commands/delete_all_snapshot.rb b/hbase-shell/src/main/ruby/shell/commands/delete_all_snapshot.rb
new file mode 100644
index 0000000..bc07259
--- /dev/null
+++ b/hbase-shell/src/main/ruby/shell/commands/delete_all_snapshot.rb
@@ -0,0 +1,61 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+module Shell
+  module Commands
+    class DeleteAllSnapshot < Command
+      def help
+        return <<-EOF
+Delete all of the snapshots matching the given regex. Examples:
+
+  hbase> delete_all_snapshot 's.*'
+
+EOF
+      end
+
+      def command(regex)
+        formatter.header([ "SNAPSHOT", "TABLE + CREATION TIME"])
+        list = admin.list_snapshot(regex)
+        count = list.size
+        list.each do |snapshot|
+          creation_time = Time.at(snapshot.getCreationTime() / 1000).to_s
+          formatter.row([ snapshot.getName, snapshot.getTable + " (" + creation_time + ")" ])
+        end
+        puts "\nDelete the above #{count} snapshots (y/n)?" unless count == 0
+        answer = 'n'
+        answer = gets.chomp unless count == 0
+        puts "No snapshots matched the regex #{regex.to_s}" if count == 0
+        return unless answer =~ /y.*/i
+        format_simple_command do
+          admin.delete_all_snapshot(regex)
+        end
+        list = admin.list_snapshot(regex)
+        leftOverSnapshotCount = list.size
+        successfullyDeleted = count - leftOverSnapshotCount
+        puts "#{successfullyDeleted} snapshots successfully deleted." unless successfullyDeleted == 0
+        return if leftOverSnapshotCount == 0
+        puts "\nFailed to delete the below #{leftOverSnapshotCount} snapshots."
+        formatter.header([ "SNAPSHOT", "TABLE + CREATION TIME"])
+        list.each do |snapshot|
+          creation_time = Time.at(snapshot.getCreationTime() / 1000).to_s
+          formatter.row([ snapshot.getName, snapshot.getTable + " (" + creation_time + ")" ])
+        end
+      end
+    end
+  end
+end
-- 
1.9.2.msysgit.0

