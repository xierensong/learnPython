From 88c187473ddcbe0d7b8256c48f893d89cd46ab29 Mon Sep 17 00:00:00 2001
From: huzheng <openinx@gmail.com>
Date: Tue, 27 Mar 2018 21:45:49 +0800
Subject: [PATCH] HBASE-20128 Add new UTs which extends the old replication UTs
 but set replication scope to SERIAL

---
 .../TestReplicationAdminWithClusters.java          | 20 ++++++++++----
 .../hbase/replication/TestReplicationBase.java     | 32 ++++++++++++----------
 .../TestReplicationChangingPeerRegionservers.java  |  2 +-
 .../replication/TestReplicationDroppedTables.java  |  6 ++++
 .../hbase/replication/TestReplicationEndpoint.java |  5 ++++
 5 files changed, 45 insertions(+), 20 deletions(-)

diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/replication/TestReplicationAdminWithClusters.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/replication/TestReplicationAdminWithClusters.java
index bc21f1a..975b00e 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/replication/TestReplicationAdminWithClusters.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/replication/TestReplicationAdminWithClusters.java
@@ -67,6 +67,10 @@ public class TestReplicationAdminWithClusters extends TestReplicationBase {
   @Rule
   public TestName name = new TestName();
 
+  public static String parseMethodName(TestName name) {
+    return name.getMethodName().replaceAll("\\[.*\\]", "");
+  }
+
   @BeforeClass
   public static void setUpBeforeClass() throws Exception {
     TestReplicationBase.setUpBeforeClass();
@@ -96,12 +100,13 @@ public class TestReplicationAdminWithClusters extends TestReplicationBase {
     admin1.modifyTable(tableName, table);
     admin1.enableTable(tableName);
 
-
     admin1.disableTableReplication(tableName);
     table = admin1.getTableDescriptor(tableName);
     for (HColumnDescriptor fam : table.getColumnFamilies()) {
       assertEquals(HConstants.REPLICATION_SCOPE_LOCAL, fam.getScope());
     }
+
+    admin1.deleteColumnFamily(table.getTableName(), f.getName());
   }
 
   @Test
@@ -158,6 +163,9 @@ public class TestReplicationAdminWithClusters extends TestReplicationBase {
     for (HColumnDescriptor fam : table.getColumnFamilies()) {
       assertEquals(HConstants.REPLICATION_SCOPE_GLOBAL, fam.getScope());
     }
+
+    admin1.deleteColumnFamily(tableName, f.getName());
+    admin2.deleteColumnFamily(tableName, f.getName());
   }
 
   @Test
@@ -176,12 +184,12 @@ public class TestReplicationAdminWithClusters extends TestReplicationBase {
 
   @Test(expected = TableNotFoundException.class)
   public void testDisableReplicationForNonExistingTable() throws Exception {
-    admin1.disableTableReplication(TableName.valueOf(name.getMethodName()));
+    admin1.disableTableReplication(TableName.valueOf(parseMethodName(name)));
   }
 
   @Test(expected = TableNotFoundException.class)
   public void testEnableReplicationForNonExistingTable() throws Exception {
-    admin1.enableTableReplication(TableName.valueOf(name.getMethodName()));
+    admin1.enableTableReplication(TableName.valueOf(parseMethodName(name)));
   }
 
   @Test(expected = IllegalArgumentException.class)
@@ -200,7 +208,7 @@ public class TestReplicationAdminWithClusters extends TestReplicationBase {
    */
   @Test
   public void testEnableReplicationForExplicitSetTableCfs() throws Exception {
-    final TableName tableName = TableName.valueOf(name.getMethodName());
+    final TableName tableName = TableName.valueOf(parseMethodName(name));
     String peerId = "2";
     if (admin2.isTableAvailable(TestReplicationBase.tableName)) {
       admin2.disableTable(TestReplicationBase.tableName);
@@ -252,12 +260,14 @@ public class TestReplicationAdminWithClusters extends TestReplicationBase {
     rpc.getConfiguration().put("key1", "value2");
     admin.updatePeerConfig(peerId, rpc);
     if (!TestUpdatableReplicationEndpoint.hasCalledBack()) {
-      synchronized(TestUpdatableReplicationEndpoint.class) {
+      synchronized (TestUpdatableReplicationEndpoint.class) {
         TestUpdatableReplicationEndpoint.class.wait(2000L);
       }
     }
 
     assertEquals(true, TestUpdatableReplicationEndpoint.hasCalledBack());
+
+    admin.removePeer(peerId);
   }
 
   public static class TestUpdatableReplicationEndpoint extends BaseReplicationEndpoint {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationBase.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationBase.java
index 397d6e2..56295a8 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationBase.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationBase.java
@@ -24,7 +24,6 @@ import static org.junit.Assert.fail;
 
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 import java.util.NavigableMap;
 import java.util.TreeMap;
@@ -55,6 +54,8 @@ import org.apache.hadoop.hbase.zookeeper.MiniZooKeeperCluster;
 import org.apache.hadoop.hbase.zookeeper.ZKWatcher;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 import org.slf4j.Logger;
@@ -66,12 +67,8 @@ import org.slf4j.LoggerFactory;
  * TestReplicationSmallTests is where tests that don't require bring machines up/down should go
  * All other tests should have their own classes and extend this one
  */
+@RunWith(Parameterized.class)
 public class TestReplicationBase {
-/*
-  {
-    ((Log4JLogger) ReplicationSource.LOG).getLogger().setLevel(Level.ALL);
-  }*/
-
   private static final Logger LOG = LoggerFactory.getLogger(TestReplicationBase.class);
 
   protected static Configuration conf1 = HBaseConfiguration.create();
@@ -101,12 +98,19 @@ public class TestReplicationBase {
   protected static final byte[] row = Bytes.toBytes("row");
   protected static final byte[] noRepfamName = Bytes.toBytes("norep");
 
-  @Parameter
-  public static boolean seperateOldWALs;
+  @Parameter(0)
+  public static boolean separateOldWALs;
+
+  @Parameter(1)
+  public static boolean serialPeer;
 
-  @Parameters
-  public static List<Boolean> params() {
-    return Arrays.asList(false, true);
+  @Parameters(name = "{index}: separateOldWALs={0}, serialPeer={1}")
+  public static List<Object[]> params() {
+    List<Object[]> paramList = new ArrayList<>();
+    paramList.add(new Object[] { false, false });
+    paramList.add(new Object[] { false, true });
+    paramList.add(new Object[] { true, false });
+    return paramList;
   }
 
   protected final void cleanUp() throws IOException, InterruptedException {
@@ -197,7 +201,7 @@ public class TestReplicationBase {
     conf1.setBoolean("replication.source.eof.autorecovery", true);
 
     // Parameter config
-    conf1.setBoolean(AbstractFSWALProvider.SEPARATE_OLDLOGDIR, seperateOldWALs);
+    conf1.setBoolean(AbstractFSWALProvider.SEPARATE_OLDLOGDIR, separateOldWALs);
 
     utility1 = new HBaseTestingUtility(conf1);
     utility1.startMiniZKCluster();
@@ -226,8 +230,8 @@ public class TestReplicationBase {
     // as a component in deciding maximum number of parallel batches to send to the peer cluster.
     utility2.startMiniCluster(4);
 
-    ReplicationPeerConfig rpc =
-        ReplicationPeerConfig.newBuilder().setClusterKey(utility2.getClusterKey()).build();
+    ReplicationPeerConfig rpc = ReplicationPeerConfig.newBuilder()
+        .setClusterKey(utility2.getClusterKey()).setSerial(serialPeer).build();
     hbaseAdmin = ConnectionFactory.createConnection(conf1).getAdmin();
     hbaseAdmin.addReplicationPeer("2", rpc);
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationChangingPeerRegionservers.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationChangingPeerRegionservers.java
index 5492cf6..4013b56 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationChangingPeerRegionservers.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationChangingPeerRegionservers.java
@@ -43,7 +43,7 @@ import org.slf4j.LoggerFactory;
 /**
  * Test handling of changes to the number of a peer's regionservers.
  */
-@Category({ReplicationTests.class, LargeTests.class})
+@Category({ ReplicationTests.class, LargeTests.class })
 public class TestReplicationChangingPeerRegionservers extends TestReplicationBase {
 
   @ClassRule
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationDroppedTables.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationDroppedTables.java
index e9e92b8..cd051d2 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationDroppedTables.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationDroppedTables.java
@@ -119,6 +119,12 @@ public class TestReplicationDroppedTables extends TestReplicationBase {
       admin2.createNamespace(NamespaceDescriptor.create("NS").build());
     }
     testEditsBehindDroppedTable(true, "NS:test_dropped");
+    try (Admin admin1 = connection1.getAdmin()) {
+      admin1.deleteNamespace("NS");
+    }
+    try (Admin admin2 = connection2.getAdmin()) {
+      admin2.deleteNamespace("NS");
+    }
   }
 
   private void testEditsBehindDroppedTable(boolean allowProceeding, String tName) throws Exception {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationEndpoint.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationEndpoint.java
index 173287c..47cbe5c 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationEndpoint.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationEndpoint.java
@@ -389,6 +389,7 @@ public class TestReplicationEndpoint extends TestReplicationBase {
     static volatile List<Entry> lastEntries = null;
 
     public ReplicationEndpointForTest() {
+      replicateCount.set(0);
       contructedCount.incrementAndGet();
     }
 
@@ -433,6 +434,10 @@ public class TestReplicationEndpoint extends TestReplicationBase {
     static AtomicInteger replicateCount = new AtomicInteger();
     static boolean failedOnce;
 
+    public InterClusterReplicationEndpointForTest() {
+      replicateCount.set(0);
+    }
+
     @Override
     public boolean replicate(ReplicateContext replicateContext) {
       boolean success = super.replicate(replicateContext);
-- 
2.7.4

