diff --git a/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestMOB.java b/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestMOB.java
new file mode 100644
index 0000000..12622ad
--- /dev/null
+++ b/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestMOB.java
@@ -0,0 +1,117 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.hbase.client.HBaseAdmin;
+import org.apache.hadoop.hbase.mob.MobConstants;
+import org.apache.hadoop.hbase.util.LoadTestDataGeneratorMOB;
+import org.apache.hadoop.hbase.util.LoadTestTool;
+import org.apache.hadoop.util.ToolRunner;
+import org.junit.experimental.categories.Category;
+
+/**
+ * Integration Test for MOB ingest.
+ */
+@Category(IntegrationTests.class)
+public class IntegrationTestIngestMOB extends IntegrationTestIngest {
+  private static final char COLON = ':';
+
+  private byte[] mobCf = LoadTestTool.COLUMN_FAMILY;
+  private int threshold = 100 * 1024; //100KB
+  private int minMobDataSize = threshold * 4 / 5; //80KB
+  private int maxMobDataSize = threshold * 50; // 5MB
+
+  //similar to LOAD_TEST_TOOL_INIT_ARGS except OPT_IN_MEMORY is removed
+  protected String[] LOAD_TEST_TOOL_MOB_INIT_ARGS = {
+      LoadTestTool.OPT_COMPRESSION,
+      LoadTestTool.OPT_DATA_BLOCK_ENCODING,
+      LoadTestTool.OPT_ENCRYPTION,
+      LoadTestTool.OPT_NUM_REGIONS_PER_SERVER,
+      LoadTestTool.OPT_REGION_REPLICATION,
+  };
+
+  @Override
+  protected String[] getArgsForLoadTestToolInitTable() {
+    List<String> args = new ArrayList<String>();
+    args.add("-tn");
+    args.add(getTablename());
+    // pass all remaining args from conf with keys <test class name>.<load test tool arg>
+    String clazz = this.getClass().getSimpleName();
+    for (String arg : LOAD_TEST_TOOL_MOB_INIT_ARGS) {
+      String val = conf.get(String.format("%s.%s", clazz, arg));
+      if (val != null) {
+        args.add("-" + arg);
+        args.add(val);
+      }
+    }
+    args.add("-init_only");
+    return args.toArray(new String[args.size()]);
+  }
+
+  @Override
+  protected void initTable() throws IOException {
+    super.initTable();
+
+    byte[] tableName = getTablename().getBytes();
+    HBaseAdmin admin = new HBaseAdmin(conf);
+    HTableDescriptor tableDesc = admin.getTableDescriptor(tableName);
+    LOG.info("Disabling table " + getTablename());
+    admin.disableTable(tableName);
+    for (HColumnDescriptor columnDescriptor : tableDesc.getFamilies()) {
+      if(Arrays.equals(columnDescriptor.getName(), mobCf)) {
+        columnDescriptor.setValue(MobConstants.IS_MOB, "true");
+        columnDescriptor.setValue(MobConstants.MOB_THRESHOLD, String.valueOf(threshold));
+        admin.modifyColumn(tableName, columnDescriptor);
+      }
+    }
+    LOG.info("Enabling table " + getTablename());
+    admin.enableTable(tableName);
+    admin.close();
+  }
+
+  @Override
+  protected String[] getArgsForLoadTestTool(String mode, String modeSpecificArg, long startKey,
+      long numKeys) {
+    String[] args = super.getArgsForLoadTestTool(mode, modeSpecificArg, startKey, numKeys);
+    List<String> tmp = new ArrayList<String>(Arrays.asList(args));
+    // LoadTestDataGeneratorMOB:mobCf:minMobDataSize:maxMobDataSize
+    tmp.add(HIPHEN + LoadTestTool.OPT_GENERATOR);
+    StringBuilder sb = new StringBuilder(LoadTestDataGeneratorMOB.class.getName());
+    sb.append(COLON);
+    sb.append(mobCf);
+    sb.append(COLON);
+    sb.append(minMobDataSize);
+    sb.append(COLON);
+    sb.append(maxMobDataSize);
+    tmp.add(sb.toString());
+    return tmp.toArray(new String[tmp.size()]);
+  }
+
+  public static void main(String[] args) throws Exception {
+    Configuration conf = HBaseConfiguration.create();
+    IntegrationTestingUtility.setUseDistributedCluster(conf);
+    int ret = ToolRunner.run(conf, new IntegrationTestIngestMOB(), args);
+    System.exit(ret);
+  }
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/LoadTestDataGeneratorMOB.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/LoadTestDataGeneratorMOB.java
new file mode 100644
index 0000000..cc5c155
--- /dev/null
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/LoadTestDataGeneratorMOB.java
@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.util;
+
+import java.util.Arrays;
+
+import org.apache.hadoop.hbase.util.test.LoadTestKVGenerator;
+
+/**
+ * A load test data generator for MOB
+ */
+public class LoadTestDataGeneratorMOB
+    extends MultiThreadedAction.DefaultDataGenerator {
+
+  private byte[] mobCf;
+  private int minMobColDataSize;
+  private int maxMobColDataSize;
+
+  private LoadTestKVGenerator mobKvGenerator;
+
+  public LoadTestDataGeneratorMOB(int minValueSize, int maxValueSize,
+      int minColumnsPerKey, int maxColumnsPerKey, byte[]... columnFamilies) {
+    super(minValueSize, maxValueSize, minColumnsPerKey, maxColumnsPerKey,
+        columnFamilies);
+  }
+
+  public LoadTestDataGeneratorMOB(byte[]... columnFamilies) {
+    super(columnFamilies);
+  }
+
+  public void configureMob(byte[] mobCf, int minMobColDataSize, int maxMobColDataSize) {
+    this.mobCf = mobCf;
+    this.minMobColDataSize = minMobColDataSize;
+    this.maxMobColDataSize = maxMobColDataSize;
+
+    mobKvGenerator = new LoadTestKVGenerator(minMobColDataSize, maxMobColDataSize);
+  }
+
+  @Override
+  public byte[] generateValue(byte[] rowKey, byte[] cf,
+      byte[] column) {
+    if(Arrays.equals(cf, mobCf))
+      return mobKvGenerator.generateRandomSizeValue(rowKey, cf, column);
+
+    return super.generateValue(rowKey, cf, column);
+  }
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/LoadTestTool.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/LoadTestTool.java
index 9e7186a..f9959ff 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/util/LoadTestTool.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/util/LoadTestTool.java
@@ -558,6 +558,15 @@ protected int loadTable() throws IOException {
           args = Arrays.copyOfRange(clazzAndArgs, 1, clazzAndArgs.length);
           userOwner = User.createUserForTesting(conf, superUser, new String[0]);
         }
+      } else if(dataGen instanceof LoadTestDataGeneratorMOB) {
+          LOG.info("Using LoadTestDataGeneratorMOB");
+          String mobCf = clazzAndArgs[1];
+          int minMobDataSize = Integer.parseInt(clazzAndArgs[2]);
+          int maxMobDataSize = Integer.parseInt(clazzAndArgs[3]);
+          LoadTestDataGeneratorMOB mobDatGen = (LoadTestDataGeneratorMOB)dataGen;
+          mobDatGen.configureMob(mobCf.getBytes(), minMobDataSize, maxMobDataSize);
+          args = clazzAndArgs.length==4? new String[0] :
+              Arrays.copyOfRange(clazzAndArgs, 4, clazzAndArgs.length);
       } else {
         args = clazzAndArgs.length == 1 ? new String[0] : Arrays.copyOfRange(clazzAndArgs, 1,
             clazzAndArgs.length);
