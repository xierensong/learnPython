diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessorEnvironment.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessorEnvironment.java
index 0331a0b..20b157c 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessorEnvironment.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MasterCoprocessorEnvironment.java
@@ -51,6 +51,8 @@ public interface MasterCoprocessorEnvironment extends CoprocessorEnvironment<Mas
    * Note: If you want to create Connection with your own Configuration and NOT use the Master's
    * Connection (though its cache of locations will be warm, and its life-cycle is not the concern
    * of the CP), see {@link #createConnection(Configuration)}.
+   * As the returned connection is a short circuited one, possibly bypassing RPC layers, the RPC
+   * user within the connection will always be the hbase super user who started the server process.
    * @return The host's Connection to the Cluster.
    */
   Connection getConnection();
@@ -63,6 +65,9 @@ public interface MasterCoprocessorEnvironment extends CoprocessorEnvironment<Mas
    * <p>
    * Note: HBase will NOT cache/maintain this Connection. If Coprocessors need to cache and reuse
    * this connection, it has to be done by Coprocessors. Also make sure to close it after use.
+   * As the returned connection is a short circuited one, possibly bypassing RPC layers, the RPC
+   * user within the connection will always be the same user from whose context the connection is
+   * created.
    *
    * @param conf configuration
    * @return Connection created using the passed conf.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessorEnvironment.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessorEnvironment.java
index 1f48824..5f476eb 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessorEnvironment.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionCoprocessorEnvironment.java
@@ -69,6 +69,8 @@ public interface RegionCoprocessorEnvironment extends CoprocessorEnvironment<Reg
    * Note: If you want to create Connection with your own Configuration and NOT use the RegionServer
    * Connection (though its cache of locations will be warm, and its life-cycle is not the concern
    * of the CP), see {@link #createConnection(Configuration)}.
+   * As the returned connection is a short circuited one, possibly bypassing RPC layers, the RPC
+   * user within the connection will always be the hbase super user who started the server process.
    * @return The host's Connection to the Cluster.
    */
   Connection getConnection();
@@ -81,6 +83,9 @@ public interface RegionCoprocessorEnvironment extends CoprocessorEnvironment<Reg
    * <p>
    * Note: HBase will NOT cache/maintain this Connection. If Coprocessors need to cache and reuse
    * this connection, it has to be done by Coprocessors. Also make sure to close it after use.
+   * As the returned connection is a short circuited one, possibly bypassing RPC layers, the RPC
+   * user within the connection will always be the same user from whose context the connection is
+   * created.
    *
    * @param conf configuration
    * @return Connection created using the passed conf.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessorEnvironment.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessorEnvironment.java
index c1c0c25..7bcc123 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessorEnvironment.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionServerCoprocessorEnvironment.java
@@ -57,6 +57,8 @@ public interface RegionServerCoprocessorEnvironment
    * Note: If you want to create Connection with your own Configuration and NOT use the RegionServer
    * Connection (though its cache of locations will be warm, and its life-cycle is not the concern
    * of the CP), see {@link #createConnection(Configuration)}.
+   * As the returned connection is a short circuited one, possibly bypassing RPC layers, the RPC
+   * user within the connection will always be the hbase super user who started the server process.
    * @return The host's Connection to the Cluster.
    */
   Connection getConnection();
@@ -69,6 +71,9 @@ public interface RegionServerCoprocessorEnvironment
    * <p>
    * Note: HBase will NOT cache/maintain this Connection. If Coprocessors need to cache and reuse
    * this connection, it has to be done by Coprocessors. Also make sure to close it after use.
+   * As the returned connection is a short circuited one, possibly bypassing RPC layers, the RPC
+   * user within the connection will always be the same user from whose context the connection is
+   * created.
    *
    * @param conf configuration
    * @return Connection created using the passed conf.
