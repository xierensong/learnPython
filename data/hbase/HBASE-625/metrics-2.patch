Index: conf/hadoop-metrics.properties
===================================================================
--- conf/hadoop-metrics.properties	(revision 0)
+++ conf/hadoop-metrics.properties	(revision 0)
@@ -0,0 +1,32 @@
+# See http://wiki.apache.org/hadoop/GangliaMetrics
+
+# Configuration of the "hbase" context for null
+hbase.class=org.apache.hadoop.metrics.spi.NullContext
+
+# Configuration of the "hbase" context for file
+# hbase.class=org.apache.hadoop.metrics.file.FileContext
+# hbase.period=10
+# hbase.fileName=/tmp/hbasemetrics.log
+
+# Configuration of the "hbase" context for ganglia
+# hbase.class=org.apache.hadoop.metrics.ganglia.GangliaContext
+# hbase.period=10
+# hbase.servers=HOST_IP:8649
+
+# Configuration of the "hbase" context for ganglia
+# rpc.class=org.apache.hadoop.metrics.ganglia.GangliaContext
+# rpc.period=10
+# rpc.servers=HOST_IP:8649
+
+# Configuration of the "jvm" context for null
+jvm.class=org.apache.hadoop.metrics.spi.NullContext
+
+# Configuration of the "jvm" context for file
+# jvm.class=org.apache.hadoop.metrics.file.FileContext
+# jvm.period=10
+# jvm.fileName=/tmp/jvmmetrics.log
+
+# Configuration of the "jvm" context for ganglia
+# jvm.class=org.apache.hadoop.metrics.ganglia.GangliaContext
+# jvm.period=10
+# jvm.servers=HOST_IP:8649
Index: src/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
===================================================================
--- src/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java	(revision 705346)
+++ src/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java	(working copy)
@@ -84,6 +84,7 @@
 import org.apache.hadoop.hbase.ipc.HMasterRegionInterface;
 import org.apache.hadoop.hbase.ipc.HRegionInterface;
 import org.apache.hadoop.hbase.ipc.HbaseRPC;
+import org.apache.hadoop.hbase.regionserver.metrics.RegionServerMetrics;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.FSUtils;
 import org.apache.hadoop.hbase.util.InfoServer;
@@ -171,6 +172,8 @@
    */
   private final LinkedList<byte[]> reservedSpace = new LinkedList<byte []>();
   
+  private RegionServerMetrics metrics;
+  
   /**
    * Thread to shutdown the region server in an orderly manner.  This thread
    * is registered as a shutdown hook in the HRegionServer constructor and is
@@ -235,7 +238,7 @@
     this.connection = ServerConnectionManager.getConnection(conf);
 
     this.isOnline = false;
-
+    
     // Config'ed params
     this.numRetries =  conf.getInt("hbase.client.retries.number", 2);
     this.threadWakeFrequency = conf.getInt(THREAD_WAKE_FREQUENCY, 10 * 1000);
@@ -291,8 +294,7 @@
   public void run() {
     boolean quiesceRequested = false;
     // A sleeper that sleeps for msgInterval.
-    Sleeper sleeper =
-      new Sleeper(this.msgInterval, this.stopRequested);
+    Sleeper sleeper = new Sleeper(this.msgInterval, this.stopRequested);
     try {
       init(reportForDuty(sleeper));
       long lastMsg = 0;
@@ -314,6 +316,7 @@
           try {
             this.serverInfo.setLoad(new HServerLoad(requestCount.get(),
                 onlineRegions.size()));
+            metrics();
             this.requestCount.set(0);
             HMsg msgs[] = hbaseMaster.regionServerReport(
               serverInfo, outboundArray, getMostLoadedRegions());
@@ -523,6 +526,7 @@
       this.fs = FileSystem.get(this.conf);
       this.rootDir = new Path(this.conf.get(HConstants.HBASE_DIR));
       this.log = setupHLog();
+      this.metrics = new RegionServerMetrics();
       startServiceThreads();
       isOnline = true;
     } catch (IOException e) {
@@ -565,6 +569,14 @@
   }
   
   /*
+   * @param interval Interval since last time metrics were called.
+   */
+  protected void metrics() {
+    this.metrics.regions.set(this.onlineRegions.size());
+    this.metrics.requests.set(this.requestCount.get());
+  }
+  
+  /*
    * Start Chore Threads, Server, Worker and lease checker threads. Install an
    * UncaughtExceptionHandler that calls abort of RegionServer if we get
    * an unhandled exception.  We cannot set the handler on all threads.
Index: src/java/org/apache/hadoop/hbase/regionserver/metrics/RegionServerMetrics.java
===================================================================
--- src/java/org/apache/hadoop/hbase/regionserver/metrics/RegionServerMetrics.java	(revision 0)
+++ src/java/org/apache/hadoop/hbase/regionserver/metrics/RegionServerMetrics.java	(revision 0)
@@ -0,0 +1,90 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver.metrics;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.metrics.MetricsContext;
+import org.apache.hadoop.metrics.MetricsRecord;
+import org.apache.hadoop.metrics.MetricsUtil;
+import org.apache.hadoop.metrics.Updater;
+import org.apache.hadoop.metrics.jvm.JvmMetrics;
+import org.apache.hadoop.metrics.util.MetricsIntValue;
+
+
+/** 
+ * This class is for maintaining the various regionserver statistics
+ * and publishing them through the metrics interfaces.
+ * <p>
+ * This class has a number of metrics variables that are publicly accessible;
+ * these variables (objects) have methods to update their values.
+ */
+public class RegionServerMetrics implements Updater {
+  private final Log LOG = LogFactory.getLog(this.getClass());
+  private final MetricsRecord metricsRecord;
+  
+  /**
+   * Count of regions carried by this regionserver
+   */
+  public final MetricsIntValue regions = new MetricsIntValue("regions");
+  
+  /**
+   * Count of requests to the regionservers
+   */
+  public final MetricsIntValue requests = new MetricsIntValue("requests");
+  
+  /**
+   * Count of storefiles open on the regionserver.
+   */
+  public final MetricsIntValue storefiles = new MetricsIntValue("storefiles");
+  
+  /**
+   * Sum of all the memcache sizes in this regionserver.
+   */
+  public final MetricsIntValue memcaches = new MetricsIntValue("memcaches");
+
+  public RegionServerMetrics() {
+    MetricsContext context = MetricsUtil.getContext("hbase");
+    metricsRecord = MetricsUtil.createRecord(context, "regionserver");
+    String name = Thread.currentThread().getName();
+    metricsRecord.setTag("RegionServer", name);
+    context.registerUpdater(this);
+    JvmMetrics.init("RegionServer", name);
+    LOG.info("Initialized");
+  }
+  
+  public void shutdown() {
+    // nought to do.
+  }
+    
+  /**
+   * Since this object is a registered updater, this method will be called
+   * periodically, e.g. every 5 seconds.
+   */
+  public void doUpdates(@SuppressWarnings("unused") MetricsContext unused) {
+    synchronized (this) {
+      this.regions.pushMetric(metricsRecord);
+      this.requests.pushMetric(metricsRecord);
+    }
+    this.metricsRecord.update();
+  }
+  
+  public void resetAllMinMax() {
+    // Nothing to do
+  }
+}
\ No newline at end of file
