Index: conf/hadoop-metrics.properties
===================================================================
--- conf/hadoop-metrics.properties	(revision 0)
+++ conf/hadoop-metrics.properties	(revision 0)
@@ -0,0 +1,26 @@
+# Configuration of the "hbase" context for null
+dfs.class=org.apache.hadoop.metrics.spi.NullContext
+
+# Configuration of the "hbase" context for file
+#dfs.class=org.apache.hadoop.metrics.file.FileContext
+#dfs.period=10
+#dfs.fileName=/tmp/hbasemetrics.log
+
+# Configuration of the "hbase" context for ganglia
+# dfs.class=org.apache.hadoop.metrics.ganglia.GangliaContext
+# dfs.period=10
+# dfs.servers=localhost:8649
+
+
+# Configuration of the "jvm" context for null
+jvm.class=org.apache.hadoop.metrics.spi.NullContext
+
+# Configuration of the "jvm" context for file
+#jvm.class=org.apache.hadoop.metrics.file.FileContext
+#jvm.period=10
+#jvm.fileName=/tmp/jvmmetrics.log
+
+# Configuration of the "jvm" context for ganglia
+# jvm.class=org.apache.hadoop.metrics.ganglia.GangliaContext
+# jvm.period=10
+# jvm.servers=localhost:8649
Index: src/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
===================================================================
--- src/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java	(revision 703322)
+++ src/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java	(working copy)
@@ -68,8 +68,8 @@
 import org.apache.hadoop.hbase.NotServingRegionException;
 import org.apache.hadoop.hbase.RegionHistorian;
 import org.apache.hadoop.hbase.RemoteExceptionHandler;
+import org.apache.hadoop.hbase.UnknownRowLockException;
 import org.apache.hadoop.hbase.UnknownScannerException;
-import org.apache.hadoop.hbase.UnknownRowLockException;
 import org.apache.hadoop.hbase.ValueOverMaxLengthException;
 import org.apache.hadoop.hbase.Leases.LeaseStillHeldException;
 import org.apache.hadoop.hbase.filter.RowFilterInterface;
@@ -81,6 +81,7 @@
 import org.apache.hadoop.hbase.ipc.HMasterRegionInterface;
 import org.apache.hadoop.hbase.ipc.HRegionInterface;
 import org.apache.hadoop.hbase.ipc.HbaseRPC;
+import org.apache.hadoop.hbase.regionserver.metrics.RegionServerMetrics;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.FSUtils;
 import org.apache.hadoop.hbase.util.InfoServer;
@@ -165,6 +166,8 @@
    */
   private final LinkedList<byte[]> reservedSpace = new LinkedList<byte []>();
   
+  private final RegionServerMetrics metrics;
+  
   /**
    * Thread to shutdown the region server in an orderly manner.  This thread
    * is registered as a shutdown hook in the HRegionServer constructor and is
@@ -228,6 +231,8 @@
     this.conf = conf;
 
     this.isOnline = false;
+    
+    this.metrics = new RegionServerMetrics(conf);
 
     // Config'ed params
     this.numRetries =  conf.getInt("hbase.client.retries.number", 2);
@@ -284,8 +289,7 @@
   public void run() {
     boolean quiesceRequested = false;
     // A sleeper that sleeps for msgInterval.
-    Sleeper sleeper =
-      new Sleeper(this.msgInterval, this.stopRequested);
+    Sleeper sleeper = new Sleeper(this.msgInterval, this.stopRequested);
     try {
       init(reportForDuty(sleeper));
       long lastMsg = 0;
@@ -313,6 +317,7 @@
             this.requestCount.set(0);
             HMsg msgs[] = hbaseMaster.regionServerReport(
               serverInfo, outboundArray, getMostLoadedRegions());
+            metrics();
             lastMsg = System.currentTimeMillis();
             if (this.quiesced.get() && onlineRegions.size() == 0) {
               // We've just told the master we're exiting because we aren't
@@ -492,6 +497,11 @@
     LOG.info(Thread.currentThread().getName() + " exiting");
   }
   
+  protected void metrics() {
+    this.metrics.regions.set(this.onlineRegions.size());
+    this.metrics.requests.set(this.requestCount.get());
+  }
+  
   /*
    * Run init. Sets up hlog and starts up all server threads.
    * @param c Extra configuration.
Index: src/java/org/apache/hadoop/hbase/regionserver/metrics/RegionServerMetrics.java
===================================================================
--- src/java/org/apache/hadoop/hbase/regionserver/metrics/RegionServerMetrics.java	(revision 0)
+++ src/java/org/apache/hadoop/hbase/regionserver/metrics/RegionServerMetrics.java	(revision 0)
@@ -0,0 +1,76 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hbase.regionserver.metrics;
+
+import org.apache.hadoop.hbase.HBaseConfiguration;
+import org.apache.hadoop.metrics.MetricsContext;
+import org.apache.hadoop.metrics.MetricsRecord;
+import org.apache.hadoop.metrics.MetricsUtil;
+import org.apache.hadoop.metrics.Updater;
+import org.apache.hadoop.metrics.jvm.JvmMetrics;
+import org.apache.hadoop.metrics.util.MetricsIntValue;
+
+
+/**
+ * 
+ * This class is for maintaining  the various regionserver statistics
+ * and publishing them through the metrics interfaces.
+ * <p>
+ * This class has a number of metrics variables that are publicly accessible;
+ * these variables (objects) have methods to update their values;
+ *  for example:
+ *  <p> {@link #regions}.inc()
+ *
+ */
+public class RegionServerMetrics implements Updater {
+  private final MetricsRecord metricsRecord;
+  public final MetricsIntValue regions = new MetricsIntValue("regions");
+  public MetricsIntValue requests = new MetricsIntValue("requests");
+
+    
+  public RegionServerMetrics(HBaseConfiguration conf) {
+    String sessionId = conf.get("session.id"); 
+    // Initiate reporting of Java VM metrics
+    JvmMetrics.init("DataNode", sessionId);
+
+    // Create record for DataNode metrics
+    MetricsContext context = MetricsUtil.getContext("hbase");
+    metricsRecord = MetricsUtil.createRecord(context, "regionserver");
+    context.registerUpdater(this);
+  }
+  
+  public void shutdown() {
+    // nought to do.
+  }
+    
+  /**
+   * Since this object is a registered updater, this method will be called
+   * periodically, e.g. every 5 seconds.
+   */
+  public void doUpdates(@SuppressWarnings("unused") MetricsContext unused) {
+    synchronized (this) {
+      this.regions.pushMetric(metricsRecord);
+      this.requests.pushMetric(metricsRecord);
+    }
+    metricsRecord.update();
+  }
+  
+  public void resetAllMinMax() {
+    // Nothing to do
+  }
+}
\ No newline at end of file
