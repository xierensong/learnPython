FRName,BugURL,IssueTitle,Type,Status,Priority,Resolution,Affects Version/s,Fix Version/s,Component/s,Description
CXF-278,"https://issues.apache.org/jira/browse/CXF-278
",Confguration of the server transport engine bean at the individual port level,Improvement,CLOSED,Critical,Fixed,2.0-M1,2.0-M1,Transports,"We need the configuration can applied at the server engine level for a given port, for example :
<bean name=""org.apache.cxf.transport.http.JettyHTTPServerEngine.${http.port}"" abstract=""true""/>
org.apache.cxf.transport.http.JettyHTTPServerEngine is the bean name of the engine, ${http.port} is the specific port. This is useful when there're multiple types of providers listening on the same port and one wants to apply, say, sslServer properties to all providers. This functionality was available in Celtix, the bean name was different though."
CXF-7568,"https://issues.apache.org/jira/browse/CXF-7568
",Support JWE PBES encryption,Improvement,CLOSED,Major,Fixed,None,"3.2.2, 3.1.15",None,This task is to support JWE PBES encryption via the interceptors.
CXF-6800,"https://issues.apache.org/jira/browse/CXF-6800
",add http-undertow transport,New Feature,CLOSED,Major,Fixed,None,3.2.0,None,"As in Apache Camel there's already a camel-undertow component and in the upcoming Karaf 4.1(which will use OPS4J PAX-WEB 6), there's also an undertow http-osgi service implementation, so I think it should be good in CXF we also has a http-undertow(the counterpart of current http-jetty) transport so that end user has more option to chose the http transport they wanna use"
CXF-6622,"https://issues.apache.org/jira/browse/CXF-6622
",Enhance Failover Feature to support Circuit Breaker pattern,New Feature,CLOSED,Major,Fixed,None,3.2.0,None,"The interest in supporting Netflix Hystrix in CXF grows. Having a quality circuit breaker failover feature/selector (not necessarily Hystrix based) would be great
Spring-based configuration is going to support new circuit-breaker-failover feature:
<clustering:circuit-breaker-failover threshold="".."" timeout="".."">
    <clustering:strategy>...</clustering:strategy>
</clustering:circuit-breaker-failover>
Documentation:
https://cwiki.apache.org/confluence/display/CXF20DOC/JAX-RS+Failover
https://cwiki.apache.org/confluence/display/CXF20DOC/FailoverFeature
https://cwiki.apache.org/confluence/display/CXF20DOC/Using+CXF+and+Failover+in+OSGi+environment
Samples:
distribution\src\main\release\samples\clustering
OSGi blueprint sample:
distribution\src\main\release\samples\clustering\failover_jaxws_osgi"
CXF-4209,"https://issues.apache.org/jira/browse/CXF-4209
",Server side message redelivery support for WS-RM,New Feature,CLOSED,Major,Fixed,None,3.2.0,WS-* Components,"Currently, when a WS-RM message reaches the RM-Destination at the server side but not the service itself, there is no mechanism to redeliver this message to the service. There is also no mechanism for redelivering those persisted messages at the RM-Destination to the services when the corresponding destination endpoints are restarted.
A retry mechanism similar to what is available at the RM-Source for message retransmission can be provided at the RM-Destination to enable message redelivery."
CXF-5023,"https://issues.apache.org/jira/browse/CXF-5023
",Implement WS-Eventing from WS-ResourceAccess spec suite,New Feature,CLOSED,Major,Fixed,None,3,WS-* Components,"This is about implementing http://www.w3.org/TR/2011/REC-ws-eventing-20111213/.
Jan Martiska prepared a preliminary implementation [1] that is to be enhanced a bit, but is basically working.
Also evaluate implementing http://www.w3.org/TR/2011/REC-ws-event-descriptions-20111213 .
[1] https://github.com/jmartisk/cxf/commits/jmartisk-devel"
CXF-6837,"https://issues.apache.org/jira/browse/CXF-6837
",Add cache for MessageBodyReader/Writer,Improvement,CLOSED,Major,Fixed,"3.1.5, 3.0.8","3.1.7, 3.2.0",JAX-RS,"CXF selects the msgBodyReader/writer in the reader/writer list for every request, which has big impact to the performance. Jersey also has the cache in org.glassfish.jersey.message.internal.MessageBodyFactory._getMessageBodyReader(...). I have tried add the cache for CXF in ProviderFactory and been proved that it has improved 7-8% for json requests in JMeter. Please let me know if you'd like me to add the enhancement for CXF. Thanks.
http://cxf.547215.n5.nabble.com/MessageBodyReader-Writer-cache-td5767091.html"
CXF-6525,"https://issues.apache.org/jira/browse/CXF-6525
",Support for http://docs.oasis-open.org/wss/oasis-wss-SwAProfile-1.1#Attachment-Content-Only when using WSS-Policy,Improvement,CLOSED,Major,Fixed,3.1.2,"3.1.3, 3.0.7",Core,Support for http://docs.oasis-open.org/wss/oasis-wss-SwAProfile-1.1#Attachment-Content-Only should be possible when using WSS-Policy
CXF-6935,"https://issues.apache.org/jira/browse/CXF-6935
",Better error message than java.lang.NullPointerException - org.apache.cxf.common.util.Compiler.useJava6Compiler(Compiler.java:187) when running on a JRE instead of JDK,Improvement,CLOSED,Major,Fixed,3.1.6,"3.0.10, 3.1.7, 3.2.0",None,"CXF needs a better error message than java.lang.NullPointerException - org.apache.cxf.common.util.Compiler.useJava6Compiler(Compiler.java:187) when running on a JRE instead of JDK.
2016-06-06 10:47:09,902 [qtp16583278-30] ERROR: java.lang.NullPointerException - org.apache.cxf.common.util.Compiler.useJava6Compiler(Compiler.java:187)
java.lang.NullPointerException
                at org.apache.cxf.common.util.Compiler.useJava6Compiler(Compiler.java:187)
                at org.apache.cxf.common.util.Compiler.compileFiles(Compiler.java:141)
                at org.apache.cxf.common.util.Compiler.compileFiles(Compiler.java:136)
                at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.compileJavaSrc(DynamicClientFactory.java:611)
                at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:370)
                at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:276)
                at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:269)
                at org.apache.cxf.endpoint.dynamic.DynamicClientFactory.createClient(DynamicClientFactory.java:204)
The method javax.tools.ToolProvider.getSystemJavaCompiler() is documented to return null if no compiler is provided."
CXF-5792,"https://issues.apache.org/jira/browse/CXF-5792
",WSDLGetUtils Customization,New Feature,CLOSED,Major,Fixed,None,"2.7.12, 3.0.1",Simple Frontend,"JbossWS requests the ability to customize the published URL of the soap:address
location written to the wsdl file.
We propose doing this by replacing the existing WSDLGetUtils in WSDLGetInterceptor
in the following manner.
for (Endpoint ep : getService().getEndpoints().values()) {
final List<Interceptor<? extends Message>> inList = ep.getInInterceptors();
for (Interceptor<? extends Message> in : inList) {
if (in instanceof WSDLGetInterceptor)
{ ((WSDLGetInterceptor)in).setWsdlGetUtil(new WSDLSoapAddressRewriteUtils()); }
}
}"
CXF-6126,"https://issues.apache.org/jira/browse/CXF-6126
",Search serviceBeans by given annotation,Improvement,CLOSED,Major,Fixed,3.0.2,"3.0.4, 3.1",JAX-RS,"It would be cool, to be able to specify an annotation in jaxrs xml and JAXRSServerFactoryBeanDefinitionParser scans the Spring context for all beans with this annotation and adds them as service beans.
Simple patch with proof of concept will be attached"
CXF-6074,"https://issues.apache.org/jira/browse/CXF-6074
",Add configured XmlAdapters,Improvement,CLOSED,Major,Fixed,None,3.0.3,JAXB Databinding,"In some cases an XmlAdapter (as used by JAXB) needs state. For this the Marshaller and Unmarshaller have a setAdapter(...) method, that accepts a configured instance.
Currently the JAXBDataBinding has no configuration for this."
CXF-5489,"https://issues.apache.org/jira/browse/CXF-5489
",Add 'transferTo' functionality to Attachments,Improvement,CLOSED,Major,Fixed,None,2.7.9,JAX-RS,"As per the email thread : ""Accessing temporary file name of attachments"", I've created a patch to add transferTo(File) functionality to attachments. In this way, if the uploaded file has been saved as a temp file, an attempt is made to perform an OS level file move rather than reading the file contents in to and out of memory.
For large files accessed over network attached storage, this can be quite beneficial.
Please let me know if this functionality could be included."
CXF-5353,"https://issues.apache.org/jira/browse/CXF-5353
",WADLGenerator needs to support existing JavaDocs when possible,Improvement,CLOSED,Major,Fixed,None,3.0.0-milestone2,None,"CXF @Description annotations targeting a given resource method (method itself and its in and response parameters) will often duplicate what the existing JavaDocs have already documented.
WADLGenerator needs to do the best effort in trying to incorporate JavaDocs into the generated document."
CXF-4936,"https://issues.apache.org/jira/browse/CXF-4936
",(PATCH) Expose FastInfoset serializer tuning properties,New Feature,CLOSED,Major,Fixed,2.6.6,"2.6.8, 2.7.5, 3.0.0-milestone1",Configuration,"The FastInfoset StAX serializer provides several tuning properties that are inherited from the FastInfoset Encoder class:
http://java.net/projects/fi/sources/svn/content/trunk/code/fastinfoset/src/main/java/com/sun/xml/fastinfoset/Encoder.java
Several of them have uses in performance tuning.
The attached patch exposes those properties on the FIStaxOutInterceptor and FastInfoset configuration facilities - the FastInfosetFeature bean (used in cxf:bus XML configuration) and the @FastInfoset annotation.
The patch is made against the 2.6.x branch, but should also work on trunk."
CXF-5001,"https://issues.apache.org/jira/browse/CXF-5001
",Support XKMS 2.0,New Feature,CLOSED,Major,Fixed,3.0.0-milestone1,3.0.0-milestone1,Services,"Talend is happy to donate the initial XKMS 2.0 implementation to Apache CXF as part of this Jira.
XKMS will be contributed as a service (like STS and WS-Discovery) providing standardized access to central public key infrastructure (PKI) including lookup, validation, registration, reissuing and revocation of public keys.
XKMS will help users to manage their certificates centrally instead storing them into local keystores, that IMO best practice for middle/large service landscapes.
I tried to describe the use case, architecture and design of XKMS Service in CXF wiki:
https://cwiki.apache.org/confluence/display/CXF20DOC/XML+Key+Management+Service+%28XKMS%29
and in the blog: http://ashakirin.blogspot.de/2013/04/cxf-security-getting-certificates-from.html .
Attached is the initial draft of XKMS service implementation supporting X509 public keys, simple File and LDAP storages and providing Web and OSGi deployment. Suggested target CXF release for XKMS service will be 3.0. Code was designed and implemented by me together with Christian Schneider (cschneider), reviewed and refactored by Jan Bernhard (jbernhard) and donated by Talend company.
Any feedback for this code is welcome. The next tasks will be support revocation lists, complete validate operation for trusted chains, extend system tests, support new key storages.
Regards,
Andrei."
CXF-5076,"https://issues.apache.org/jira/browse/CXF-5076
","Improved handling of certificate repositories, added integration tests",Improvement,CLOSED,Major,Fixed,3.0.0-milestone1,3.0.0-milestone1,Services,"Refactored backend for easier certificate repository handling.
Adjusted integration test setup.
Added integration tests for certificate validation.
Thanks to Christian Schneider for doing most of the refactoring work."
CXF-5317,"https://issues.apache.org/jira/browse/CXF-5317
",Policy exception handler throws away useful exception stack trace,Improvement,CLOSED,Major,Fixed,"2.7.6, 2.7.7","2.7.8, 2.6.11",WS-* Components,"I had a working WS-Policy which was encrypting the SOAP body with a UsernameToken using Basic128 encryption, then I modified the policy to use Basic256 encryption instead. I got the following stack trace cause:
Caused by: org.apache.cxf.ws.policy.PolicyException: Cannot encrypt data
at org.apache.cxf.ws.security.wss4j.policyhandlers.AbstractBindingBuilder.policyNotAsserted(AbstractBindingBuilder.java:294)
Since the exception was short on detail, I went to the source code and found that AbstractBindingBuilder.java:294 was simply throwing away the rest of the Exception object. There's a method existing already to take the exception too so I changed that line to call it and now get the following MUCH more useful error message on the end of the stack trace:
Caused by: org.apache.xml.security.encryption.XMLEncryptionException: Invalid AES key length: 20 bytes
Original Exception was java.security.InvalidKeyException: Invalid AES key length: 20 bytes
I chose priority Major because without this user will report the error ""cannot encrypt data"" which will give developers very little to go on. The only way to find the real problem is to attach a debugger which is not an option for everybody.
I'll attach a patch to this issue to resolve this."
CXF-3021,"https://issues.apache.org/jira/browse/CXF-3021
",Try to remove a wsdl4J dependency from the JAXRS frontend,Improvement,CLOSED,Major,Fixed,2.3,3.0.0-milestone1,JAX-RS,HTTP Transport and API modules depend strongly at runtime on javax.wsdl.* (wsdl4j)
CXF-5075,"https://issues.apache.org/jira/browse/CXF-5075
",Support for chain trust validation,Improvement,CLOSED,Major,Fixed,3.0.0-milestone1,3.0.0-milestone1,Services,"Provides a validator which verifies a given subject certificate followed by optional intermediate CAs.
Further Public Key Infrastructure data about intermediate and trusted CAs is taken from LDAP (filters can be configured via properties).
As result the validator returns the valid/invalid reason as IssuerTrust.
Certificate Revocation Lists are not supported yet.
Thanks to Christian Schneider for supporting and reviewing."
CXF-5053,"https://issues.apache.org/jira/browse/CXF-5053
",JAX-RS behavior differs from JAX-WS for MessageContext.get( Message.class.getName() ),Improvement,CLOSED,Major,Fixed,None,"2.5.11, 2.6.9, 2.7.6, 3.0.0-milestone1",JAX-RS,"In JAX-WS:
WebServiceContext webServiceContext; // injected with proper value.
Message message = Message.class.cast( webServiceContext.getMessageContext().get( Message.class.getName() ) );
results in a valid message object reference (not null)
In JAX-RS however similar code:
MessageContext jaxrsContext; // injected with proper value.
Message message = Message.class.cast( jaxrsContext.get( Message.class.getName() ) );
results in an invalid message object (null);"
CXF-4457,"https://issues.apache.org/jira/browse/CXF-4457
",Extend WS-SecureConversation to support SAML Assertions for authentication,Improvement,CLOSED,Major,Fixed,None,2.7.6,WS-* Components,"Hi, as shown for GlassFish Metro:
https://gist.github.com/3191480
Support the following authentication mechanism:
1.) The WSC gets a SAML assertion from the STS.
2.) The WSC sends that SAML assertion to the WSP to get the SCT from the WSP
3.) All subsequent real calls for doubled numbers between WSC and WSP use the SCT and not the SAML assertion.
Here is a Netbeans-generated WSDL for this scenario:
https://github.com/gmazza/blog-samples/blob/master/cxf_sts_tutorial/service/src/main/resources/DoubleItSecrConv.txt
A sample testcase that can be used (steps to use: update WSP WSDL with the one above, run mvn clean install tomcat7:redeploy from base folder, then mvn exec:exec from client folder): https://github.com/gmazza/blog-samples/tree/master/cxf_sts_tutorial"
CXF-5079,"https://issues.apache.org/jira/browse/CXF-5079
",Add support for mustunderstand = false in PolicyBasedWSS4JOutInterceptor,Improvement,CLOSED,Major,Fixed,"2.5.10, 2.6.8, 2.7.5","2.5.11, 2.6.9, 2.7.6",JAX-WS Runtime,"As discussed on the cxf-developer mailing list, patch is coming up shortly:
Yes, please submit a patch for this.
Colm.
On Thu, Jun 13, 2013 at 3:53 PM, <oddbjorn.heimdal@accenture.com> wrote:
> Hi,
>
> We have hit a limitation in PolicyBasedWSS4JOutInterceptor which hard
> codes mustUnderstand = true (line 99). This is configurable in the
> WSS4JOutInterceptor today, but not when using policy.
>
> public void handleMessage(SoapMessage message) throws Fault {
> Collection<AssertionInfo> ais;
> SOAPMessage saaj = message.getContent(SOAPMessage.class);
>
> boolean mustUnderstand = true;
> String actor = null;
>
> Obviously this makes sense in most cases, but we have some
> intermediaries which do not understand security...
>
> Would you accept a patch to have this configurable, for instance by
> creating a new property in SecurityConstants (for instance
> ws-security.mustsunderstand) and default to true?
>
> Best regards,
>
> Oddbj?rn
>
> ______________________________________________________________________
> _____________________
> Oddbj?rn Heimdal
> Accenture Technology Consulting - Security Snar?yveien 30, P.O. Box
> 363, 1326 Lysaker, Norway
> Mobile: +47 99 72 19 12
> Email: oddbjorn.heimdal@accenture.com<mailto:
> oddbjorn.heimdal@accenture.com>
>
>
> ________________________________
> This message is for the designated recipient only and may contain
> privileged, proprietary, or otherwise confidential information. If you
> have received it in error, please notify the sender immediately and
> delete the original. Any other use of the e-mail by you is prohibited.
>
> Where allowed by local law, electronic communications with Accenture
> and its affiliates, including e-mail and instant messaging (including
> content), may be scanned by our systems for the purposes of
> information security and assessment of internal compliance with Accenture policy.
>
>
> ______________________________________________________________________
> ________________
>
> www.accenture.com
>
�C
Colm O hEigeartaigh
Talend Community Coder
http://coders.talend.com"
CXF-2036,"https://issues.apache.org/jira/browse/CXF-2036
",Add option to retry a http request on socket error to http client,New Feature,CLOSED,Major,Fixed,"2.1.4, 2.2.3","2.1.7, 2.2.4","Core, Transports","See http://www.nabble.com/Retry-on-java.net.SocketTimeoutException%3A-Read-timed-out-td21939913.html
The client gets 'java.net.SocketTimeoutException: Read timed out' because the remote server is currently busy or 'java.net.SocketException: Connection reset' because of a network issue.
A new option in the http client configuration can catch these errors for a number of times and only throws the exception, if retry was not successful.
<http-conf:conduit name=""
{http://apache.org/hello_world_soap_http}
SoapPort.http-conduit"">
<http-conf:client RetryOnSocketError=""2"" />
</http-conf:conduit>"
CXF-2760,"https://issues.apache.org/jira/browse/CXF-2760
",implement useMessageIDAsCorrelationID for JMS Client,New Feature,CLOSED,Major,Fixed,"2.1.4, 2.1.9, 2.2.7","2.2.8, 2.1.10",Transports,MQSeries servers often use the message ID of and incoming message as the correlation ID for an outgoing message. In order for a CXF client to communicate with an MQSeries server it needs to correlate the outgoing message with the incoming message using the message ID of the sent message.
CXF-4350,"https://issues.apache.org/jira/browse/CXF-4350
",CXF JMS transport should support to JAXRS fontend client out of box,Improvement,CLOSED,Major,Fixed,None,"2.5.5, 2.6.2, 2.7",Transports,"Current JMS transport doesn't send out Message.REQUEST_URI and
Message.HTTP_REQUEST_METHOD properties as the HTTP transport does.
We need to add these headers when the jaxrs frondend client is used with JMS transport."
CXF-3765,"https://issues.apache.org/jira/browse/CXF-3765
",CXF features should use version range for features provided by Karaf,Improvement,CLOSED,Major,Fixed,2.4.2,"2.4.3, 2.5",OSGi,"Currently, CXF features use specific version for spring and spring-dm features.
It means that if CXF upgrade to a new Spring version, if Karaf doesn't update to the same version, CXF won't be installable in Karaf.
To avoid this situation, CXF should use version range for features provided by Karaf.
I'm gonna provide a patch for that."
CXF-3152,"https://issues.apache.org/jira/browse/CXF-3152
",Add support for processing a PKI Certificate Chain,Improvement,CLOSED,Major,Fixed,"2.3, 2.2.11","2.2.12, 2.3.1, 2.4",WS-* Components,WSS4J 1.5.10 has added support for processing a BinarySecurityToken that contains a PKI Certificate Chain. CXF must be updated to verify trust on the certificate chain associated with Signature verification.
CXF-2281,"https://issues.apache.org/jira/browse/CXF-2281
",WS-PolicyAttachment support for Java First services,New Feature,CLOSED,Major,Fixed,2.2.2,"2.2.3, 2.3",WS-* Components,"This patch adds some support for WS-PolicyAttachment with Java First services. It supports policies defined in ExternalAttachmentProviders.
For every PolicyAttachment in every ExternalAttachmentProvider, it:
adds the policy to the ServiceInfo (the top level of the WSDL)
adds policy references to all the binding operations that the policy applies to,
also adds policy references to the interface (portType) operations - this mirrors Wsdl11XPointerDomainExpression where the two are considered equivalent.
The patch builds cleanly against 2.2.2 and the latest trunk, with the exception of a checkstyle error for our copyright header.
While the two patches that this depends on are hopefully ready to be integrated into CXF, the solution presented here may not be the cleanest approach to implementing this functionality.
If you do decide to integrate it, please include this assertion in the NOTICE file:
This product includes software Copyright University of Southampton IT Innovation Centre, 2009 (http://www.it-innovation.soton.ac.uk).
Please also include ""from University of Southampton IT Innovation Centre"" in the change log."
CXF-2280,"https://issues.apache.org/jira/browse/CXF-2280
",Add OperationInfo extensors to generated WSDL,Improvement,CLOSED,Major,Fixed,2.2.2,"2.2.3, 2.3",Core,"When generating the WSDL from a service model, the ServiceWSDLBuilder does not add extensors to operations inside a portType. While this follows the SOAP 1.1 specification, the WS-I Basic Profile 1.1 overrules this. This functionality is particularly useful for the implementation of WS-PolicyAttachment:
""WSDL 1.1 disallows the use of extensibility elements on certain elements and the use of extensibility attributes on others. However, the WS-I Basic Profile 1.1 [BP 1.1] overrules this restriction and allows element extensibility everywhere. Therefore, the Policy reference SHOULD be attached using <wsp:PolicyReference> as child element unless it is absolutely necessary to maintain the original WSDL 1.1 restriction, in which case the @wsp:PolicyURIs attribute should be used for those restricted cases.""
(from the WS-PolicyAttachment W3C Submission at http://www.w3.org/Submission/WS-PolicyAttachment/#AttachingPolicyUsingWSDL1.1)
This patch adds the extensors. It builds cleanly against both 2.2.2 and the current trunk.
Please include ""from University of Southampton IT Innovation Centre"" in the change log."
CXF-2278,"https://issues.apache.org/jira/browse/CXF-2278
",Implement serialize method on JaxbAssertions,Improvement,CLOSED,Major,Fixed,2.2.2,"2.1.6, 2.2.3",JAXB Databinding,"The JaxbAssertion class inherits it's serialize method from PrimitiveAssertion which unhelpfully returns nothing.
This patch implements the serialize method using a JAXB marshaller. It uses similar code to JaxbAssertionBuilder to get a JAXBContext. It sets the ""jaxb.fragment"" flag of the marshaller so that the assertions can be included in larger xml documents (this is supported by all compliant implementations, see http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html).
The patch builds cleanly against both 2.2.2 and the current trunk.
Please include ""from University of Southampton IT Innovation Centre"" in the change log."
CXF-2491,"https://issues.apache.org/jira/browse/CXF-2491
",Add TLS cert constraints support,Improvement,CLOSED,Major,Fixed,None,"2.2.5, 2.3",Transports,"Extend CXF to support the configuration of ""TLS Certificate constraint patterns"" for clients and servers.
The goal is to be able to specify X.509 subject patterns that restrict details of
a) client certificates
b) target server certificates
that are acceptable for a specific inbound or outbound connection attempt."
CXF-4849,"https://issues.apache.org/jira/browse/CXF-4849
",WebClient needs to support JAX-RS 2.0 GenericType,Improvement,CLOSED,Major,Fixed,None,"2.7.4, 3.0.0-milestone1",JAX-RS,"This is useful for processing generic responses, example,
GenericType<List<Book>> genericResponseType = new GenericType<List<Book>>() {};

List<Book> books = webClient.get(genericResponseType);
// or

List<Book> books = webClient.post(someObject, genericResponseType);"
CXF-4791,"https://issues.apache.org/jira/browse/CXF-4791
",Passing arguments to JAXB compiler from WADL2Java,New Feature,CLOSED,Major,Fixed,2.7.2,"2.7.4, 2.6.7, 2.5.10, 3.0.0-milestone1","Build system, Tooling","I needed it for cxf-wadl2java-plugin originally. But since it is a part of tools the change will be propagated. Arguments are passed through existing plugin parameter <extraargs> with prefix -xjc.
Patch is included.
Example usage:
<extraargs>
    <extraarg>-xjc-XtoString</extraarg>
</extraargs>
I also added a test for generating toString with JAXB objects (this required dependency for jaxb2-basics with test scope).
Things already done:
1. Multiple arguments allowed
2. Code passed checkstyle verification
3. Prepared on trunk (2.8.0-SNAPSHOT)
Things to consider to change:
1. Implementation eventually
2. Add additional verification for test to check if toString was really generated
3. Replace dependency to jaxb2-basics with custom plugin (for tests)
I don't know if I have to add it but I provide this code without any warranty and for free. You can use it or change it whatever you like.
But it would be good if you would consider adding it as for now it is impossible to pass jaxb arguments which can be very useful (even mandatory)"
CXF-4768,"https://issues.apache.org/jira/browse/CXF-4768
",Refact SwaOutInterceptor for more compatible JAXB Impl usage,Improvement,CLOSED,Major,Fixed,2.6.5,"2.5.9, 2.6.6, 2.7.3, 3.0.0-milestone1",JAXB Databinding,"Now, in the SwaOutInterceptor, the non-standard method hasSwaRef from the JAXBContext is used to detected whether any attachment setup work is required, this works with JAXB RI impl. While using a non-RI implementation, due to special reason, the target JAXB Impl class is not marked as public.
It will be better that we could update the codes a bit for better compatible.
a. Update the accesible for the method if required
b. Chnage the mofidier for method hasSwaRef for eaier integration usage."
CXF-4748,"https://issues.apache.org/jira/browse/CXF-4748
",getMessage from java.lang.Throwable is excluded from accepted method,Improvement,CLOSED,Major,Fixed,None,"2.6.6, 2.7.3",JAXB Databinding,"According to jax-ws spec:
For each getter in the exception and its superclasses, a property of the same type and name is added to
the bean. All the getter methods except getMessage from java.lang.Throwable type hierarchy
are excluded from the list of getters to be mapped.
But currently, message does not show up in generated wsdl in CXF:
public class AddNumbersException extends Exception {
private static final long serialVersionUID = 4629689348515005826L;
String detail;
public AddNumbersException(String message, String detail)
{ super(message); this.detail = detail; }
public String getDetail()
{ return detail; }
}
<xs:complexType name=""AddNumbersException"">
<xs:sequence>
<xs:element name=""detail"" nillable=""true"" type=""xs:string""/>
</xs:sequence>
</xs:complexType>
The corrected version should be:
<xs:complexType name=""AddNumbersException"">
<xs:sequence>
<xs:element name=""detail"" nillable=""true"" type=""xs:string""/>
<xs:element name=""message"" nillable=""true"" type=""xs:string""/>
</xs:sequence>
</xs:complexType>"
CXF-4549,"https://issues.apache.org/jira/browse/CXF-4549
",Add retrieval of AccessToken to OAuth2 MessageContext,Improvement,CLOSED,Major,Fixed,"2.6.2, 2.7","2.6.4, 2.7.1",JAX-RS Security,"I found no way to get the Bearer token and the authorized client via
the injected MessageContext. I copied the OAuthRequestFilter and put the
AccessTokenValidation into the message which worked perfectly. May be
this could be done by default.
Patch will be provided."
CXF-4548,"https://issues.apache.org/jira/browse/CXF-4548
",Enable use of customized session provider in OAuth2 GrantService,Improvement,CLOSED,Major,Fixed,"2.6.2, 2.7","2.6.4, 2.7.1",JAX-RS Security,"In the AuthorizationCodeGrantService there are two private methods
using sessions to store and retrieve the sessionAuthenticityToken. It
would be nice to be able to change the storage.
I had to create a deep copy of this class to use some other session store.
Patch will be provided soon."
CXF-3547,"https://issues.apache.org/jira/browse/CXF-3547
",Enable http proxy support in the cxf-codegen-plugin for retrieval of WSDL files through the java.net.URL class,Improvement,CLOSED,Major,Fixed,2.4,"2.4.1, 2.3.5",Tooling,Currently this plugin ignores the proxy server configured in maven and requires you to pass in a http.proxyHost and http.proxyPort variables. It would be nice if it used the maven configuration to ensure these variables were set before using the java.net.URL class to retrieve the WSDL.
CXF-4515,"https://issues.apache.org/jira/browse/CXF-4515
",maven java2ws plugin address configuration,Improvement,CLOSED,Major,Fixed,2.6.2,"2.4.10, 2.5.6, 2.6.3, 2.7",Build system,I found useful being able to generate wsdl with a different port address.
CXF-4497,"https://issues.apache.org/jira/browse/CXF-4497
",Configure WSDL generation to ignore jaxb.index and ObjectFactory,Improvement,CLOSED,Major,Fixed,2.6.2,2.6.3,JAXB Databinding,"I would like the ability to disable the addition of all classes not directly referenced in the WSDL from being added to the wsdl. A small patch to org.apache.cxf.jaxb.JAXBDataBinding will satisfy this requirement and will not affect existing users as the configuration will be false by default. I will be submitting a patch to provide this functionality against 2.6.2
This can be configured on the endpoint via a property:
<jaxws:properties>
<entry key=""jaxb.scanPackages"" value=""false"" />
</jaxws:properties>"
CXF-4392,"https://issues.apache.org/jira/browse/CXF-4392
",Easier customization of log messages in Logging[In|Out]Interceptor,Improvement,CLOSED,Major,Fixed,2.6.1,"2.6.2, 2.7",Core,"We're using LoggingInInterceptor and LoggingOutInterceptor to produce logs for use in debugging issues in our services.
Although we're very happy with the features they provide, we find it a bit difficult to tweak what information is being logged and the format of the log.
Some of our clients would like more or less info to be logged, some would like everything in one line, wrapped in XML.
Specifically, it would be nice if the code fragment in the LoggingInInterceptor.logging() and LoggingOutInterceptor.LogWriter.close() methods which produces the log message string was extracted to separate overridable methods in Logging[In|Out]Interceptor, like this:
protected String formatMessage(LoggingMessage message) {
// Use toString as default:
return message.toString();
}
Another option is to add a factory method for the LoggingMessage such that we could override the toString method.
Or perhaps there are even better ways to meet the need of customized logging formats?"
CXF-4073,"https://issues.apache.org/jira/browse/CXF-4073
",Support multiple policy interceptor providers per policy assertion,Improvement,CLOSED,Major,Fixed,None,2.6,WS-* Components,"Hi,
At the moment policy mechanism is very powerfull, but have some limitation. One of them is that it is possible to register only one InterceptorProvider for one policy assertion.
PolicyInterceptorProviderRegistry interface extends Regsitry as:
public interface PolicyInterceptorProviderRegistry
extends Registry<QName, PolicyInterceptorProvider> {
I see some use cases where PolicyInterceptorProvider(s) are independent, but associated with the same policy assertion (for example in complex authentication case).
Proposal: extend PolicyInterceptorProviderRegistry to save set of PolicyInterceptorProvider for one assertion.
If proposal is accepted I will provide patch.
Regards,
Andrei."
CXF-4223,"https://issues.apache.org/jira/browse/CXF-4223
",Extend fault policy interceptors with POLICY_OVERRIDE,Improvement,CLOSED,Major,Fixed,None,2.5.3,Core,"Hi,
I would like to extend CXF-3996 for ClientPolicyInFaultInterceptor and ServerPolicyOutFaultInterceptor. Both interceptors will check POLICY_OVERRIDE message context property firstly and, if policy is provided, it will be used (the same way as in PolicyInInterceptor, PolicyOutInterceptor).
The reason of this extension is use cases where fault interceptor chain should be also controlled dynamically using POLICY_OVERRIDE mechanism (for example in case of WS-Addressing: if it was dynamically activated in PolicyInInterceptor, PolicyOutInterceptor it must be also consequentially done in ClientPolicyInFaultInterceptor and ServerPolicyOutFaultInterceptor, otherwise faults will be processed incorrectly). It also harmonise all policy interceptors code.
Patch includes:
1 extended EffectivePolicyImpl to support getting fault interceptors from PolicyInterceptorProviderRegistry
2)updated ClientPolicyInFaultInterceptor and ServerPolicyOutFaultInterceptor
3)harmonized PolicyInInterceptor, PolicyOutInterceptor
4)corresponded junit tests
Regards,
Andrei."
CXF-3635,"https://issues.apache.org/jira/browse/CXF-3635
",WS-Trust SPNego (WCF message level spnego),New Feature,CLOSED,Major,Fixed,2.3.5,"2.4.7, 2.5.3",WS-* Components,"We have spent time implementing SPNego over WS-Trust support for CXF and wish to submit it for possible inclusion in CXF itself. (Or at least as an example for others to follow) This was implemented so we could use the webservice of MS CRM 2011 when configured for 'on-premise' security, although I think WCF 4.0 uses this type of security by default if you explicitly change it. So I'm sure this functionality would be useful to others."
CXF-4173,"https://issues.apache.org/jira/browse/CXF-4173
",Support for ClaimValue element of federation claims dialect added,New Feature,CLOSED,Major,Fixed,2.5.2,2.5.3,Services,"As discussed in CXF-4062, the support for the ClaimValue as a child element of wst:Claims element in the RST is missing.
Ex.
<ic:ClaimValue Uri=""http://schemas.mycompany.com/2012/01/claims/role"">
<ic:Value>admin</ic:Value>
</ic:ClaimValue>"
CXF-4049,"https://issues.apache.org/jira/browse/CXF-4049
",Check external CryptoProvider from message context properties in Wss4jInInterceptor,Improvement,CLOSED,Major,Fixed,2.5.1,"2.4.7, 2.5.3",Core,"Hi,
Just a small improvements in Wss4jInInterceptor.
Normally CryptoProvider doesn't instantiated directly via CryptoFactory, but firstly tried to obtained from message context properties (SecurityConstants.ENCRYPT_CRYPTO, SecurityConstants.SIGNATURE_CRYPTO). And only if the properties are not set, CryptoProvider is instantiated via CryptoFactory. This gives the possibility to replace Merlin CryptoProvider to custom one (probably non keystore based).
AbstractBindingBuilder, XmlSignHandler, SAMLUtils are working in this way.
Unfortunatelly it is not the case for Wss4jInInterceptor. It doesn't initializes crypto provider in RequestData and crypto provider is always created via CryptoFactory. It makes impossible to use custom implementation of CryptoProvider in incoming chain.
Patch is attached.
Regards,
Andrei."
CXF-3882,"https://issues.apache.org/jira/browse/CXF-3882
",Support for Claims transformation in validate or issue RST,New Feature,CLOSED,Major,Fixed,2.5,2.6,Services,"Use case:
A partner company have set up an STS which is connected to their identity system. The issued SAML token contain claims in the attribute statement which do have a different encoding for the same meaning. Applications should not directly depend on the claims because they will be different for each partner. Therefore, the application trusts a so called Relying Party STS whereas the partner uses their Identity Provider STS. If identities of the partners are provisioned into your identiy system you're fine with the current IdentityMapper interface but this means claims must be provisioned too. This might work for different identity system within the same company but doesn't scale with partners. In this case, the RP STS transforms the claims of the IP STS to claims which are understood by the application.
If claims information are correlated to a security token like a SAML token it's encoded within an Attribute Statement. If it is a SecureConversation token, it's not part of the token itself but locally cached. The claims might be encoded within a custom token also.
The token can be part of the WS-Security header (issue request) or within the ValidateTarget (validate request).
The TokenValidator must validate the token and return the realm which is the source realm.
The claims of the source realm must be provided by the token validator or retrieved from the cache.
The target realm is provided as part of the RealmParser implementation.
The claims transformation interface looks like something:
List<Claim> mapClaims (String sourceRealm, List<Claim> sourceClaims, String targetRealm)"
CXF-4062,"https://issues.apache.org/jira/browse/CXF-4062
",Enabling custom claim parser,Improvement,CLOSED,Major,Fixed,2.5.2,2.5.3,Services,"STS-core:
Currently there is now way to use a custom dialect in requested claims. Even http://schemas.xmlsoap.org/ws/2005/05/identity/claims is not fully supported (only ClaimType element).
Therefore I introduced a new Interface ClaimParser, and a DefaultClaimParser with the current parsing logic. This parser is called by default within RequestParser, so that the normal cxf behavior has not changed. But to make this process more flexible it is possible (with this patch) to register any kind of ClaimParser supporting a specific dialect. I implemented a IdentityClaimParser which is currently able to parser CustomType and CustomValueType elements within the wst:claims element. Since the current RequestClaim does not support any claim values, except of the Uri attribute, I created a SubClass ClaimValueType to also pass the claim value to the claim handler.
This patch is just a starting point. I think there should be a more complex redesign of the current claim handling implementation, because it is currently focused on only one Use-Case. The following improvements should be made:
The RequestClaim class should be replaced by a more flexible interface supporting any kind of parsing and handling custom dialects.
It should be possible to include/configure custom claimparser via spring config
A fully supported implementation of http://schemas.xmlsoap.org/ws/2005/05/identity/claims dialect would be great
Here is an example of a claims STS request which is supported by applying this patch:
<wst:Claims Dialect=""http://schemas.xmlsoap.org/ws/2005/05/identity"" xmlns:ic=""http://schemas.xmlsoap.org/ws/2005/05/identity"">
<ic:ClaimValue Uri=""http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role""/>admin</ic:ClaimValue>
</wst:Claims>
Thank you for this great product!! I hope this patch can help to further improve CXF.
Best regards
Jan"
CXF-3990,"https://issues.apache.org/jira/browse/CXF-3990
",Change scope for EffectivePolicyImpl.initilise() and EndpointPolicyImpl.initilise() to more permissive,Improvement,CLOSED,Major,Fixed,None,"2.4.6, 2.5.2",Core,"Hi,
All initilize() methods in EffectivePolicyImpl and EndpointPolicyImpl are package private.
Unfortunatelly it prevents reusing of these classes in custom use cases.
Proposal: change method's scope to protected or public.
Patch with public alternative is attached.
Regards,
Andrei."
CXF-3930,"https://issues.apache.org/jira/browse/CXF-3930
",Extend ClaimsHandler interface to pass current realm and WebServiceContext,Improvement,CLOSED,Major,Fixed,2.5,2.5.1,Services,The interface ClaimsHandler should be extended to pass the current realm (or null if not present) and WebServiceContext.
CXF-3928,"https://issues.apache.org/jira/browse/CXF-3928
",Add token validation for OnBehalfOf element in TokenIssueOperation,Improvement,CLOSED,Major,Fixed,2.5,2.5.1,Services,"Tokens passed in OnBehalfOf element are not validated. It's the responsibility of the TokenProvider implementation to validate that.
A proposal has been discussed here:
http://cxf.547215.n5.nabble.com/STS-OnBehalfOf-token-validation-SAMLTokenProvider-td5003544.html
OnBehalfOf token validation is moved to the TokenIssueOperation and the ReceivedToken is enhanced with the following attributes:
was it a token of ws-security header (like ReceivedToken), onbehalfof, actas
successfully validated (it could be a token which depends on other constraints to be fully accepted)
original DOM element
transformed DOM element (used if the token is passed by ref, also supported by SAML spec)
principal (mostly, you only need the principal to issue a new token)"
CXF-3924,"https://issues.apache.org/jira/browse/CXF-3924
",Support to configure keystore per SAML realm,Improvement,CLOSED,Major,Fixed,2.5,2.5.1,Services,"You can configure the keystore in the properties file you configure using the attribute signaturePropertiesFile of the StaticSTSProperties class which is shared by all SAMLRealms. If you store several keys in one keystore, you can configure the signatureAlias in each SAMLRealm.
It's best practise to not share several private keys in a single java keystore. If you configure several realms in your STS deployment and each realm uses a different key to sign the saml assertion you must store all private keys in one java keystore.
Enhancement description:
Add the signaturePropertiesFile to the SAMLRealm too which is optional but if configured has higher priority than signaturePropertiesFile in StaticSTSProperties."
CXF-3879,"https://issues.apache.org/jira/browse/CXF-3879
",Add the ability to enforce a maximum attachment size,Improvement,CLOSED,Major,Fixed,"2.2.12, 2.3.7, 2.4.3","2.4.4, 2.3.8",JAX-RS,"Safe handling of multipart-* HTTP request requires the ability to cap the size of the uploaded attachments before they get cached. CXF does currently not provide an option for this (other frameworks such as the commons fileupload and the 3.0 servlet spec do provide this). I've attached a quick patch that allows one to set a option for enforcing a size limit while doing the attachment parsing (similar to the threshold and temp dir options). The biggest question imo is how to best bubble up a appropriate error. I chose to subclass IOException and then later on transform it into a 413 (request size too large) HTTP response, but would welcome input on other approaches.
I will attach a patch against CXF 2.2, but believe that it should also apply to newer versions."
CXF-3797,"https://issues.apache.org/jira/browse/CXF-3797
",WADL2Java Generator improvements,Improvement,CLOSED,Major,Fixed,None,"2.5, 2.4.4",JAX-RS,"Given a relatively complex WADL file (such as the one provided by Rackspace Cloud Servers API), JAX-RS WADL2Java Generator has many difficulties generating the proper Java classes.
To name a few:
Generated method parameter names may be invalid. For example a header parameter named 'X-Auth-Token' will not have the dashes removed before being converted to a Java method parameter. This results in invalid generated source.
@Produces annotation is not applied to methods, when the corresponding <response> element contains more that one representation elements.
Resolved XML-schemata(from the <grammars> section of the WADL) may contain included schemata.
The status attribute of the <response> element may contain a list of status codes. The generator is expecting none or a single entry. Also the generator looks only for HTTP status 200, while there are more valid codes, like 203.
The generated class names may collide with names of JAXB generated classes. For example a resource named 'Limits' may need to import a JAXB generated class also named 'Limits' this will trigger compilation errors.
We were trying to use the generator in order to create and use CXF Client Proxies for the RESTful web service mentioned above. This was necessary for us since we need to use the API for managing Radiojar, the main project we are currently working on.
I ended up checking out the source for JAX-RS Frontend and trying to fix the bugs in SourceGenerator.
Finally I managed to address the problems, so I will attach a patch to this issue, along with the WADL file and the imported XSDs."
CXF-3850,"https://issues.apache.org/jira/browse/CXF-3850
",SAML and UsernameToken validation should validate the realm of the incoming token against cached tokens,Improvement,CLOSED,Major,Fixed,None,2.5,Services,SAML and UsernameToken validation should validate the realm of the incoming token against the realm of the cached token
CXF-3827,"https://issues.apache.org/jira/browse/CXF-3827
",Cancelling a SCT with STS is missing verification of proof of possession key,Improvement,CLOSED,Major,Fixed,2.4.2,2.5,Services,"While cancelling a SCT with STS, the STS should verify the proof of possession key, most ideally in a configurable way where this verification can be switched on and off."
CXF-3835,"https://issues.apache.org/jira/browse/CXF-3835
",SAML and Username tokens should be cached in the STS service,Improvement,CLOSED,Major,Fixed,2.4.2,2.5,Services,The SAMLTokenProvider should put the issued tokens in cache and the SAMLTokenValidator and UsernameTokenValidator should use the cache for validation of the tokens. This would improve performance of the STS.
CXF-3826,"https://issues.apache.org/jira/browse/CXF-3826
",Implementation of caching in STS,Improvement,CLOSED,Major,Fixed,2.4.2,2.5,Services,"For implementation of caching within STS, the CXF TokenStore interface should be used. Moreover default implementations should be provided for InMemory and persistent and distributed type of caching."
CXF-3752,"https://issues.apache.org/jira/browse/CXF-3752
",Allow ability to reset values in ResponseTimeCounter via JMX,Improvement,CLOSED,Major,Fixed,None,"2.3.7, 2.4.3, 2.5",Management,"Issue CXF-2804 introduced the ability to reset the ResponseTimeCounter values using the method reset(). However, that method was not exposed via JMX. It would be very helpful to have that operation exposed."
CXF-2693,"https://issues.apache.org/jira/browse/CXF-2693
",Allow to use HttpsURLConnection's defaultSSLSocketFactory and defaultHostnameVerifier in CXF client,New Feature,CLOSED,Major,Fixed,2.2.6,"2.2.7, 2.3",Transports,"Allow CXF client (JAXWS & JAXRS) for HTTPS calls to use JVM wide SSL components :
HttpsURLConnection#getDefaultSSLSocketFactory()
HttpsURLConnection.html.getDefaultHostnameVerifier()
For this, I propose to add the following attributes to <http-conf:tlsClientParameters ... /> :
Attribute Description
useHttpsURLConnectionDefaultSslSocketFactory This attribute specifies if HttpsURLConnection.defaultSslSocketFactory should be used to create https connections. If 'true', 'jsseProvider', 'secureSocketProtocol', 'trustManagers', 'keyManagers', 'secureRandom', 'cipherSuites' and 'cipherSuitesFilter' are ignored.
useHttpsURLConnectionDefaultSslSocketFactory This attribute specifies if HttpsURLConnection.defaultHostnameVerifier should be used to create https connections. If 'true', 'disableCNCheck' is ignored."
CXF-3647,"https://issues.apache.org/jira/browse/CXF-3647
",Add schema validation explaination for samples/wsdl_first_xmlbeans README,Improvement,CLOSED,Major,Fixed,2.4.1,"2.3.6, 2.4.2, 2.5",Samples,"Similar to CXF-3640, the README of the wsdl_first_xmlbeans demo should also explain that the client will raise a schema validation exception at runtime."
CXF-3529,"https://issues.apache.org/jira/browse/CXF-3529
",Support for Map Interface in CXF Parameter Beans,New Feature,CLOSED,Major,Fixed,2.4.1,2.4.1,JAX-RS,"Apache CXF Rest Services doesn't support java.util.Map interface as their service arguments. They even do not support java.util.Map interface inside a bean.
This fix is to support Map interface as arguments and fields inside a bean.
> The code is tested with sample services like,
> public String debug(@FormParam("""")TestEmployeeTO testObject1,@FormParam(""map"") Map<String,Integer> map)
>
> public class TestEmployeeTO
{ > > private HashMap<String,String> currencies; > > //getters/setters > }
> Input Data
> map.x=11&map.y=9&currencies.IND=INR&currencies.USA=DOLLAR
> Output
> TestEmployeeTO[currencies=
{IND=INR, USA=DOLLAR}
]
> map=
{y=9, x=11}
>"
CXF-3535,"https://issues.apache.org/jira/browse/CXF-3535
",Use the Requested(Un)AttachedReference returned from an STS to refer to a SecurityToken for signature,Improvement,CLOSED,Major,Fixed,2.4,2.4.1,WS-* Components,"This task is to use the Requested(Un)AttachedReference returned from an STS to refer to a SecurityToken for signature. At the moment we construct a SecurityTokenReference element and set the appropriate ValueType (etc.) attributes on it, whereas we should just use whatever the STS returns."
CXF-3537,"https://issues.apache.org/jira/browse/CXF-3537
",Avoid CXF feature linked to a specific Karaf version,Improvement,CLOSED,Major,Fixed,None,2.4.1,OSGi,"To be compatible with several Karaf versions (including minor releases), the CXF features descriptor shouldn't reference Karaf version resources."
CXF-2716,"https://issues.apache.org/jira/browse/CXF-2716
",Collection Support for JSONProvider,Improvement,CLOSED,Major,Fixed,2.2.6,"2.4, 2.3.4",JAX-RS,"It seems JAXBElementProvider has the support for collections, but the same support is missing on JSONProvider. Submitting changes that would add this support"
CXF-3216,"https://issues.apache.org/jira/browse/CXF-3216
",Refactor http authentication to make it more flexible and simpler,Improvement,CLOSED,Major,Fixed,2.3.1,2.4,Transports,"The http authentication should be completely based on authSupplier. The HttpConduit should simply delegate to it.
We should also remove some of the other auth config options besides authorizationPolicy on conduit."
CXF-3160,"https://issues.apache.org/jira/browse/CXF-3160
",Reduce Code duplication between http transport variants,Improvement,CLOSED,Major,Fixed,2.3,2.4,Transports,"We still have to much duplicated or very similar code in the http transports.
Moving header code from AbstractHttpDestination to Headers
Moving invokeDestination from ServletController to AbstractServletController to share this code with http-osgi
Moving invoke from ServletDestination to AbstractHttpDestination to share this code with http-osgi
Removing doMessage from OsgiDestination
Removing invokeDestination from OsgiServletcontroller
Ignoring some mock based tests that do not work anymore. Will have to do some work on them
There are some small changes in the behaviour for http-osgi as we are now using the servlet code here. It would be great if Sergey or Dan could review this. Idon?t think the differences are important but I am not sure."
CXF-2928,"https://issues.apache.org/jira/browse/CXF-2928
",Add a configuration option that allows STSClient to use the requester's X509Certificate as the SubjectConfirmation KeyInfo data within RequestSecurityToken messages,Improvement,CLOSED,Major,Fixed,"2.2.10, 2.3","2.2.10, 2.3",None,"Request to expand the CXF STSClient to support a configuration option that enables an X509Certificate to be used as the saml:SubjectConfirmation KeyInfo element when making a WS-Trust RequestSecurityToken request.
Rationale is as follows:
1. The SAML 1.1 specification is flexible with regard to the type of XMLSignature KeyInfo (ds:KeyInfo) that may provided in a saml:SubjectConfirmation element to support the holder-of-key confirmation method.
2. Some relying parties require an X509 Certificate to be provided in the assertion confirmation data in order to perfom validation. For example, any relying party that uses WSS4J version 1.5.8 or earlier for SAML assertion validation (with holder-of-key conf) requires the X509 Certificate to exist in the subject confirmation data.
3. Accordingly, some STS implementations allow RequestSecurityToken ds:KeyInfo element to optionally contain either a ds:X509Certificate or the corresponding ds:KeyValue for the public key within the RequestSecurityToken message."
CXF-3256,"https://issues.apache.org/jira/browse/CXF-3256
",Allow sharing of session manager between different services on the same server,Improvement,CLOSED,Major,Fixed,2.2.10,2.3.1,Transports,At the moment a different sessionmanager is used for every endpoint. In our application we need to share the same session between all endpoints. As per Dan's reply here: http://cxf.547215.n5.nabble.com/Sessions-in-Stand-Alone-CXF-td557869.html I shall upload the patch we've been using. It would be great if this could be applied to the 2.2 and 2.3 branch if thats possible.
CXF-3146,"https://issues.apache.org/jira/browse/CXF-3146
",make gzip encoding works over jms transport,Improvement,CLOSED,Major,Fixed,None,2.2.12,None,"seems currently gzip content-encoding only works with http transport, all gzip related interceptors are in cxf-rt-transport-http module, but IMHO gzip content-encoding should be decoupled with the underlying transport. From my initial investigation, support gzip content-encoding over jms transport is doable if jms client use binary message mode, we only need address some protocol header mismatch issue."
CXF-3133,"https://issues.apache.org/jira/browse/CXF-3133
",Refactoring JAXRSInvoker to support CXF continuation better,Improvement,CLOSED,Major,Fixed,None,"2.3.1, 2.4",None,"I did some clean up work[1] on the CxfRsInvoker in Camel to let it work better with CXF 2.3.0 continuation API.
Current JAXRSInvoker is not friendly to CXF continuation API, and the method
public Object invoke(Exchange exchange, Object request)
is stateful and can't be called by the continuation resume process.
[1]http://svn.apache.org/viewvc?rev=1036343&view=rev"
CXF-3137,"https://issues.apache.org/jira/browse/CXF-3137
",Simplify http connection factory in http transport (please review),Improvement,CLOSED,Major,Fixed,2.3,2.4,Transports,"Currently the http transport uses a quite complicated way to create http url connections. There are two factories (for http and https). One is selected and cached. Then when you change the config of the transport it is eventually replaced.
I propose to make this much simpler by having only a https url connection factory that also handles the http case. The new code has one little drawback it also eliminates the ConnectionInfo classes partly. I think that is not a big issue as I think this classes are only used for https trust decisions. It would be great though if someone could review the patch."
CXF-2976,"https://issues.apache.org/jira/browse/CXF-2976
",Allow to configure SSL session cache size and TTL on the client,Improvement,CLOSED,Major,Fixed,"2.2.6, 2.2.7",2.3,Transports,"JDK SSL connectivity maintains a cache of SSLSessions that it reuses for subsequent connection. Unfortunately the default TTL in this cache is set to 24h. We have ran into an issue with a specific environment setup on the server side - with a F5 loadbalancer doing SSL offloading, the SSL sessions were valid on the load balancer but were broken beyond that point. The problem turned out the TTL of that cache being too long - in our case tuning it down to 60 seconds resolved the issue. FWIW we have actually encountered this issue with multiple vendors.
The timeout can be configured via SSLSession.getClientSessionContext().setSessionTimeout(int) - the suggestion is to add this parameter to be configured via TLSClientParams. Unfortunately the only way that the SSLSession is now accessed/configured is inside HttpsURLConnectionFactory - and this class is right now tightly coupled to a HttpConduit. There isn't actually a way to set the default TTL - or set it globally in the JVM"
CXF-2688,"https://issues.apache.org/jira/browse/CXF-2688
",Allow deactivation of SSL X509 Certificates validation,New Feature,CLOSED,Major,Fixed,2.2.6,2.2.10,Transports,"CXF client (JAXWS & JAXRS) for HTTPS calls currently only allows to disable hostname verification (<http-conf:tlsClientParameters disableCNCheck=""true"" />) but does not allow to disable X509 certificates checking.
Due to this, it can be painful to invoke services with self-signed certificates on non-production environments (see sample stacktrace below).
Here is a proposal to disable all X509 certificates in CXF (JAXWS & JAXRS) clients :
Add boolean attribute trustAllCertificates to <http-conf:tlsClientParameters ... />,
In the HTTPConduit, if trustAllCertificates=""true"", the HttpsURLConnectionFactory will use an 'accept all certificates' javax.net.ssl.X509TrustManager and an 'accept all' javax.net.ssl.HostnameVerifier.
Note : this proposal adds an attribute trustAllCertificates to the TLSClientParametersType complex type and thus this proposal requires to publish a new 'backward compatible' http://cxf.apache.org/schemas/configuration/security.xsd.
Configuration sample enabling 'trustAllCertificates' to invoke an HTTPS service:
<jaxws:client id=""helloWorldServiceClient""
   serviceClass=""com.example.HelloWorldService""
   address=""https://example.com/services/helloWorldService"">
</jaxws:client>

<http-conf:conduit name=""{http://example.com/}HelloWorldServicePort.http-conduit"">
   <!-- trust all certificates (self signed certificates, etc) -->
   <http-conf:tlsClientParameters trustAllCertificates=""true"" />
   
   <http-conf:authorization>
      <security:UserName>my-user-name</security:UserName>
      <security:Password>my-password</security:Password>
   </http-conf:authorization>
</http-conf:conduit>
CXF client exception's stacktrace with a self-signe certificate:
2010/03/01 22:05:23,682  WARN [http-8080-1] org.apache.cxf.phase.PhaseInterceptorChain - Interceptor for 
{http://example.com/}HelloWorldServiceService#{http://example.com/}sayHi has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: Could not send Message.
 at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:64)
 ...
 at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:124)
 at $Proxy69.sayHi(Unknown Source)
 ...
Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: 
sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
 ...
Caused by: sun.security.validator.ValidatorException: PKIX path building failed: 
sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
 ...
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
 ..."
CXF-2982,"https://issues.apache.org/jira/browse/CXF-2982
",Don't throw the SuspendedInvocationException when call the suspend() method of CXF continuation,Improvement,CLOSED,Major,Fixed,None,2.3,None,"Current CXF Continuation suspend implementation is based on throw SuspendedInvocationException, This implementation has a shortcoming which cannot call the other framework's async API after continuation suspend is called as Jetty7 does.
So I introduce a flag of Message.CONTINUATION_SUSPENDED to break out current interceptor chain as the SuspendedInvocation does, but It will make CXF continuation API more easy to use and it supports the Jetty7 continuation or Servlet3 suspend resume semantics."
CXF-2754,"https://issues.apache.org/jira/browse/CXF-2754
",Extend WS-Security component for higher level containers be able to use UsernameToken to authenticate a user and populate SecurityContext,Improvement,CLOSED,Major,Fixed,"2.2.8, 2.3","2.3, 2.2.11",WS-* Components,"By default, WSS4JInInterceptor relies on CallbackHandlers to provide or validate a password for handling digests and clear-texts respectively.
Also, the default SecurityContext is partially populated and thus can not be used for the authorization decisions.
Higher level containers should be able to delegate to their own subsystems for authenticating a user and populating SecurityContext"
CXF-2804,"https://issues.apache.org/jira/browse/CXF-2804
",Allow ability to reset values in ResponseTimeCounter,Improvement,CLOSED,Major,Fixed,"2.1.9, 2.2.7",2.2.8,JAX-WS Runtime,"Currently the ResponseTimeCounter module is only able to report data for the lifetime of a service. Users may want to periodically reset response time values to compare response time values at different points in time. For instance, how did reponse times compare between the hours of 1-2 AM and 1-2 PM?"
CXF-2793,"https://issues.apache.org/jira/browse/CXF-2793
",Provide capability for JMS client to specify separate ReplyTo queue and listener queue,New Feature,CLOSED,Major,Fixed,"2.1.9, 2.2.7","2.2.8, 2.3",Transports,"A customer using MQSeries would like the ability to specify a queue in the ReplyTo head of an outgoing message that is different from the queue that the CXF JMS client listens to for a response. This solution is for the scenario where the JMS client and JMS server are interacting with different QueueManagers, QM1 and QM2. In this scenario, the client and and server only know about their respective local QueueManager and not the remote QM. In such an instance, if a JMS client sends a message with a reference to a local queue associated with QM1 that it is listening to in the ReplyTo header, the JMS server associated with the remote QM2 will not be able to make use of that information since it only knows about local queues. Therefore the solution is to be able to specify a ReplyTo queue associated with QM2 which the server is aware of and then listen on a queue local to the client."
CXF-2753,"https://issues.apache.org/jira/browse/CXF-2753
",Need a way to preserve parameters wrapper in DocLiteralInInterceptor,Improvement,CLOSED,Major,Fixed,None,"2.2.8, 2.3",Core,"In DocLiteralInInterceptor, the following condition determines whether the wrapper is preserved when unmarshalling the parameters.
                if (msgInfo.getMessageParts().get(0).getTypeClass() != null) {
Currently, the parameters that I will get depending on whether service class (TypeClass) is provided. It is questionable that the condition is suitable for all DataBindings. For example, my endpoint uses SourceDataBinding which does not require to specify service class. So, when service class is provided, I get one parameter that wraps multi parts.
For example,
<GetPerson>
  <personId>foo</personId>
  <ssn>1234</ssn>
</GetPerson>
Otherwise, I get 2 parameters (in the example)
<personId>foo</personId>
<ssn>1234</ssn>
We should get consistent behavior regardless of whether service class is provided by users.
Here is my proposal to add a property to override the built-in condition (as in the attached patch). Free feel to come up with a better fix if you see fit.
    protected boolean shouldWrapParameters(MessageInfo msgInfo, Message message) {
        Object keepParametersWrapperFlag = message.get(KEEP_PARAMETERS_WRAPPER);
        if (keepParametersWrapperFlag == null) {
            return msgInfo.getMessageParts().get(0).getTypeClass() != null;
        } else {
            return Boolean.parseBoolean(keepParametersWrapperFlag.toString());
        }
    }"
CXF-2537,"https://issues.apache.org/jira/browse/CXF-2537
",Proposal : enhancement of HTTP exceptions messages,Improvement,CLOSED,Major,Fixed,2.2.3,2.2.7,Transports,"Troubleshooting of client side HTTP exceptions is often difficult for development, integration and troubleshooting teams.
Here is a proposal of enhancements of the exception messages :
Add the HTTP error code for 404 exceptions in addition to the message returned by the server.
Current message : java.io.IOException: Not Found
Enhanced Message : java.io.IOException: HTTP response '404: Not Found'
Add intermediate IOException with the invoked URL in the stack of causes of the ""WebServiceException: Could not send Message."" exception.
Current HTTP 404 exception message
==============================
javax.xml.ws.WebServiceException: Could not send Message.
at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:135)
at $Proxy67.sayHi(Unknown Source)
...
at java.lang.Thread.run(Thread.java:637)
Caused by: java.io.IOException: Not Found
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2115)
... 71 more
Enhanced HTTP 404 exception message
===============================
javax.xml.ws.WebServiceException: Could not send Message.
at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:135)
at $Proxy67.sayHi(Unknown Source)
...
at java.lang.Thread.run(Thread.java:637)
Caused by: java.io.IOException: IOException invoking http://localhost:8080/this-page-does-not-exist.jsp
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1984)
... 62 more
Caused by: java.io.IOException: HTTP response '404: Not Found'
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:2115)
... 71 more"
CXF-2597,"https://issues.apache.org/jira/browse/CXF-2597
",Add response code to LoggingFeature for REST/JAX-RS specific response codes,Improvement,CLOSED,Major,Fixed,"2.2.5, 2.3","2.2.6, 2.3",Core,"As REST services use custom (http) response codes, it is very valuable to display the response code in the logs outputted by the LoggingFeature (ie LoggingInInterceptor & LoggingOutInterceptor).
I have a pending question : would it be interesting to add the response message (e.g. ""Not Found"") in addition to the response code ?
It would require to add it to the Message attributes in the HttpConduit and to create the associated constant on o.a.c.message.Message.
Current log message without the response code
2009/12/30 11:08:59,563  INFO [http-8080-3] org.apache.cxf.interceptor.LoggingInInterceptor - Outbound Message
---------------------------
ID: 26
Content-Type: text/html
Headers: {Date=[Wed, 30 Dec 2009 10:08:59 GMT]}
Payload: Hi cyrille
--------------------------------------
Enhanced log message with the response code
2009/12/30 11:08:59,563  INFO [http-8080-3] org.apache.cxf.interceptor.LoggingInInterceptor - Outbound Message
---------------------------
ID: 26
Response-Code: 200
Content-Type: text/html
Headers: {Date=[Wed, 30 Dec 2009 10:08:59 GMT]}
Payload: Hi cyrille
--------------------------------------"
CXF-2596,"https://issues.apache.org/jira/browse/CXF-2596
",Default logging in interceptor chain may pollute the log with stacktrace from application exceptions that are a part of the normal flow (should not be logged).,New Feature,CLOSED,Major,Fixed,None,"2.1.9, 2.2.6",Configuration,"A user of CXF may need custom handling for runtime errors produced by the application, not catchable within the application, e.g. exceptions from interceptors to the actual service.
E.g. applications may produce Exceptions that are a normal part of the flow in the application, in that case, it pollutes the log file to have it logged as stacktrace.
background: http://www.mail-archive.com/users@cxf.apache.org/msg10976.html
Configure via setting property to Bus or Service:
<property name=""org.apache.cxf.logging.FaultLogger"">
<bean class=""com.foo.MyFaultLogger""/>
</property>
MyFaultLogger must implement org.apache.cxf.logging.FaultLogger
Programatically:
Bus bean = (Bus) applicationContext.getBean(""cxf"");
bean.setProperty(""org.apache.cxf.logging.FaultLogger"", myLogger);
By endpoint:
<jaxws:endpoint id=""mySericeWS"" implementor=""#myServiceBean"" address=""/myServiceWS"">
<jaxws:properties>
<entry key=""org.apache.cxf.logging.FaultLogger"">
<bean class=""com.foo.MyFaultLogger""/>
</entry>
</jaxws:properties>
</jaxws:endpoint>"
CXF-2538,"https://issues.apache.org/jira/browse/CXF-2538
",Proposal : enhancement of PhaseInterceptorChain warning message,Improvement,CLOSED,Major,Fixed,2.3,"2.1.9, 2.2.6",Core,"PhaseInterceptorChain outputs a warning message in the logs when an unchecked application exception or a RuntimeException is throwned.
Unfortunately, this message doesn't tell which operation on which service is involved. If the stack traces are not emitted in the logs, it can be impossible to associate the error message with a web service.
Here is a proposal of enhancement of the warning message : add service name and operation name to the message.
Current warning message for a RuntimeException
======================================
Application has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: the runtime exception
at org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:155)
...
at java.lang.Thread.run(Thread.java:637)
Caused by: java.lang.RuntimeException: the runtime exception
... 72 more
Enhanced warning message for a RuntimeException
========================================
Application
{http://www.example.com/}
helloWorldService#
{http://www.example.com/}
sayHi has thrown exception, unwinding now
org.apache.cxf.interceptor.Fault: the runtime exception
at org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:155)
...
at java.lang.Thread.run(Thread.java:637)
Caused by: java.lang.RuntimeException: the runtime exception
... 72 more"
CXF-1459,"https://issues.apache.org/jira/browse/CXF-1459
",ClassCastException occurs on HTTPS web service call made by app deployed to BEA WebLogic 9.2,Improvement,CLOSED,Major,Fixed,2.0.4,"2.1.8, 2.2.5",Integration,"HTTPS web service call fails from webapp deployed in ear file to BEA 9.2 with following error:
java.lang.ClassCastException: weblogic.net.http.SOAPHttpsURLConnection
at org.apache.cxf.transport.https.HttpsURLConnectionFactory.createConnection(HttpsURLConnectionFactory.java:120)
My weblogic-application.xml contains:
<prefer-application-packages>
<package-name>javax.jws.*</package-name>
</prefer-application-packages>
The secure web service call works in Tomcat 5.5."
CXF-2410,"https://issues.apache.org/jira/browse/CXF-2410
",Boolean getter plugin for xjc,Improvement,CLOSED,Major,Fixed,2.3,2.2.4,Tooling,"Please find a patch that contains an XJC plugin to generate Boolean getters instead of accessors called isXXX().
This allow the generated beans to be used by various mapping tools, including dozer."
CXF-2375,"https://issues.apache.org/jira/browse/CXF-2375
","CXF treats synthetic methods as web methods. In the strict sense, this is not against the JAX-WS spec, but it causes issues with AspectJ instrumented classes.",Improvement,CLOSED,Major,Fixed,None,"2.1.7, 2.2.4",JAX-WS Runtime,"AOP implementations and other frameworks that use bytecode modification may generate synthetic methods on the SEI that cannot be controlled or customized by the user (for example, AspecJ generates getters/setters for generated members, and these methods cannot be removed). These methods will show up as operations on the SEI, which is usually not the desired behaviour. We locally patched CXF to avoid this, please see the attached patch that worked for us."
CXF-2372,"https://issues.apache.org/jira/browse/CXF-2372
",Allow JMS XAResource to participate in J2EE transaction,Improvement,CLOSED,Major,Fixed,2.2.2,"2.1.7, 2.2.4",Integration,"The submitted patch provides the capability for a JMS XAResource to participate in the J2EE transaction when used in the context of the JCA adapater. Using transaction APIs defined by the JCA adapater spec, the JMS transport will register an XAResource associated with a JMSSession with the JCA connector, which will in turn enroll the XAResource in a transaction with the J2EE transaction manager. In order to facilitate the registering of the XAResoure, the JCA adapter must pass information via the Bus to the JMS transport. The JMS transport is then responsible for creating a MessageEndpoint and initiating a transaction by calling MessageEndpoint.beforeDelivery() and then closing the transaction by calling MessageEndpoint.afterDelivery()
See section 12.5.6 of the JCA specification for more details regarding these semantics."
CXF-2342,"https://issues.apache.org/jira/browse/CXF-2342
",Performance issue in StaxInInterceptor,Improvement,CLOSED,Major,Fixed,2.2.2,"2.1.6, 2.2.3",None,"From this mailing list thread Performance issue in StaxInInterceptor:
In cxf-2.2.2, StaxInInterceptor#handleMessage() synchronizes on the XMLInputFactory before calling XMLInputFactory#createXMLStreamReader(InputStream, String).
Profiling our application reveals this to be a pain point in high volume situations"
CXF-2366,"https://issues.apache.org/jira/browse/CXF-2366
",Allow for 1-way over JMS requests to set replyTo destination in JMS message when explicitly enabled,Improvement,CLOSED,Major,Fixed,"2.2, 2.1.5","2.0.12, 2.1.6, 2.2.3",Transports,"Some of the users of cxf requested that it should be possible to have one-way calls over JMS set JMS Message replyTo field with WSDL or invocation context provided destination.
If a user has a named replyToDestination set in WSDL or spring Config for a given WSDL port and then using a proxy associated with that port client makes a one way call, the JMS Message's replyTo filed will be set with the replyToDestination from Spring config or WSDL in that order of priority respectfully.
This will only be the case once the user specifically enables this behaviour by setting jms:clientConfig@enforseSpec = false. By default CXF applications will function as before this change.
The user can still specifically disable this behaviour on per request basis even when by default it is desirable to set and propagate replyTo for one-way calls by putting a property in the invocation conext JMSConstants.JMS_SET_REPLY_TO = false;"
CXF-2343,"https://issues.apache.org/jira/browse/CXF-2343
",Improve Message Performance Under High Volume with Low Latency Consumers,Improvement,CLOSED,Major,Fixed,None,"2.0.12, 2.1.6, 2.2.3",Transports,"IT organizations are on constant pressures in improving enterprise messaging systems to deliver and process high volume message traffic. For example financial IT organizations are continually automate, integrate and optimized the transaction life cycle. The underlying messaging system must be able to support extremely low latency and very high message throughput with effective congestion control.
Message performance testing was performed to evaluate the CXF bogus message selector implementation as the best approach in improving message throttling in a long consumer service process with a very high JMS message traffic volume.
The intent of the bogus message selector implementation in CXF is to alleviate message throttling by delegating incoming messages to under performed consumer services. Testing was performed on the CXF bogus message selector implementation with a commercial JMS message broker. The test scenario simulated an ingest driver that produced high volume message traffic with a long running CXF consumer service which forced a backlog of messages in the request queue. The test results illustrated a dramatic degradation in the commercial JMS message broker processing performance from 12,000 messages per second to 100 messages per second (99.17% degradation of performance). Also it was observed the JMS receiveTimeout parameter was set to the default value of 1 which contributed to the degradation of performance. CXF was modified to expose the JMS receiveTimeout parameter as a CXF feature. The test scenario was rerun with a receiveTimeout set to 30 seconds which improved message processing from 100 messages per second to 4,918 messages per second.
To further improve ingest message processing performance; the bogus message selector implementation was replaced with a stop and start Spring JMS Listener Container (DefaultMessageListenerContainer) implementation via the CXF JMSContinuation class. The JMSContintuation class starts and stops the Spring Container based on the maximum suspended continuations parameter. The moment a stop is issued from the JMSContinuation class to the Container, no new messages are allowed to be accepted by the Container until the Container completes processing the suspended messages. To avoid message loss while the Container is in the stop state, CXF features must support the JMS acceptMessagesWhileStopping parameter. This parameter must be set to true to notify the Container not to reject messages while in the stop state. The test scenario was rerun using the CXF start/stop Container implementation with a commercial JMS message broker. The test results demonstrated that message processing performance improved from 4,918 messages per second to 8,333 messages per second.
Based on the test results, I concluded that the start/stop Container implementation is the recommended solution for improving message performance in high JMS message traffic with low latency consumers. The start/stop Container implementation improved message processing performance over the bogus message selector implementation by 28%.
See attachment for patch."
CXF-2316,"https://issues.apache.org/jira/browse/CXF-2316
",Allow JMS replyTo destination value be set on the outgoing messsage for a one-way call,Improvement,CLOSED,Major,Fixed,2.1.5,"2.0.12, 2.1.6, 2.2.3",Transports,There are use cases where the JAXWS user might want to have 2 independent JAXWS proxies doing one ways and correlating them in the application code. For this to work JMS transport should allow the user to set a replyTo destination on a call with one way signature by way of request invocation context
CXF-2307,"https://issues.apache.org/jira/browse/CXF-2307
",PhaseInterceptorChain should log errors above INFO,Improvement,CLOSED,Major,Fixed,2.2.2,"2.1.6, 2.2.3",Core,"Currently, if there is an uncaught exception either in an Interceptor or the application, the PhaseInterceptorChain logs this exception at the INFO level.
It would be more useful to log events at the WARNING or SEVERE level."
CXF-2264,"https://issues.apache.org/jira/browse/CXF-2264
",WSDL extension for WSDL usage,Sub-task,CLOSED,Major,Fixed,None,2.2.3,None,Make the WSDL definition conformance with the SOAP/JMS specification.
CXF-2186,"https://issues.apache.org/jira/browse/CXF-2186
",Validate WSS headers using new checkReceiverResultsAnyOrder method in WSHandler.,Improvement,CLOSED,Major,Fixed,2.1.3,"2.0.12, 2.1.6, 2.2.3",WS-* Components,"Change the method used to validate WSS headers such that the order of the headers is unimportant. The current method used to validate WSS headers requires the headers be sent in a specific order; also the current method is counter-intuitive as it reverses the headers before checking them.
See https://issues.apache.org/jira/browse/WSS-147 for more info."
CXF-2002,"https://issues.apache.org/jira/browse/CXF-2002
",Server async jms transport needs dynamic mechanism to throttle message consumption,Improvement,CLOSED,Major,Fixed,"2.0.9, 2.1.3, 2.0.10","2.1.6, 2.2.3",Transports,"Currently, the server-side async jms transport has no mechanism to throttle consumption of incoming messages. This becomes problematic in scenarios where a large backlog of messages exists on the input queue. In this case, it is likely that the cxf server will overload its internal work item queues resulting in problems. A dynamic throttling mechanism on the async jms server is required to avoid this problem."
CXF-2181,"https://issues.apache.org/jira/browse/CXF-2181
",Dynamic Dispatch classes should cache MessageFactory instances,Improvement,CLOSED,Major,Fixed,2.2,"2.0.11, 2.1.5, 2.2.1",JAX-WS Runtime,"From this mailing list thread: http://www.nabble.com/Caching-MessageFactory-instances-tt23148305.html
MessageFactory#newInstance is an expensive operation. It is currently called twice in a normal request/response cycle when using dynamic dispatch."
CXF-2153,"https://issues.apache.org/jira/browse/CXF-2153
",Support nested parameter injection into beans,Improvement,CLOSED,Major,Fixed,2.2.1,2.2.1,JAX-RS,"The current CXF extension for handling parameter injection into beans does not handle the case where you want to set values on beans that are within other beans. Take the following simple example:
class Name
{
String first;
String last;
}
class Address
{
String city;
String state;
}
class Person
{
Name legalName;
Address homeAddr;
String race;
String sex;
Date birthDate;
}
class MyService
{
@GET
@Path(""/getPerson"")
Person getPerson(@QueryParam("""") Person person);
}
I would like to be able to pass something like:
/getPerson?sex=M&legalName.first=John&legalName.last=Doe&homeAddr.city=Reno&homeAddr.state=NV
I will attach a patch that contains modifications to the InjectionUtils class to support this behavior. In addition, the patch contains some unit test modifications the ensure more complex recursions of nested beans are taken care of. Note that no JAXRS* systests were harmed in the making of this patch, they all passed successfully.
The only notation change to the parameter format is the addition of the '.' to the name, which is the trigger that tells the code to assume a nested bean. Since this change is isolated to the injection processing logic, the capability works for Query, Form, Matrix, and Path parameter types. With that said, my functional testing has focused on query parameters, although I did change the unit tests for all for types to exercise the new capability.
When dealing with nested beans and lists things get a bit more complicated. Since the code doesn't introduce an indexing notation, there are a few rules that the consumer needs to be aware of. First, you can't inject list items into nested beans that are contained within a list themselves. Take the following bean class as an example:
class RecursiveBean
{
String s;
Integer i;
List<String> sList;
List<RecursiveBean> bList;
}
The following would be fine:
/getBean?s=top&sList=toplist1&sList=toplist2&bList.s=nested&bList.s=nested
You would end up with 1 top level bean with s='top' containing a sList with 2 items, and a bList with 2 nested beans both with s='nested'. The following case however won't work:
/getBean?s=top&sList=toplist1&sList=toplist2&bList.s=nested&bList.s=nested&bList.sList=nestedList1&bList.sList=nestedList2
The main reason it won't work is that you don't know where to inject 'nestedList1' and 'nestedList2', do they both go to the first, or should they be split up between the 2 nested beans. As such, if a nested list of this type is encountered, the values are simply not injected at all.
The second nuance to be aware of is that nested beans contained within a list must have their parameters set in the correct order, and not sparsely populated. Using the class defined in the previous example consider the following query:
/getBean?bList.s=nested1&bList.i=1&bList.s=nested2&bList.i=2
This is a valid query that creates 2 nested beans within bList, the first with s=nested1, i=1, and the second with s=nested2, i=2. Now imagine you wanted 2 nested beans with 'i' set the same as above, but the first not having 's' set at all. If you tried:
/getBean?bList.i=1&bList.s=nested2&bList.i=2
You would end up with the first bean having s=nested2 instead of being blank
I don't think the limitations that I mention represent common everyday use cases, however its worth pointing them out so folks don't hit them unexpectedly.
I hope you will consider folding this patch into the product with the next 2.2.x release, I think it will prove to be a powerful addition to the existing CXF extension."
CXF-2141,"https://issues.apache.org/jira/browse/CXF-2141
",Expose faults count in ResponseTimeCounter in addition to existing invocations count,Improvement,CLOSED,Major,Fixed,"2.1.4, 2.2","2.0.11, 2.1.5, 2.2.1",Core,"Expose faults count in ResponseTimeCounter in addition to existing invocations count. Faults can be split by FaultMode (RUNTIME_FAULT, LOGICAL_RUNTIME_FAULT, CHECKED_APPLICATION_FAULT, UNCHECKED_APPLICATION_FAULT) to improve accuracy.
Monitoring evolution of the faults with the granularity of the type of fault (runtime fault, checked application fault, unchecked application fault) is key to our operations team. If the application's SOAP runtime does not expose such indicators, ours operations team looks at log files parsing or ""SOA Appliances"" like Data Power."
CXF-2140,"https://issues.apache.org/jira/browse/CXF-2140
",Allow injection of an existing MBeanServer into the InstrumentationManagerImpl,Improvement,CLOSED,Major,Fixed,"2.1.4, 2.2","2.0.11, 2.1.5, 2.2.1",Core,Allow to inject an existing MBeanServer into the InstrumentationManagerImpl in addition to the existing MBeanServer lookup mechanism.
CXF-2042,"https://issues.apache.org/jira/browse/CXF-2042
",Expose totalHandlingTime attribute in ResponseTimeCounterMBean to offer trendsup monitoring,Improvement,CLOSED,Major,Fixed,2.1.4,"2.0.11, 2.1.5",Core,"Expose the currently internal attribute ResponseTimeCounter#totalHandlingTime in the ResponseTimeCounterMBean to offer trendsup monitoring.
Thanks to this, monitoring tools like Hyperic HQ will be able to offer metrics per time unit like ""average response time for last minute/hour"" ( via a division of totalHandlingTime by InvocationsCount)
Resources on Hyperic HQ's trendsup metrics monitoring : http://support.hyperic.com/display/DOC/Metric+Parameters"
CXF-1897,"https://issues.apache.org/jira/browse/CXF-1897
",Prepare the RFC 126 ListenerHook implementation for contribution to Felix,Improvement,CLOSED,Major,Fixed,2.2,2.2,OSGi,"To this extent, the test coverage needs to be increased and CXF-1896 needs to be done."
CXF-1866,"https://issues.apache.org/jira/browse/CXF-1866
",Produce a single-bundle distribution of the DOSGi code,Improvement,CLOSED,Major,Fixed,2.2,2.2,None,"Besides being a convenience for developers, this is also a requirement for the OSGi TCK."
CXF-1854,"https://issues.apache.org/jira/browse/CXF-1854
",Create a multi-bundle distribution of DOSGi - DSW,Improvement,CLOSED,Major,Fixed,2.2,2.2,OSGi,The attached patch contains the beginning of a distribution. The distribution is created as part of the maven build in the distribution/multi-bundle/target directory
CXF-1851,"https://issues.apache.org/jira/browse/CXF-1851
",The location and cardinality of the remote-services.xml files,Improvement,CLOSED,Major,Fixed,2.2,2.2,OSGi,"remote-services.xml file should allowed to have any name (as long as it ends with .xml) and they should by default be picked up from OSGI-INF/remote-services.
It should be possible to override the default with a bundle header."
CXF-1811,"https://issues.apache.org/jira/browse/CXF-1811
",Need to split up osgi.remote.publish.intent and osg.intents,Improvement,CLOSED,Major,Fixed,2.2,2.2,OSGi,"The intents property needs to be split up into the following:
On the client side proxy we just need to have osgi.intent
On the server side we have osgi.remote.publish.intent and osgi.intents"
CXF-1836,"https://issues.apache.org/jira/browse/CXF-1836
",Need to provide a proper implementation for the DistributionProvider interface,Improvement,CLOSED,Major,Fixed,2.2,2.2,OSGi,"This interface is outlined in the RFC 119 spec.
The current Dosgi implementation provides empty values for all the APIs in there - this needs to be fixed."
CXF-1799,"https://issues.apache.org/jira/browse/CXF-1799
",DOSGi configuration properties need to follow prescribed naming pattern,Improvement,CLOSED,Major,Fixed,2.2,2.2,OSGi,"The configuration properties for DOSGi need to follow the following pattern:
org.osgi.remote.configuration.type=xyz
org.osgi.remote.configuration.xyz.prop1=value1
org.osgi.remote.configuration.xyz.prop2=value2"
CXF-1416,"https://issues.apache.org/jira/browse/CXF-1416
",Enhancement to JAX-RS spring configuration.,Sub-task,CLOSED,Major,Fixed,2.1,2.1,JAX-RS,"JAX-RS allows multiple root resources, for example, using JAXRSServerFactoryBean.setResourceClasses(Class... classes) . But the corresponding Spring configuration only allows setting one root resource class, eg:
<jaxrs:server id=""bookservice"" address=""/"">
<jaxrs:serviceBeans>
<ref bean=""bookstore""/>
</jaxrs:serviceBeans>
</jaxrs:server>
<bean id=""bookstore"" scope=""prototype"" class=""org.apache.cxf.systest.jaxrs.BookStore"">
</bean>"
CXF-2023,"https://issues.apache.org/jira/browse/CXF-2023
",JAXRSServerFactoryBean to support setInvoker() method,Improvement,CLOSED,Major,Fixed,None,2.1.4,None,JAXRSServerFactoryBean to support setInvoker() method so that custom invoker can be set.
CXF-1922,"https://issues.apache.org/jira/browse/CXF-1922
",Improve DynamicClientFactory: make compileJavaSrc() non static and protected,Improvement,CLOSED,Major,Fixed,None,"2.0.10, 2.1.4",JAXB Databinding,"It would be great to be able to override the compileJavaSrc()-method in order to define a custom compiler, such as the eclipse compiler. This would remove the dependency of the jdk and the DynamcClientFactory could be used on any client-machine.
In order to do so it would be necessary to change the mehtod signature: remove the static-property (no need for) and make set visibilty to protected. A solution is attached in the patch.
Regards."
CXF-1964,"https://issues.apache.org/jira/browse/CXF-1964
",Add ability to inject WSS4J Processor objects into the WSS4JInInterceptor,Improvement,CLOSED,Major,Fixed,"2.0.9, 2.1.3","2.0.10, 2.1.4",WS-* Components,"I updated WSS4J recently to support passing Processor objects through to WSSConfig, whereas before only the class name was passed through, and WSSConfig took care of the classloading. Attached is a patch that updates CXF so that it's possible to supply Processor objects to the WSS4JInInterceptor, as well as a test-case for this. This patch requires the latest (as of today) WSS4J 1.5.5-SNAPSHOT, so it should be applied to trunk only."
CXF-1825,"https://issues.apache.org/jira/browse/CXF-1825
",Allow request/response contexts access when using JCA outbound connector,Improvement,CLOSED,Major,Fixed,None,"2.0.9, 2.1.3",Integration,"Currently, CXF inbound connector dynamic proxy does not expose javax.xml.ws.BindingProvider interface so client code can't do the following to access request/response contexts.
Greeter greeter = null;
greeter = (Greeter)getServiceConnection(); //retrieve proxy (here using JCA connector)
Map<String, Object> requestContext = ((BindingProvider)greeter).getRequestContext();"
CXF-1806,"https://issues.apache.org/jira/browse/CXF-1806
",Use Spring JMSTemplate in JMSConduit instead of direct JMS,Improvement,CLOSED,Major,Fixed,"2.0.8, 2.1.2","2.0.9, 2.1.3",Transports,"Using the Spring JMSTemplate has many advantages compared to directly using the JMS API. For example cxf services can participate in Transactions.
The goal for this issue is to replace JMS API in JMSConduit with JMSTemplate calls. Additionally the JMSConduit should be made more dependency injection friendly. It should not retrieve configuration from the Spring config."
CXF-1801,"https://issues.apache.org/jira/browse/CXF-1801
",JCA inbound connector does not support WebSphere 6.1,New Feature,CLOSED,Major,Fixed,None,"2.0.9, 2.1.3",Integration,The current JCA inbound connector relies on service endpoint interface classes being available to its context classloader which is not necessary that case. CXF should consider moving away from the proprietary activation method with ejb_servant.properties to a method that leverages the JCA 1.5 spec using with Message Driven Bean.
CXF-1773,"https://issues.apache.org/jira/browse/CXF-1773
",Refactor JMS transport for readability and simplicity (patch included),Improvement,CLOSED,Major,Fixed,2.1.2,"2.0.9, 2.1.3",Transports,"In preparation for the planned improvements for JMS config like discussed on the mailing list the JMS transport should be refactored for readability.
I have worked myself into the JMS code and at the start had some problems understanding what happened because of some structures in the code.
The first thing was JMSTransportBase. Most of the class are methods that do not access any attributes. These methods could be made static and moved to the JMSUtil class. The method isDestinationStyleQueue is the only method that needs an attribute. I think it should have this attribute as a parameter and also be made static and moved to JMSUtils.
The rest of JMSTransportBase are only holders for attributes that are then accessed from JMSConduit and JMSDestination directly (even without getters). So I think the whole class could be dumped and to attributes should be moved to the subclasses. The readability of JMSConduit and JMSDestination is much better afterwards as the class can be understood in itself.
The next thing is JMSTransport which is used to feed JMSProviderHub. I think it should be cut down to the callback method connected and be renamed to JMSOnConnectCallBack. The other two methods can be added to the parameters of JMSProviderHub. The advantage is that it is much clearer what JMSProviderHub.connect needs and that connected is a callback that gets called at the end of connect.
I have already done the refactorings and will attach a patch with them. Checkstyle, PMD and surefire show no problems."
CXF-1783,"https://issues.apache.org/jira/browse/CXF-1783
",Refactor JMS transport second step (patch included),Improvement,CLOSED,Major,Fixed,2.1.2,"2.0.9, 2.1.3",Transports,"I have refactored several parts of the JMS Transport to make it easier to understand and to help preparing for a move to the spring jms classes.
The refactoring should not change the functionality.
SessionFactory and PooledSession:
The sessionfactory had two different caches and a lot of redundant code. I have now only one cache left that starts send only. A consumer is then added when the first client needs it. The lines of code of SessionFactory are reduced from 450 to 300.
Functionality of JMSProviderHub is splitted between SessionFactory and JMSUtils
The connect method now does not need a callback anymore. So the interface JMSOnConnectCallback is deleted.
JMSOutputStream:
Extracted the class from JMSDestination and JMSConduit. They both use the same JMSOutputStream now. A new interface JMSExchangeSender calls back into JMSConduit or JMSDestination.
JMSListenerThread and JMSExecutor:
Extracted JMSListenerThread from JMSDestination. So the complete JMS listen functionality is factored out. This means it will be easier to port to Spring MessageListenerContainer. JMSListener does not use the Session pool anymore as it does not need pooling anyway.
JMSConduit:
Made the program flow easier again and documented where the flow of operation is not easy to understand. 420 lines => 290 lines
JMSDestination:
Same as with JMSConduit. 550 lines => 420 lines
Tests:
All tests work
Cut most of PooledSessionTest as it does not apply anymore. Have not written a new test yet. But I think it is mostly implicitly tested by other tests
AbstractJMSTests replaced setInMessage with setOutMessage. I think this was wrong before. Please review
JMSDestinationTest added a second message send as I had an issue with a closed session after first send because of an error in the SessionFactory. This is to avoid regression"
CXF-1671,"https://issues.apache.org/jira/browse/CXF-1671
",Add a setter to JSONProvider to set the XML Namespace to Jettison prefix map,Improvement,CLOSED,Major,Fixed,"2.1, 2.0.6, 2.1.1, 2.0.7",2.1.2,JAX-RS,"There is currently no way to configure a REST service to pass an XML namespace to jettison prefix mapping using the default JSONProvider.
Move nstojns to a field instead of creating an empty map on each request
Add a property setter to set nstojns
This will allow you to do this in Spring:
<util:map id=""jsonNamespaceMap"" map-class=""java.util.Hashtable"">
<entry key=""http://www.example.com/shakedown"" value=""e""/>
<entry key=""http://cxf.apache.org/bindings/xformat"" value=""cxf""/>
</util:map>
<bean id=""jsonProvider"" class=""org.apache.cxf.jaxrs.provider.JSONProvider"">
<property name=""namespaceMap"" ref=""jsonNamespaceMap""/>
</bean>
<jaxrs:server id=""jsonRestEndpoint"" address=""/system"">
<jaxrs:serviceBeans>
<ref bean=""restImpl""/>
</jaxrs:serviceBeans>
<jaxrs:entityProviders>
<ref bean=""jsonProvider""/>
</jaxrs:entityProviders>
</jaxrs:server>"
CXF-1705,"https://issues.apache.org/jira/browse/CXF-1705
",Servlet 2.3 compliance,Improvement,CLOSED,Major,Fixed,2.1.1,"2.0.8, 2.1.2",Transports,"Currently there is one call to the servlet 2.4 API in ServletController. This can be made 2.3 compatible by specifying the encoding in the setContentType(...) call. Attached is a patch to fix this, and enable cxf to run in any servlet 2.3 container."
CXF-1627,"https://issues.apache.org/jira/browse/CXF-1627
",Upgrade to WSS4J 1.5.4,Improvement,CLOSED,Major,Fixed,"2.1, 2.0.6","2.1.1, 2.0.7",WS-* Components,"Update CXF to use WSS4J 1.5.4 (pending release).
The Apache WSS4J team is in the process of releasing WSS4J 1.5.4.
This is a request to update CXF 2.0.7 and 2.1.1 (or subsequent versions, if this ticket is too late) to use WSS4J 1.5.4.
A patch will be submitted shortly that contains the fixes necessary for this upgrade.
Thanks!"
CXF-1012,"https://issues.apache.org/jira/browse/CXF-1012
",Exception handling,Sub-task,CLOSED,Major,Fixed,2.1,2.1,JAX-RS,"Section 2.4.3
An implementation MUST catch WebApplicationException and map it to a response. If the response
property of the exception is not null then it MUST be used to create the response. If the response
property of the exception is null an implementation MUST generate a server error response.
An implementation MUST allow other runtime exceptions to propagate to the underlying container. This
allows existing container facilities (e.g. a Servlet filter) to be used to handle the error if desired.
Editors Note 2.2 What to do about checked exceptions ? If we allow them on resource methods then do
we need some standard runtime exception that can be used to wrap the checked exception so it can be
propagated to the container in a standard way ?"
CXF-872,"https://issues.apache.org/jira/browse/CXF-872
",WS-Policy: Upgrade to www.w3.org/ns/ws-policy namespace,New Feature,CLOSED,Major,Fixed,None,2.0.3,WS-* Components,"Dan's mail from 23-04-2007 to cxf-dev@incubator.apache.org
It seems the http://www.w3.org/2006/07/ws-policy/ policy namespace is
deprecated and we should use http://www.w3.org/ns/ws-policy/ now instead.
This upgrade can now take place - aside from changing the default value in the PolicyConstants class, it is largely a matter of either updating test data (wsdls, cfg files) or else making these tests use the older version of the namespace (by configuring the PolicyConstants). For samples should be changed to use the new namespace."
CXF-1455,"https://issues.apache.org/jira/browse/CXF-1455
",Create Provider to support application/x-www-form-urlencoded content types,Sub-task,CLOSED,Major,Fixed,2.1,2.1,JAX-RS,"Create an Entity Provider with a consume MIME type of ""application/x-www-form-urlencoded"" that supports MultivaluedMap<String,String>
See section 3.1.2"
CXF-1425,"https://issues.apache.org/jira/browse/CXF-1425
",Enhancement to JAX-RS spring configuration for registering providers,Sub-task,CLOSED,Major,Fixed,2.1,2.1,JAX-RS,"Enhancement to allow a list of custom providers be specified for a spring configured JAX-RS server. Syntax as below:
<jaxrs:server id=""bookservice""
address=""/"">
<jaxrs:serviceBeans>
<ref bean=""bookstore""/>
</jaxrs:serviceBeans>
<jaxrs:entityProviders>
<bean class=""org.apache.cxf.jaxrs.provider.JAXBElementProvider""/>
<bean class=""org.apache.cxf.jaxrs.provider.StringProvider""/>
<bean class=""org.apache.cxf.jaxrs.provider.BadgerFishProvider""/>
</jaxrs:entityProviders>
</jaxrs:server>
<bean id=""bookstore"" scope=""prototype"" class=""org.apache.cxf.systest.jaxrs.BookStore"">
</bean>
This list will overwrite the default Entity Provider list and will be ordered as usual."
CXF-1381,"https://issues.apache.org/jira/browse/CXF-1381
",Support for XFire and JaxB annotations in Aegis,Improvement,CLOSED,Major,Fixed,None,2.1,Aegis Databinding,Aegis should be able to read the legacy XFire annotations and the equivalent JaxB bindings.
CXF-1284,"https://issues.apache.org/jira/browse/CXF-1284
",fix failed testcase on jdk1.6,Sub-task,CLOSED,Major,Fixed,None,2.1,None,"run test on jdk1.6.0_10ea
some test failed:
common/common
==============
W3CDOMSteamReader:testReader
tools
wsdl/test
=======
Failed tests:
testNonUniqueBody(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
testCodeGen(org.apache.cxf.tools.wsdlto.jaxws.JAXWSContainerTest)
testSuppressCodeGen(org.apache.cxf.tools.wsdlto.jaxws.JAXWSContainerTest)
Tests in error:
testWsdlNoService(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
testNoServiceImport(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
testNoServiceNOPortType(org.apache.cxf.tools.wsdlto.jaxws.CodeGenBugTest)
Tests run: 106, Failures: 3, Errors: 3, Skipped: 0
javato
====
Failed tests:
testDocLitWrappedWithWrapperClass(org.apache.cxf.tools.java2wsdl.processor.internal.jaxws.JaxwsServiceBuilderTest)
testDocWrappedWithLocalName(org.apache.cxf.tools.java2wsdl.processor.internaljaxws.JaxwsServiceBuilderTest)
testHolder(org.apache.cxf.tools.java2wsdl.processor.internal.jaxws.JaxwsServiceBuilderTest)
testSoapHeader(org.apache.cxf.tools.java2wsdl.processor.internal.jaxws.JaxwsServiceBuilderTest)
testRpcLitNoSEI(org.apache.cxf.tools.java2wsdl.processor.internal.jaxws.JaxwsServiceBuilderTest)
testAegisBasic(org.apache.cxf.tools.java2ws.AegisTest)
testGeneratedWithElementryClass(org.apache.cxf.tools.java2wsdl.processor.internal.jaxws.JaxwsServiceBuilderNoAnnoTest)
testGeneratedWithDocWrappedClass(org.apache.cxf.tools.java2wsdl.processor.internal.jaxws.JaxwsServiceBuilderNoAnnoTest)
testGeneratedWithRPCClass(org.apache.cxf.tools.java2wsdl.processor.internal.jaxws.JaxwsServiceBuilderNoAnnoTest)
testGreeter(org.apache.cxf.tools.java2wsdl.processor.internal.jaxws.JaxwsServiceBuilderRPCTest)
10 failed
rt
frontend/jaxws
===========
jaxws.ServiceImplTest:testNonSpecificGetPort
javascript
========
javascript.DocLitBareClientTest:callCompliantNoArgs
systests
=======
jaxws.ClientServerTest:GetPortOneParam
BasicConnect2
ProviderXMLClientServerTest:testDomSourcePAYLOAD
SpringServletTest:testGetWSDL
servlet.ExternalServicesServletTest:testGetServiceList
CXFServletTest
Failed tests:
testGetWSDL(org.apache.cxf.systest.servlet.CXFServletTest)
testGetServiceList(org.apache.cxf.systest.servlet.CXFServletTest)
testGetWSDLWithXMLBinding(org.apache.cxf.systest.servlet.CXFServletTest)
provider.ProviderRPCClientServerTest:testSWA"
CXF-1015,"https://issues.apache.org/jira/browse/CXF-1015
",Context injection - UriInfo and HttpHeaders,Sub-task,CLOSED,Major,Fixed,2.1,2.1,JAX-RS,"Instance of UriInfo and HttpHeaders can be injected into a class filed or method parameters.
See section 4.1 and 4.2.
Make sure the injection scope is correct. Section 4.3"
CXF-363,"https://issues.apache.org/jira/browse/CXF-363
",Updates to the SchemaInfo model,New Feature,CLOSED,Major,Fixed,2.0-RC,2,None,"I am working on the corba binding based on cxf & we are using stax to read & write objects.
Since we have to write out the stax events, it would be good if we could get some information from the SchemaInfo object about the elementFormDefault & attributeFormDefault attributes.
Also, missing are the schemas that are imported inside the schema element. How do get these schemas from the service model? Should we create SchemaInfo's for the imported schemas? It would be helpful if we do it when we are parsing the wsdl, otherwise it would be messy to get the DOM element from the schema info & look for the imports...
I have attached a patch that fixes both the issues. Can someone provide feedback on this?
Balaji"
CXF-1009,"https://issues.apache.org/jira/browse/CXF-1009
",Support @QueryParam,Sub-task,CLOSED,Major,Fixed,2.1,2.1,JAX-RS,See section 2.4.1
CXF-1199,"https://issues.apache.org/jira/browse/CXF-1199
",new ServiceContractResolver that cxf can resolve wsdl file from extension repository/storage,New Feature,CLOSED,Major,Fixed,None,2.0.4,Core,"currently, cxf support get wsdl URL from local file or internet location. we can add ServiceContractResolver interface make cxf can get wsdl file from extension repository/storage like zip files, UDDI repository, DB storage, etc..
interface ServiceContractResolver
{ URL getContractURL(QName); }
and bus extension to register and unregister resolvers into cxf bus:
interface ServiceContractResolverRegistry
{ //cxf bus extension URL getContractURL(QName); void register(ServiceContractResolver); void unregister(ServiceContractResolver); bool isRegistered(ServiceContractResolver); }
;"
CXF-1147,"https://issues.apache.org/jira/browse/CXF-1147
",Refactoring the jca handler chain building.,Sub-task,CLOSED,Major,Fixed,2.0.2,2.0.3,Integration,"Now, the cxf uses hard-coded configuration in InvocationHandlerFactory class to build the jca handler chain as follow:
String[] classNames =
{""org.apache.cxf.jca.cxf.handlers.ProxyInvocationHandler"", ""org.apache.cxf.jca.cxf.handlers.ObjectMethodInvocationHandler"", ""org.apache.cxf.jca.cxf.handlers.InvokingInvocationHandler""}
;
It would be better for us to build the handler chain from configuration file, such as META-INF/org.apache.cxf.jca.handlers in classpath.
so if we add another jca module jar, say jca-security, we don't need to override the InvocationHandlerFactory to add the jca-security Hanlder,
we just need to add the org.apache.cxf.jca.handlers in jca-security jar, so it can be integrated seamless."
CXF-1130,"https://issues.apache.org/jira/browse/CXF-1130
",Add the weblogic specfic file in deploying RAR.,Sub-task,CLOSED,Major,Fixed,2.0.2,2.0.3,Integration,Add the weblogic-ra.xml and weblogic-ejb-jar.xml for deploying RAR in WebLogic.
CXF-1093,"https://issues.apache.org/jira/browse/CXF-1093
",create the polling thread by using WorkManager,Sub-task,CLOSED,Major,Fixed,2.0.2,2.0.3,Integration,"Now, in JCABusFactory, we create the polling thread directly and using the daemon mode.
1. According to JCA 1.5 spec, it would be better for us to delegate this thread to app server's WorkManager. Do not create thread in the Resource Adapter directly.
2. Write a adapter, so that Jetty is able to use the App servers ThreadPool instead of jetty its own."
CXF-1085,"https://issues.apache.org/jira/browse/CXF-1085
",EnhReq: Add support for TrustStores in PEM format,New Feature,CLOSED,Major,Fixed,2.0.2,2.0.3,Configuration,"Currently, we support config for key and trust stores along the lines of:
{{{
<http:tls(Client|Server)Parameters>
<sec:keyManagers keyPassword=""password"">
<sec:keyStore type=""pkcs12"" password=""password""
file=""src/test/java/org/apache/cxf/systest/http/resources/server.p12""/>
</sec:keyManagers>
<sec:trustManagers>
<sec:keyStore type=""JKS"" password=""password""
file=""src/test/java/org/apache/cxf/systest/http/resources/truststore.jks""/>
</sec:trustManagers>
</http:tls(Client|Server)Parameters>
}}}
I propose a new element [1], sec:pemStore, which can be added to a sec:trustManagers element [2] (but obviously not a sec:keyManagers element), along the lines of:
{{{
<http:tls(Client|Server)Parameters>
<sec:keyManagers keyPassword=""password"">
<sec:keyStore type=""pkcs12"" password=""password""
file=""src/test/java/org/apache/cxf/systest/http/resources/server.p12""/>
</sec:keyManagers>
<sec:trustManagers>
<sec:certStore
file=""src/test/java/org/apache/cxf/systest/http/resources/truststore.pem""/>
</sec:trustManagers>
</http:tls(Client|Server)Parameters>
}}}
The sec:pemStore element also supports the url and resource attributes, analogously to the sec:keyStore element.
The certificates in a pemStore are assumed to be sequence of catenated X.509 certificates, in PEM format.
Patch to follow shortly.
[1] I'd considered overloading the meaning of the ""type"" attribute in the KeyStoreType schema definition, but this is really an abuse of semantics �C the type attribute really means ""keystore encoding"".
[2] We use an xs:choice here, to avoid any ambiguity in config"
CXF-1082,"https://issues.apache.org/jira/browse/CXF-1082
",Improve the Log in jca module.,Sub-task,CLOSED,Major,Fixed,2.0.2,2.0.3,None,"Update the Log in jca module, so that it can be configured by other logging implementor, such as log4j, it uses java.util.logging by default."
CXF-1063,"https://issues.apache.org/jira/browse/CXF-1063
",Refactor the jca/hello_world_soap_http sample.,Sub-task,CLOSED,Major,Fixed,2.0.1,2.0.3,Integration,"1. Need to rename the hello_world_soap_http to outbound.
2. Update README.txt files."
CXF-1047,"https://issues.apache.org/jira/browse/CXF-1047
",Write EJBInvoker to publish the EJB servant.,Sub-task,CLOSED,Major,Fixed,2.0.1,2.0.3,Integration,"Now all the EJB invocation logic all belongs to the JCABusFactory.java, it would be better for us to write the EJBInvoker to do that. better integration with CXF."
CXF-1045,"https://issues.apache.org/jira/browse/CXF-1045
",JCA outbound codes refactoring.,Sub-task,CLOSED,Major,Fixed,2.0.1,2.0.3,Integration,"There are some outbound codes need to be refactored.
1. Use too many Log.fine or Log.info, this really made it bad or annoy to read the code.
2. Use the CXFBusFactory instead of SpringBusFactory, do some cleanup on the JCABusFactory."
CXF-1044,"https://issues.apache.org/jira/browse/CXF-1044
",Make JCA get Connection without providing wsdl.,Sub-task,CLOSED,Major,Fixed,2.0.1,2.0.3,Integration,"Now, if we want to get the connection, we need to supply the wsdlLocation, QName, SEI.
but we should provide only for SEI, address for the connectionrequestInfo."
CXF-787,"https://issues.apache.org/jira/browse/CXF-787
",Add optional support for a toString method to JAXB generated types,New Feature,CLOSED,Major,Fixed,2.0.1,2.0.1,Tooling,"A toString that gives a string representation of the xml content is required for generated JAXB types. This is an option that is available at code gen type, when wsdl2java is used and the result is a toString method that will coaless the content. A <null> string should be produced when a field in the type is absent.
This is handy for debugging and for logging."
CXF-1002,"https://issues.apache.org/jira/browse/CXF-1002
","Message Part is not named correctly (always called ""fault"") - this breaks XFire backward compatibility - Patch attached",Improvement,CLOSED,Major,Fixed,"2.0.1, 2.0.2",2.0.2,JAX-WS Runtime,"There's a one-man discussion here:
http://www.nabble.com/WSDL-part-name-incorrect.-How-do-you-change-it--tf4432101.html
CXF always names the part of a fault as the word ""fault"". IMHO it's better to name it as the fault's simple class name as this is how things were with XFire.
The simple patch attached fixes this."
CXF-899,"https://issues.apache.org/jira/browse/CXF-899
",Missing getFaultInfo() fallback patch - use @WebFault bean as faultInfo if getFaultInfo() is not present,Improvement,CLOSED,Major,Fixed,2.0.1,2.0.2,JAX-WS Runtime,"CXF has interpreted the spec as saying that the getFaultInfo() method MUST be specified on a class annotated with @WebFault.
On page 21 of the JAX-WS 2.0 Spec it says that the class annotated with @WebFault may have two constructors + the getFaultInfo() method. Since we're not enforcing the two constructors, why enforce the getFaultInfo()? There's absolutely no need to do this. The place where this is being enforced is the WebFaultOutInterceptor whose behavior should be changed to using the @WebFault class as the faultInfo bean if getFaultInfo() is not present. This is a good fallback method for cases where the user does not want the additional exception to part of the WSDL for whatever reason. In most cases, one exception is more than good enough to represent a fault.
This also helps those who are migrating from XFire as they can't afford to change the WSDL for existing users. I don't know how much emphasis the CXF team places on backwards compatibility but this alone is a very good reason to make this change.
The current behavior is that if the getFaultInfo() method is not specified then then the @WebFault annotated class' properties become part of the WSDL. The only thing stopping this from being functionally correct is the code in WebFaultOutInterceptor which requires a getFaultInfo() method.
I think this offers greater flexibility to users while still complying with the spec. This way those who'd like to specify getFaultInfo() can do so and those who don't want to, don't have to. I also brought this up on the commits mailing list:
http://www.nabble.com/forum/ViewPost.jtp?post=12055118&framed=y
I'm also uploading a patch for WebFaultOutInterceptor which has the fallback behavior of using the @WebFault bean as the faultInfo if getFaultInfo() is not present.
Thanks,
Zarar"
CXF-888,"https://issues.apache.org/jira/browse/CXF-888
",Control directory for on-disk attachments,Improvement,CLOSED,Major,Fixed,"2.0, 2.0.1",2.0.2,Core,"The directory where attachments are streamed to should be controllable, ideally on a per-service basis. The /tmp dir is not always the best place to put these as /tmp partitions could be small. They also are not secure at all."
CXF-683,"https://issues.apache.org/jira/browse/CXF-683
",Adding method in JAX-WS EndpointImpl in order to get Implementor class,Wish,CLOSED,Major,Fixed,2.0-RC,2,Core,"I'm porting the EasyBeans/Celtix integration to EasyBeans/CXF (exposing an EJB3 as a webservice).
In Celtix, we had a getImplementorClass() method in the EndpointImpl class.
This is not anymore the case in CXF for rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java
The problem is that the implementor object that is given to the EndpointImpl class (in my case) has to be a class and not an instance (the instance will be obtained from a pool by using an our own Invoker on the service).
In the EndpointImpl class, there is the use of the following code:
JaxWsImplementorInfo implInfo = new JaxWsImplementorInfo(implementor.getClass());
List<Handler> chain = builder.buildHandlerChainFromClass(implementor.getClass(), endpointName);
I wanted to know if ""implementor.getClass()"" could be changed into getImplementorClass() method
Then, I can override this method by returning the class. For now, it returns MyClass.getClass() which return java.lang.Class and this is not what is wanted."
CXF-635,"https://issues.apache.org/jira/browse/CXF-635
",Maven 2 Plugin for Java2WSDL,New Feature,CLOSED,Major,Fixed,None,2,Tooling,"I am attaching a patch for the cxf-wsdlgen-plugin. The cxf-wsdlgen-plugin is a Maven 2 plugin for generating the WSDL from annotated Java code. Essentially, it is a MOJO wrapper for JavaToWSDL. It can be used like so:
<build>
<plugins>
<plugin>
<groupId>org.apache.cxf</groupId>
<artifactId>cxf-wsdlgen-plugin</artifactId>
<version>2.0-incubator-SNAPSHOT</version>
<executions>
<execution>
<id>generate-wsdl</id>
<phase>process-classes</phase>
<configuration>
<className>org.apache.cxf.JavaToWSDLExampleService</className>
<!-- The following elements are all optional
<outputFile>C:\cxf-examples\myservice.wsdl</outputFile>
<classpath>${project.build.outputDirectory}</classpath>
<soap12>true</soap12>
<targetNamespace>http://org.apache.cxf/example</targetNamespace>
<serviceName>JavaToWSDLExampleService</serviceName>
<verbose>true</verbose>
<quiet>true</quiet>
-->
</configuration>
<goals>
<goal>java2wsdl</goal>
</goals>
</execution>
</executions>
</plugin>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-compiler-plugin</artifactId>
<configuration>
<source>1.5</source>
<target>1.5</target>
</configuration>
</plugin>
</plugins>
<defaultGoal>install</defaultGoal>
</build>
Note that className is the only required configuration parameter. If no outputFile is specified, it will put the WSDL in ${project.build.directory}/generated/wsdl. If classpath is not specified, it defaults to ${project.build.outputDirectory} (which is usually target/classes).
I originally intended to include this plugin as part of the cxf-codegen-plugin module, but ran into problems with cyclic dependencies in Maven. The cxf-codegen-plugin module would need to depend on cxf-tools-java2wsdl-- but cxf-tools-java2wsdl depends on cxf-codegen-plugin. I tried to get rid of the cyclic dependencies, but everytime I got rid of one, another would show up. So... cxf-wsdlgen-plugin is its own module."
CXF-603,"https://issues.apache.org/jira/browse/CXF-603
",Several ant build files in JBI demos are mangled,Sub-task,CLOSED,Major,Fixed,None,2,None,The invalid xml was probably caused by a bad search and replace
CXF-623,"https://issues.apache.org/jira/browse/CXF-623
",spring bean configuration should support simple wildcards,Improvement,CLOSED,Major,Fixed,2.0-RC,2,Configuration,"to apply configuration to a http destination I need to provide the following:
<bean name=""
{http://www.test.com}
MyPort.http-destination"" abstract=""true"">
<property name=""multiplexWithAddress"" value=""true""/>
</bean>
which matches a single port by name.
I would like to be able to provide
<bean name=""*.http-destination"" abstract=""true"">
<property name=""multiplexWithAddress"" value=""true""/>
</bean>
to indicate to apply the config to all http-destinations. To make this work in practice a class attribute is required, otherwise any wildcard would be matched against all beanNames. The package is probably not required in the className attribute.
<bean name=""*.http-destination"" abstract=""true"" class=""HttpDestination"">
<property name=""multiplexWithAddress"" value=""true""/>
</bean>
To get Spring to merge wildcard and beanName specific config may be a chalenge but it would be great. Possibly it is a case of configuring once with the wildcard match and once with the specific name."
CXF-494,"https://issues.apache.org/jira/browse/CXF-494
",Check jar file first before doing classpath search when resolving entires.,Improvement,CLOSED,Major,Fixed,None,2.0-RC,None,The attached patch changes slightly how the entires are resolved when the base uri is a jar file. The code will first check the parent jar for the entry and then performs classpath search if the entry is not found.
CXF-334,"https://issues.apache.org/jira/browse/CXF-334
",Logical handler's close() method is not properly called after completion,Sub-task,CLOSED,Major,Fixed,None,2.0-RC,JAX-WS Runtime,"Logical handler's close() method is not properly called after completion. A test case can be found from HandlerInvocationTest.testHandlersInvoked()
JAX-WS section 9.3.2.3:
A handler's close method is called at the conclusion of a message exchange pattern (MEP). It is called
just prior to the binding dispatching the final message, fault or exception of the MEP and may be used to
clean up per-MEP resources allocated by a handler. The close method is only called on handlers that were
previously invoked via either handleMessage or handleFault
Conformance (Invoking close): At the conclusion of an MEP, an implementation MUST call the close
method of each handler that was previously invoked during that MEP via either handleMessage or handle-
Fault.
Conformance (Order of close invocations): Handlers are invoked in the reverse order that they appear
in the handler chain."
CXF-333,"https://issues.apache.org/jira/browse/CXF-333
",Logical handler throws ProtocolException,Sub-task,CLOSED,Major,Fixed,None,2.0-RC,JAX-WS Runtime,"According to spec, when logical handler throws ProtocolException, JAX-WS 9.3.2.1:
Throw ProtocolException or a subclass This indicates that normal message processing should cease. 27
Subsequent actions depend on whether the MEP in use requires a response to the message currently 28
being processed or not:
Response Normal message processing stops, fault message processing starts. The message direction 1
is reversed, if the message is not already a fault message then it is replaced with a fault message4, 2
and the runtime invokes handleFault on the next4 handler or dispatches the message (see 3
section 9.1.2.2) if there are no further handlers. 4
No response Normal message processing stops, close is called on each previously invoked handler 5
in the chain, the exception is dispatched (see section 9.1.2.3).
Our current implementation does not conform to this yet. See two commented out test: HandlerInvocationTest.testLogicalHandlerThrowsProtocolExceptionClientSide() and HandlerInvocationTest.xtestLogicalHandlerThrowsProtocolExceptionServerSide"
CXF-332,"https://issues.apache.org/jira/browse/CXF-332
",Logical hander stops processing,Sub-task,CLOSED,Major,Fixed,None,2.0-RC,JAX-WS Runtime,"According to spec, when logical handler returns false:
Return false This indicates that normal message processing should cease. Subsequent actions depend
on whether the message exchange pattern (MEP) in use requires a response to the message currently
being processed2 or not:
Response The message direction is reversed, the runtime invokes handleMessage on the next
handler or dispatches the message (see section 9.1.2.2) if there are no further handlers.
Our current handler implmentation does not conform to this. See commented out test assertion in HandlerInvocationTest.testLogicalHandlerStopProcessing()"
CXF-149,"https://issues.apache.org/jira/browse/CXF-149
",Use individual spec jars from apache/geronimo rather than single jboss dependencies in jca module,Improvement,CLOSED,Major,Fixed,None,2.0-M1,None,The jca module currently uses j2ee 1.4 specs from jboss together with an unneeded jboss-common jar. Using a single full j2ee spec jar effectively prevents tracking exactly which specs are in use. The attached patch removes the unneeded jboss-common dependency and replaces the spec dependency with the j2ca 1.5 and ejb 2.1 spec jars from geronimo.
CXF-466,"https://issues.apache.org/jira/browse/CXF-466
",Check WebServicePermission,New Feature,CLOSED,Major,Fixed,None,2.0-RC,JAX-WS Runtime,"As according to JAX-WS 2.0 spec, the WebServicePermission should be checked when publishing an endpoint. The attached patch adds that feature.
The JAX-WS 2.0 spec only calls for checking that permission only when a SecurityManager is installed. However, JSR 109 always says that this permission must not be granted (even when SecurityManager is not installed). Therefore, the patch contains a bit of code that can also perform the WebServicePermission check when a SecurityManager is not installed. That code is only enabled when 'org.apache.cxf.jaxws.checkPublishEndpointPermission' system property is set (we will set this property in Geronimo)."
CXF-666,"https://issues.apache.org/jira/browse/CXF-666
",SSL Programtic and Spring Configuration and Jetty upgrade to 6.1.3,Improvement,CLOSED,Major,Fixed,2.1,2,"Configuration, Transports","The SSL Configuration needs some improvement to give us more handing of the JSSE components, both programatically and in Spring configuration. A proposal to change the configuration so that we may place KeyManagers, and TrustManagers to be both spring configured as well as programatically configured. Also to remove certain configuration things, such as MaxChainLength, that are are not supported and unimplemented as they may be performed by other things such as interceptors and trust deciders. This will allow us to upgrade to Jetty 6.1.3 as well."
CXF-851,"https://issues.apache.org/jira/browse/CXF-851
","wsld2java -xjc usage is too minimal, there is no way to know what plugin options are available.",Improvement,CLOSED,Major,Fixed,2.0.1,2.0.1,Tooling,"wsdl2java supports -xjc that can be used to pass args to XJC and have it load plugins. The primary focus of the option is to allow plugins to be loaded so it would be nice to know what plugins are available. Something like -xjc-X should show the available plugins.
Also, the ts plugin should exist in the distribution modules not just in the manifest jar."
CXF-803,"https://issues.apache.org/jira/browse/CXF-803
",Configuring interceptors using annotations,New Feature,CLOSED,Major,Fixed,2,2.0.1,Configuration,"It would be helpful to configure interceptors using annotations. CXF would benefit by having annotations similar to XFire's org.codehaus.xfire.annotations.InHandlers and org.codehaus.xfire.annotations.OutHandlers as it would allow specifying specific interceptors for service implementations.
This issue came up on the mailing list: http://www.nabble.com/Configuring-interceptors-using-annotations-tf4097300.html
Thanks,
Zarar"
CXF-902,"https://issues.apache.org/jira/browse/CXF-902
",Add java_first_pojo sample,Sub-task,CLOSED,Major,Fixed,2.1,2.0.2,None,"Add a java_first_pojo sample, using JAXB data binding by default, but you can uncomment those two lines in sample code to use the Aegis data binding:
server-side:
//svrFactory.getServiceFactory().setDataBinding(new AegisDatabinding());
client-side:
//factory.getServiceFactory().setDataBinding(new AegisDatabinding());"
CXF-438,"https://issues.apache.org/jira/browse/CXF-438
",Trust Decider Callback for Conduit,New Feature,CLOSED,Major,Fixed,None,2.0-RC,"Core, Transports","A callback is needed on Conduits that may extract certain information from their underlying protocol implementations that will allow a trust decision to be made. For instance, an HTTP Conduit, once connected should call back with the local bind address, local port, ip address and port of the peer. For a conduit using TLS underneath HTTPS, should also present selected cipher suite and peer certificates as well as selected local certificates, most likely the JSSE SSLSession.
The callback should throw an appropriate security exception should trust not be established, and that exception shall propagate up to the application."
CXF-440,"https://issues.apache.org/jira/browse/CXF-440
",OASIS catalog support,New Feature,CLOSED,Major,Fixed,2.0-RC,2.0-RC,JAX-WS Runtime,"The attached patch contains basic support for OASIS catalog resolution for WSDL and XSD files as required by the JAX-WS spec.
The catalog resolution is done using the Apache Commons Resolver API. Special WSDLLocator and XmlSchemaURIResolver implementations are provided to perform catalog-based resolution. Also, WSDLManagerImpl and WSDLServiceBuilder are updated to use the new resolvers. Various test cases are also included.
By default, (as defined by the spec) the code loads all META-INF/jax-ws-catalog.xml catalogs from the context classloader. The user can overwrite this default behavior by passing a Catalog instance on the bus (as an extension). If there is a better way to pass custom Catalog instances around please let me know.
Also, there is one critical fix to common/common/src/main/java/org/apache/cxf/resource/URIResolver.java class. The member variables must be reset after each resolve() call. Otherwise, if current resolution fails, the previously resolved InputSource will be returned."
CXF-445,"https://issues.apache.org/jira/browse/CXF-445
",Accessing Connection-based info from the transport,Improvement,CLOSED,Major,Fixed,2.0-RC,2.0-RC,Transports,"Original post to cxf-dev mailinglist. Patch to follow:
I'd like to get access to some connection-based information from the transport �C in particular, properties relating to any security context established at the transport (e.g., via an SSL handshake, or via a GSS-Accept) �C
Primarily I'm thinking about the server-side of an invocation, though I suspect there may be client-side requirements, as well, though at present they are not as pressing for me. (They may be later).
In any event, I've found that the transport is not populating the Message with any of the information I need, so I'd like to propose what I think should be a simple solution.
First, I understand the fact that there are potentially many different transport implementations, even perhaps for the same protocols. So in some cases, this information may not be accessible by the transport, which is unfortunate (and perhaps motivation for not using the transport all together, depending on the business requirements). So the solution should allow for the possibility that some transports can't provide the needed info, so that consumers of the information can code defensively in these situations (throw an exception, log a warning, whatever).
I can see how the transport destination implementations are instantiating the Message structures, which in turn get passed to the various interceptors (again, talking about the server-side here). So I'd like the transports, as the divine creators of Messages, to populate said messages with the contextual information I need. The question then becomes, what should this information look like, and how should it be keyed on the Message?
We have several alternatives, which I'd like suggestions on before submitting a patch.
First, I assume for purely organizational purposes we don't want a huge collection of tags on the Message. Not that it matters much (the Message is currently implemented as a HashMap, so adding a lot of data should not have an impact on lookup), but perhaps for purely aestheic reasons, it would be better to aggregate this information in some comprehensible manner.
Going on that assumption, we have some options. We could define a type or collection thereof, each of which has a collection of accessors (and mutators, for the benefit of our transports), which define which data is available, where the types stowed on these structs are common, well-known, and guaranteed likely-to-exist types, e.g.,
class/interface TLSTransportInfo {
java.security.cert.Certificate[] getPeerCertificateChain() ...
}
I started to do this, but the LISP programmer in me said ""there has to be a better way"". (I have an innate repulsion to vacuous code, but I'm old-fashioned that way So I turned to our good friend java.util.Map for inspiration (who needs types when you have a cons!). Why not define leverage a Map<String, Object>, and define a contract for what the structure of the map needs to be �C what tags are associated which what values, which entries are required, vs which are optional. Hey, they might even be able to be recursive structures, if that's not too difficult for consumers to manage. The idea is that the data contract is all documented somewhere, so the producers and consumers of the information just need to consult the docs for the expected behavior.
This has the advantage that we don't have to hand-write all these structs, which are nothing but a collection of accessors and mutators, results in fewer types, and in general just seems a lot cleaner to me. (I suppose if we could codegen these structs, then that would be an advantage, but I'm not sure if you can codegene structs from schema, where the objects stored on the structs are native Java objects.)
I realize that the Message type is a lot like this (it implements Map<String, Object>), but the semantics of ""Message"" are probably not appropriate for this use. Perhaps this new type could be a base-type for Message, so that it has better visibility/use in CF as a whole. Then a Message would extend this type, which it may also contain. Nothing like confusing our users!
Anyway, do folks see this as a potentially valuable addition to CXF? Either way, I need the information from the transport. I think it just boils down to how we want that information to be represented."
CXF-542,"https://issues.apache.org/jira/browse/CXF-542
",Support the factory pattern using a single stateless service endpoint,New Feature,CLOSED,Major,Fixed,None,2.0-RC,Core,"provide support fo the features described at http://mail-archives.apache.org/mod_mbox/incubator-cxf-dev/200704.mbox/%3c1D195F515BDFE04EA40FA8D046308D6A0302AB@emea-ems1.IONAGLOBAL.com%3e
The factory pattern of statefull service interaction does not scale with webservices. However in the case of a single implementation endpoint where the state is embedded in the endpoint reference, it is possible to scale the factory pattern in a reasonable matter. the state embedded in the endpoint reference is used as a key into some persistent store that is used for the duration on the request dispatch.
Support of this nature requires a mechanism to propagate state in an endpoint reference. ie: create an endpoint reference for an existing service with an embedded id, the option to retrieve the id at runtime from the current endpoint reference.
For a client, an easy way to use an endpoint reference is required. Something like the jaxws2.0 service.getPort(endpointreferencetype...)"